{"version":3,"file":"static/js/1795.40b9a2ca.chunk.js","mappings":"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","sources":["components/PageTitleWrapper/index.tsx","content/Loader.tsx","content/customNotification/CustomNotification.tsx","../node_modules/@mui/icons-material/AddTwoTone.js","../node_modules/@mui/icons-material/ForwardToInbox.js","../node_modules/@mui/icons-material/Search.js","../node_modules/@mui/material/TableHead/tableHeadClasses.js","../node_modules/@mui/material/TableHead/TableHead.js","../node_modules/@mui/material/Table/tableClasses.js","../node_modules/@mui/material/Table/Table.js"],"sourcesContent":["import { FC, ReactNode } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Container, styled } from '@mui/material';\r\n\r\nconst PageTitle = styled(Box)(\r\n  ({ theme }) => `\r\n        padding: ${theme.spacing(1)};\r\n`\r\n);\r\n\r\ninterface PageTitleWrapperProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nconst PageTitleWrapper: FC<PageTitleWrapperProps> = ({ children }) => {\r\n  return (\r\n    <PageTitle className=\"MuiPageTitle-wrapper\">\r\n      <Container maxWidth=\"lg\">{children}</Container>\r\n    </PageTitle>\r\n  );\r\n};\r\n\r\nPageTitleWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default PageTitleWrapper;\r\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst Loader1 = (props: Props) => {\r\n  const { title } = props;\r\n  return (\r\n    // <div className=\"loader\">\r\n    //     <img className=\"img\" src={loader} alt=\"\" />\r\n    //     <span>{title}</span>\r\n    // </div>\r\n    <div className=\"spinner-container\">\r\n      <div className=\"loading-spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader1;\r\n","import { Helmet } from 'react-helmet-async';\r\nimport PageTitleWrapper from '../../components/PageTitleWrapper';\r\nimport {\r\n    Grid,\r\n    Container,\r\n    Box,\r\n    Breadcrumbs,\r\n    Button,\r\n    Card,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Divider,\r\n    FormHelperText,\r\n    IconButton,\r\n    Stack,\r\n    Switch,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n    TextField,\r\n    Tooltip,\r\n    Typography,\r\n    useTheme,\r\n    styled,\r\n    FormControl,\r\n    InputAdornment,\r\n    Paper\r\n} from '@mui/material';\r\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\r\nimport AddTwoToneIcon from '@mui/icons-material/AddTwoTone';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport React, { useState, ChangeEvent, useEffect } from 'react';\r\nimport Loader1 from '../Loader';\r\nimport APIservice from 'src/utils/APIservice';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../content/smallScreen.css';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { FormGroup } from 'react-bootstrap';\r\nimport ForwardToInboxIcon from '@mui/icons-material/ForwardToInbox';\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2)\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1)\r\n    },\r\n    '& .MuiPaper-root': {\r\n        height: '700px'\r\n    },\r\n}));\r\n\r\nexport interface DialogTitleProps {\r\n    id: string;\r\n    children?: React.ReactNode;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction BootstrapDialogTitle(props: DialogTitleProps) {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle\r\n            sx={{ m: 0, p: 2, fontSize: '18px', fontWeight: 'bold' }}\r\n            {...other}\r\n        >\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 13,\r\n                        top: 13,\r\n                        color: (theme) => theme.palette.grey[500]\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    );\r\n}\r\n\r\nconst initialState = {\r\n    id: 0,\r\n    name: '',\r\n    title: '',\r\n    description: null,\r\n    isSend: false,\r\n    imageUrl: null,\r\n    sendCount: 0\r\n};\r\n\r\nconst CustomNotification = () => {\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n    const [page, setPage] = useState<number>(0);\r\n    const [limit, setLimit] = useState<number>(10);\r\n    const [row, setRow] = useState<number>(10);\r\n    const [v1, setV1] = React.useState<any>(initialState);\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const [isloading, setIsLoading] = useState(false);\r\n    const [ischeck, setIsCheck] = useState(false);\r\n    let [search, setSearch] = useState('');\r\n\r\n    const [customNotifications, setCustomNotifications] = React.useState<any[]>([]);\r\n    const [isNameError, setIsNameError] = useState(false);\r\n    const [NameErrorMsg, setNameErrorMsg] = useState('');\r\n    const [isTitleError, setIsTitleError] = useState(false);\r\n    const [TitleErrorMsg, setTitleErrorMsg] = useState('');\r\n    const [isDescriptionError, setIsDescriptionError] = useState(false);\r\n    const [DescriptionErrorMsg, setDescriptionErrorMsg] = useState('');\r\n    const [image, setImage] = React.useState('');\r\n    let [credentail, setCredentail] = useState<any>();\r\n\r\n    const [isReadPermission, setIsReadPermission] = useState(true);\r\n    const [isWritePermission, setIsWritePermission] = useState(true);\r\n    const [isEditPermission, setIsEditPermission] = useState(true);\r\n    const [isDeletePermission, setIsDeletePermission] = useState(true);\r\n\r\n    const [isConfirmNotification, setConfirmNotification] = useState(false);\r\n const [isNotificationConfirmation, setIsNotificationConfirmationDialog] = useState(false);\r\n\r\n    const [apiUrl, setApiUrl] = useState<any>();\r\n\r\n\r\n    useEffect(() => {\r\n        let cred = JSON.parse(localStorage.getItem('Credentials'));\r\n        setCredentail(cred);\r\n        if (cred) {\r\n            if (cred.roleId != 1) {\r\n                let ind = cred.pagePermissions.findIndex((c: any) => c.title === \"Block Users\");\r\n                if (ind >= 0) {\r\n                    setIsReadPermission(cred.pagePermissions[ind].isReadPermission);\r\n                    setIsWritePermission(cred.pagePermissions[ind].isAddPermission)\r\n                    setIsEditPermission(cred.pagePermissions[ind].isEditPermission);\r\n                    setIsDeletePermission(cred.pagePermissions[ind].isDeletePermission);\r\n\r\n                    if (cred.pagePermissions[ind].isReadPermission)\r\n                        getdata(page, limit);\r\n                }\r\n            } else {\r\n                getdata(page, limit);\r\n                loadjson();\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n    const loadjson = async () => {\r\n        let res = await fetch('/admin/variable.json'); // Adjust the file path as needed\r\n        let url = await res.json();\r\n        setApiUrl(url);\r\n    }\r\n\r\n    const getdata = async (startIndex: number, fetchRecord: number) => {\r\n        try {\r\n            if (search) {\r\n                const token = localStorage.getItem('SessionToken');\r\n                const refreshToken = localStorage.getItem('RefreshToken');\r\n                let obj = {\r\n                    startIndex: startIndex,\r\n                    fetchRecord: fetchRecord,\r\n                    isActive: null,\r\n                    searchString: search ? search : '',\r\n                };\r\n                const res = await APIservice.httpPost(\r\n                    '/api/admin/customNotification/getCustomNotification',\r\n                    obj,\r\n                    token,\r\n                    refreshToken\r\n                );\r\n                setCustomNotifications(res.recordList);\r\n                setRow(res.totalRecords);\r\n            } else {\r\n                setIsLoading(true);\r\n                const token = localStorage.getItem('SessionToken');\r\n                const refreshToken = localStorage.getItem('RefreshToken');\r\n                let obj = {\r\n                    startIndex: startIndex,\r\n                    fetchRecord: fetchRecord,\r\n                    isActive: null,\r\n                };\r\n                const res = await APIservice.httpPost(\r\n                    '/api/admin/customNotification/getCustomNotification',\r\n                    obj,\r\n                    token,\r\n                    refreshToken\r\n                );\r\n                setCustomNotifications(res.recordList);\r\n                setRow(res.totalRecords);\r\n                if (res && res.status == 200) {\r\n                    setIsOpen(false);\r\n                } else if (res.status == 401) {\r\n                    navigate('/admin');\r\n                    localStorage.clear();\r\n                } else if (res.status == 500) {\r\n                    setIsOpen(false);\r\n                    toast.error(res.message, {\r\n                        autoClose: 6000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'colored',\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                } else if (res.status == 300) {\r\n                    setIsOpen(false);\r\n                    toast.error(res.message, {\r\n                        autoClose: 6000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'colored',\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                } else if (res.status == 400) {\r\n                    setIsOpen(false);\r\n                    toast.error(res.message, {\r\n                        autoClose: 6000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'colored',\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                } else if (res.status == 404) {\r\n                    setIsOpen(false);\r\n                    toast.error(res.message, {\r\n                        autoClose: 6000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'colored',\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                }\r\n                setIsLoading(false);\r\n            }\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n            setIsOpen(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const searchData = (e) => {\r\n        setSearch(e.target.value);\r\n        search = e.target.value;\r\n        getdata(page, limit);\r\n    };\r\n\r\n    const handlePageChange = (event: any, newPage: number): void => {\r\n        setPage(newPage);\r\n        getdata(newPage * limit, limit);\r\n    };\r\n\r\n    const handleLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setLimit(parseInt(event.target.value));\r\n        setPage(0);\r\n        getdata(0, parseInt(event.target.value));\r\n    };\r\n\r\n    const handleClickOpenAdd = async () => {\r\n        setV1(initialState);\r\n        setIsOpen(true);\r\n        setIsNameError(false);\r\n        setNameErrorMsg('');\r\n        setIsTitleError(false);\r\n        setTitleErrorMsg('');\r\n        setIsDescriptionError(false);\r\n        setDescriptionErrorMsg('');\r\n        setImage('');\r\n    };\r\n\r\n    const handleSwitch = async (id: number, status: number) => {\r\n        let obj = {\r\n            id: id,\r\n            status: status\r\n        };\r\n        setV1(obj);\r\n        setIsCheck(true);\r\n    };\r\n\r\n    const handleSwitchCheck = async () => {\r\n        const token = localStorage.getItem('SessionToken');\r\n        const refreshToken = localStorage.getItem('RefreshToken');\r\n        let obj = {\r\n            id: v1.id\r\n        };\r\n        const res = await APIservice.httpPost(\r\n            '/api/admin/customNotification/activeInactiveCustomNotification',\r\n            obj,\r\n            token,\r\n            refreshToken\r\n        );\r\n        setIsCheck(false);\r\n        getdata(page * limit, limit);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setIsCheck(false);\r\n    };\r\n\r\n    const handleClickResend = async (obj: any) => {\r\n        try {\r\n            setIsLoading(true);\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            const res = await APIservice.httpPost(\r\n                '/api/admin/customNotification/sendCustomNotification',\r\n                { \"id\": obj.id },\r\n                token,\r\n                refreshToken\r\n            );\r\n            if (res && res.status == 200) {\r\n                setPage(0);\r\n                setIsOpen(false);\r\n                getdata(0, limit);\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                setIsOpen(false);\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                setIsOpen(false);\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                setIsOpen(false);\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                setIsOpen(false);\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n            setIsLoading(false);\r\n\r\n        } catch (error: any) {\r\n            setIsLoading(false);\r\n            setIsOpen(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleClickOpenEdit = (obj: any) => {\r\n        if (obj.imageUrl) setImage( obj.imageUrl);\r\n        else setImage('');\r\n        setV1(obj);\r\n        setIsOpen(true);\r\n        setIsNameError(false);\r\n        setNameErrorMsg('');\r\n        setIsTitleError(false);\r\n        setTitleErrorMsg('');\r\n        setIsDescriptionError(false);\r\n        setDescriptionErrorMsg('');\r\n    }\r\n\r\n    const handleCloseCustomNotificationDialog = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        setV1({ ...v1, [name]: value });\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const validateName = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsNameError(false);\r\n            setNameErrorMsg('');\r\n        } else {\r\n            setIsNameError(true);\r\n            setNameErrorMsg('Custom Notification Name is required');\r\n        }\r\n    };\r\n    const validateTitle = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsTitleError(false);\r\n            setTitleErrorMsg('');\r\n        } else {\r\n            setIsTitleError(true);\r\n            setTitleErrorMsg('Custom Notification Title is required');\r\n        }\r\n    };\r\n    const validateDescription = (arr) => {\r\n        let value = arr;\r\n        if (value) {\r\n            setIsDescriptionError(false);\r\n            setDescriptionErrorMsg('');\r\n        } else {\r\n            setIsDescriptionError(true);\r\n            setDescriptionErrorMsg('Custom Notification Description is required');\r\n        }\r\n    };\r\n\r\n    const validateForm = (e: any) => {\r\n        e.preventDefault();\r\n        var flag = true;\r\n        if (!v1.name) {\r\n            setIsNameError(true);\r\n            setNameErrorMsg('Custom Notification Name is required');\r\n            flag = false;\r\n        } else {\r\n            setIsNameError(false);\r\n            setNameErrorMsg('');\r\n            // flag = true;\r\n        }\r\n        if (!v1.description) {\r\n            setIsDescriptionError(true);\r\n            setDescriptionErrorMsg('Custom Description is required');\r\n            flag = false;\r\n        } else {\r\n            setIsDescriptionError(false);\r\n            setDescriptionErrorMsg('');\r\n            // flag = true;\r\n        }\r\n        if (!v1.title) {\r\n            setIsTitleError(true);\r\n            setTitleErrorMsg('Custom Notification Title is required');\r\n            flag = false;\r\n        } else {\r\n            setIsTitleError(false);\r\n            setTitleErrorMsg('');\r\n            // flag = true;\r\n        }\r\n        if(!flag){\r\n            setConfirmNotification(false)\r\n        }\r\n        return flag;\r\n    };\r\n\r\n    const handleDescriptionChange = (dateVal: string) => {\r\n        setV1({ ...v1, \"description\": dateVal });\r\n    }\r\n\r\n    const onFileChange = (e: any) => {\r\n        const file = e.target.files[0];\r\n        const name = e.target.name;\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = () => {\r\n            setImage(reader.result.toString());\r\n            setV1({\r\n                ...v1,\r\n                [name]: reader.result.toString()\r\n            });\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const onImageChange = (e: any) => {\r\n        const { name, value } = e.target;\r\n        setV1({\r\n            ...v1,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleConfirmationNotification = (element: any) => {\r\n        debugger\r\n        setConfirmNotification(true);\r\n    };\r\n\r\n    const handleConfirmNotificationClose = () => {\r\n        debugger\r\n        setIsNotificationConfirmationDialog(false);\r\n        setConfirmNotification(false);\r\n      }\r\n\r\n   \r\n\r\n    const saveCustomNotification = async (e: any, isSend: boolean) => {\r\n        var flag = validateForm(e);\r\n        if (flag) {\r\n            try {\r\n                setIsLoading(true);\r\n                v1.imageUrl = v1.imageUrl ? v1.imageUrl : null;\r\n                if (v1.id) {\r\n                    const token = localStorage.getItem('SessionToken');\r\n                    const refreshToken = localStorage.getItem('RefreshToken');\r\n                    let val = v1; let pckgs = [];\r\n                    val.isActive = v1.isActive == 1 ? true : false;\r\n                    val.isDelete = v1.isDelete == 1 ? true : false;\r\n                    val.isSend = isSend;\r\n                    const res = await APIservice.httpPost(\r\n                        '/api/admin/customNotification/insertUpdateCustomNotification',\r\n                        val,\r\n                        token,\r\n                        refreshToken\r\n                    );\r\n                    if (res && res.status == 200) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        getdata(page * limit, limit);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                } else {\r\n                    const token = localStorage.getItem('SessionToken');\r\n                    const refreshToken = localStorage.getItem('RefreshToken');\r\n                    let val = v1;\r\n                    val.isSend = isSend;\r\n                    const res = await APIservice.httpPost(\r\n                        '/api/admin/customNotification/insertUpdateCustomNotification',\r\n                        val,\r\n                        token,\r\n                        refreshToken\r\n                    );\r\n                    if (res && res.status == 200) {\r\n                        setPage(0);\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        getdata(0, limit);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        setConfirmNotification(false);\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                }\r\n                setIsLoading(false);\r\n            } catch (error: any) {\r\n                setIsLoading(false);\r\n                setConfirmNotification(false);\r\n                setIsOpen(false);\r\n                toast.error(error, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ToastContainer\r\n                style={{ top: '8.5%', right: '0%' }}\r\n                // position=\"top-right\"\r\n                autoClose={6000}\r\n                hideProgressBar={true}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n            <Helmet>\r\n                <title>Custom Notification</title>\r\n            </Helmet>\r\n            <PageTitleWrapper>\r\n                <Box p={1}>\r\n                    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                        <Grid item>\r\n                            <Stack alignItems=\"left\" justifyContent=\"space-between\">\r\n                                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                                    <Link to=\"/admin\" style={{ display: 'flex', color: 'black' }}>\r\n                                        <HomeIcon />\r\n                                    </Link>\r\n                                    <Typography\r\n                                        variant=\"subtitle2\"\r\n                                        color=\"inherit\"\r\n                                        fontWeight=\"bold\"\r\n                                    >\r\n                                        Custom Notification\r\n                                    </Typography>\r\n                                </Breadcrumbs>\r\n                            </Stack>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Grid container spacing={1.5}>\r\n                                {isWritePermission ? <>\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            className=\"buttonLarge\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickOpenAdd}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <AddTwoToneIcon fontSize=\"small\" />\r\n                                            Create Custom Notification\r\n                                        </Button>\r\n                                        <Button\r\n                                            className=\"button\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickOpenAdd}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <AddTwoToneIcon fontSize=\"small\" />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <FormControl\r\n                                            sx={{ mt: { xs: 0.3, md: 0.3, lg: 0.3, sm: 0.3 } }}\r\n                                        >\r\n                                            <TextField\r\n                                                // size=\"small\"\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Search\"\r\n                                                variant=\"outlined\"\r\n                                                name=\"searchString\"\r\n                                                value={search}\r\n                                                onChange={(e) => searchData(e)}\r\n                                                size=\"small\"\r\n                                                InputProps={{\r\n                                                    startAdornment: (\r\n                                                        <InputAdornment position=\"start\">\r\n                                                            <SearchIcon />\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </> : <></>}\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </PageTitleWrapper>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"stretch\"\r\n                    spacing={3}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <>\r\n                            <Card className=\"religioncard\">\r\n                                <div>\r\n                                    {isloading ? (\r\n                                        <Loader1 title=\"Loading...\" />\r\n                                    ) : (\r\n                                        <>\r\n                                            <Divider />\r\n                                            {customNotifications && customNotifications.length > 0 ? (\r\n                                                <>\r\n                                                    <TableContainer className=\"religiontableContainer\">\r\n                                                        <Table stickyHeader>\r\n                                                            <TableHead>\r\n                                                                <TableRow>\r\n                                                                    <TableCell colSpan={1}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Sr. No\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={1}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Name\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={1}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Title\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Description\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell align=\"right\" colSpan={1}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Actions\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            </TableHead>\r\n                                                            <TableBody>\r\n                                                                {customNotifications.map((arr: any, index: number) => {\r\n                                                                    return (\r\n                                                                        <TableRow hover key={arr.id}>\r\n                                                                            <TableCell colSpan={1} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                >\r\n                                                                                    {page * limit + index + 1}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={1} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.name}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={1} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.title}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize', width: '250px' }}\r\n                                                                                >\r\n                                                                                    {arr.description}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={1}\r\n                                                                                align=\"right\"\r\n                                                                            >\r\n                                                                                {isEditPermission ?\r\n                                                                                    <>\r\n                                                                                        <Tooltip\r\n                                                                                            title={\r\n                                                                                                arr.isActive === 0\r\n                                                                                                    ? 'Inactive'\r\n                                                                                                    : 'Active'\r\n                                                                                            }\r\n                                                                                            arrow\r\n                                                                                        >\r\n                                                                                            <Switch\r\n                                                                                                disabled={credentail?.email === \"demo@admin.com\"}\r\n                                                                                                checked={\r\n                                                                                                    arr.isActive === 0 ? false : true\r\n                                                                                                }\r\n                                                                                                onClick={(e) =>\r\n                                                                                                    handleSwitch(arr.id, arr.isActive)\r\n                                                                                                }\r\n                                                                                                inputProps={{\r\n                                                                                                    'aria-label': 'controlled'\r\n                                                                                                }}\r\n                                                                                            />\r\n                                                                                        </Tooltip>\r\n                                                                                        <Tooltip title=\"Edit\" arrow>\r\n                                                                                            <IconButton\r\n                                                                                                disabled={credentail?.email === \"demo@admin.com\"}\r\n                                                                                                sx={{\r\n                                                                                                    '&:hover': {\r\n                                                                                                        background:\r\n                                                                                                            theme.colors.primary.lighter\r\n                                                                                                    },\r\n                                                                                                    color: theme.palette.primary.main\r\n                                                                                                }}\r\n                                                                                                color=\"inherit\"\r\n                                                                                                size=\"small\"\r\n                                                                                                onClick={(e) =>\r\n                                                                                                    handleClickOpenEdit(arr)\r\n                                                                                                }\r\n                                                                                                data-toggle=\"modal\"\r\n                                                                                                data-target=\"#exampleModal\"\r\n                                                                                            >\r\n                                                                                                <EditTwoToneIcon fontSize=\"small\" />\r\n                                                                                            </IconButton>\r\n                                                                                        </Tooltip>\r\n                                                                                        <Tooltip title=\"Send\" arrow>\r\n                                                                                            <IconButton\r\n                                                                                                disabled={credentail?.email === \"demo@admin.com\"}\r\n                                                                                                sx={{\r\n                                                                                                    '&:hover': {\r\n                                                                                                        background:\r\n                                                                                                            theme.colors.primary.lighter\r\n                                                                                                    },\r\n                                                                                                    color: theme.palette.primary.main\r\n                                                                                                }}\r\n                                                                                                color=\"inherit\"\r\n                                                                                                size=\"small\"\r\n                                                                                                onClick={(e) =>\r\n                                                                                                    handleClickResend(arr)\r\n                                                                                                }\r\n                                                                                            >\r\n                                                                                                <ForwardToInboxIcon fontSize=\"small\" />\r\n                                                                                            </IconButton>\r\n                                                                                        </Tooltip>\r\n                                                                                    </> : <></>}\r\n\r\n                                                                            </TableCell>\r\n                                                                        </TableRow>\r\n                                                                    );\r\n                                                                })}\r\n                                                            </TableBody>\r\n                                                        </Table>\r\n                                                    </TableContainer>\r\n                                                    <Box p={2}>\r\n                                                        <TablePagination\r\n                                                            component=\"div\"\r\n                                                            count={row}\r\n                                                            onPageChange={handlePageChange}\r\n                                                            onRowsPerPageChange={handleLimitChange}\r\n                                                            page={page}\r\n                                                            rowsPerPage={limit}\r\n                                                            rowsPerPageOptions={[10, 20, 30, 40]}\r\n                                                        />\r\n                                                    </Box>\r\n                                                </>\r\n                                            ) : (\r\n                                                <Paper\r\n                                                    sx={{\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'center',\r\n                                                        alignItems: 'center',\r\n                                                        textAlign: 'center',\r\n                                                        verticalAlign: 'middle',\r\n                                                        boxShadow: 'none'\r\n                                                    }}\r\n                                                    className=\"religioncard\"\r\n                                                >\r\n                                                    <Typography variant=\"h5\" paragraph>\r\n                                                        Data not Found\r\n                                                    </Typography>\r\n                                                </Paper>\r\n                                            )}\r\n                                            <div>\r\n                                                <Dialog\r\n                                                    open={ischeck}\r\n                                                    onClose={handleClose}\r\n                                                    fullWidth\r\n                                                    maxWidth=\"xs\"\r\n                                                >\r\n                                                    <DialogTitle\r\n                                                        sx={{\r\n                                                            m: 0,\r\n                                                            p: 2,\r\n                                                            fontSize: '20px',\r\n                                                            fontWeight: 'bolder'\r\n                                                        }}\r\n                                                    >\r\n                                                        {v1.status === 0 ? 'Inactive' : 'Active'}\r\n                                                    </DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText\r\n                                                            style={{\r\n                                                                fontSize: '1rem',\r\n                                                                letterSpacing: '0.00938em'\r\n                                                            }}\r\n                                                        >\r\n                                                            {v1.status === 0\r\n                                                                ? 'Are you sure you want to Active?'\r\n                                                                : 'Are you sure you want to Inactive?'}\r\n                                                        </DialogContentText>\r\n                                                    </DialogContent>\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={handleClose} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                                        <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={handleSwitchCheck} variant=\"outlined\" style={{ marginRight: '10px' }}>Yes</Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </div>\r\n\r\n                                            <div>\r\n                                                <BootstrapDialog\r\n                                                    open={isOpen}\r\n                                                    onClose={handleCloseCustomNotificationDialog}\r\n                                                    PaperProps={{ sx: { height: '40%' } }}\r\n                                                    fullWidth\r\n                                                    maxWidth=\"md\"\r\n                                                >\r\n                                                    <BootstrapDialogTitle\r\n                                                        id=\"customized-dialog-title\"\r\n                                                        onClose={handleCloseCustomNotificationDialog}\r\n                                                    >\r\n                                                        {v1.id ? 'Edit Custom Notification' : 'Add Custom Notification'}\r\n                                                    </BootstrapDialogTitle>\r\n                                                    <DialogContent dividers>\r\n                                                        <div style={{ textAlign: \"center\" }}>\r\n                                                            <FormGroup\r\n                                                                style={{\r\n                                                                    alignItems: 'center',\r\n                                                                    marginBottom: '10px'\r\n                                                                }}\r\n                                                            >\r\n                                                                <input\r\n                                                                    style={{\r\n                                                                        display: 'none'\r\n                                                                    }}\r\n                                                                    id=\"icon-button-file\"\r\n                                                                    type=\"file\"\r\n                                                                    accept=\"image/*\"\r\n                                                                    name=\"imageUrl\"\r\n                                                                    onChange={(e) => {\r\n                                                                        onFileChange(e);\r\n                                                                    }}\r\n                                                                    className=\"upload-button\"\r\n                                                                />\r\n                                                                <label htmlFor=\"icon-button-file\">\r\n                                                                    {image ? (\r\n                                                                        <img\r\n                                                                            src={image}\r\n                                                                            alt=\"notification Url\"\r\n                                                                            style={{\r\n                                                                                height: '120px',\r\n                                                                                width: 'auto'\r\n                                                                                // borderRadius: '50%',\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    ) : (\r\n                                                                        <img\r\n                                                                            src=\"/dummy.png\"\r\n                                                                            alt=\"notification Url\"\r\n                                                                            style={{\r\n                                                                                height: '100px',\r\n                                                                                width: '100px'\r\n                                                                                // borderRadius: '50%',\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    )}\r\n                                                                </label>\r\n                                                            </FormGroup>\r\n                                                        </div>\r\n                                                        <TextField\r\n                                                            autoFocus\r\n                                                            margin=\"dense\"\r\n                                                            id=\"name\"\r\n                                                            label=\"Custom Notification Name\"\r\n                                                            type=\"text\"\r\n                                                            fullWidth\r\n                                                            variant=\"outlined\"\r\n                                                            name=\"name\"\r\n                                                            value={v1.name}\r\n                                                            onChange={(arr) => {\r\n                                                                handleInputChange(arr);\r\n                                                                validateName(arr);\r\n                                                            }}\r\n                                                            required={true}\r\n                                                        />\r\n                                                        <FormHelperText\r\n                                                            style={{ color: 'red', height: '22px' }}\r\n                                                        >\r\n                                                            {isNameError && NameErrorMsg}\r\n                                                        </FormHelperText>\r\n                                                        {/* </Grid> */}\r\n                                                        {/* <Grid item xs={12}> */}\r\n                                                        <TextField\r\n                                                            autoFocus\r\n                                                            margin=\"dense\"\r\n                                                            id=\"name\"\r\n                                                            label=\"Custom Notification Title\"\r\n                                                            type=\"text\"\r\n                                                            fullWidth\r\n                                                            variant=\"outlined\"\r\n                                                            name=\"title\"\r\n                                                            value={v1.title}\r\n                                                            onChange={(arr) => {\r\n                                                                handleInputChange(arr);\r\n                                                                validateTitle(arr);\r\n                                                            }}\r\n                                                            required={true}\r\n                                                        />\r\n                                                        <FormHelperText\r\n                                                            style={{ color: 'red', height: '22px' }}\r\n                                                        >\r\n                                                            {isTitleError && TitleErrorMsg}\r\n                                                        </FormHelperText>\r\n                                                        <TextField\r\n                                                            id=\"outlined-multiline-static\"\r\n                                                            label=\"Description\"\r\n                                                            multiline\r\n                                                            fullWidth\r\n                                                            rows={4}\r\n                                                            defaultValue=\"\"\r\n                                                            value={v1.description}\r\n                                                            name=\"description\"\r\n                                                            onChange={(arr) => {\r\n                                                                handleInputChange(arr);\r\n                                                                validateDescription(arr);\r\n                                                            }}\r\n                                                            required={true}\r\n                                                        />\r\n                                                        <FormHelperText\r\n                                                            style={{ color: 'red', height: '22px' }}\r\n                                                        >\r\n                                                            {isDescriptionError && DescriptionErrorMsg}\r\n                                                        </FormHelperText>\r\n                                                    </DialogContent>\r\n                                                    <Box\r\n                                                        sx={{\r\n                                                            display: 'flex',\r\n                                                            justifyContent: 'space-between',\r\n                                                            p: '8px'\r\n                                                        }}\r\n                                                    >\r\n                                                        <FormHelperText\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                                height: '22px',\r\n                                                                margin: 'none',\r\n                                                                padding: '8px'\r\n                                                            }}\r\n                                                        >\r\n                                                        </FormHelperText>\r\n                                                        <div>\r\n                                                            <Typography>\r\n                                                                <Button onClick={handleCloseCustomNotificationDialog} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                                                {/* <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => { saveCustomNotification(e, true) }} variant=\"outlined\" style={{ marginRight: '10px' }}>Send & Save</Button> */}\r\n                                                                <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => { handleConfirmationNotification(e) }} variant=\"outlined\" style={{ marginRight: '10px' }}>Send & Save</Button>\r\n                                                                <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => { saveCustomNotification(e, false) }} variant=\"outlined\" style={{ marginRight: '10px' }}>Save</Button>\r\n\r\n                                                            </Typography>\r\n\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                </BootstrapDialog>\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <div>\r\n                                <Dialog\r\n                                    open={isConfirmNotification}\r\n                                    onClose={handleConfirmNotificationClose}\r\n                                    fullWidth\r\n                                    maxWidth=\"xs\"\r\n                                >\r\n                                    <DialogTitle\r\n                                        sx={{\r\n                                            m: 0,\r\n                                            p: 2,\r\n                                            fontSize: '16px',\r\n                                            fontWeight: 'bolder',\r\n                                            // borderBottom: '1px solid #ddd'\r\n                                        }}\r\n                                    >\r\n                                        Are you sure you want to send and save this notification?\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n\r\n\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleConfirmNotificationClose} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                        <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => {\r\n                                            saveCustomNotification(e,true)\r\n                                        }} variant=\"outlined\" style={{ marginRight: '10px' }}>Save And Send</Button>\r\n                                        \r\n                                    </DialogActions>\r\n                                </Dialog>\r\n                            </div>\r\n                        </>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomNotification;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'AddTwoTone');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9v-2H4V8l8 5 8-5v5h2V6c0-1.1-.9-2-2-2zm-8 7L4 6h16l-8 5zm7 4 4 4-4 4v-3h-4v-2h4v-3z\"\n}), 'ForwardToInbox');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\n}), 'Search');\nexports.default = _default;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableHeadUtilityClass(slot) {\n  return generateUtilityClass('MuiTableHead', slot);\n}\nconst tableHeadClasses = generateUtilityClasses('MuiTableHead', ['root']);\nexport default tableHeadClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableHeadUtilityClass } from './tableHeadClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableHeadUtilityClass, classes);\n};\nconst TableHeadRoot = styled('thead', {\n  name: 'MuiTableHead',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-header-group'\n});\nconst tablelvl2 = {\n  variant: 'head'\n};\nconst defaultComponent = 'thead';\nconst TableHead = /*#__PURE__*/React.forwardRef(function TableHead(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableHead'\n  });\n  const {\n      className,\n      component = defaultComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableHeadRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableHead;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableUtilityClass(slot) {\n  return generateUtilityClass('MuiTable', slot);\n}\nconst tableClasses = generateUtilityClasses('MuiTable', ['root', 'stickyHeader']);\nexport default tableClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"padding\", \"size\", \"stickyHeader\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport TableContext from './TableContext';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableUtilityClass } from './tableClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    stickyHeader\n  } = ownerState;\n  const slots = {\n    root: ['root', stickyHeader && 'stickyHeader']\n  };\n  return composeClasses(slots, getTableUtilityClass, classes);\n};\nconst TableRoot = styled('table', {\n  name: 'MuiTable',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.stickyHeader && styles.stickyHeader];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'table',\n  width: '100%',\n  borderCollapse: 'collapse',\n  borderSpacing: 0,\n  '& caption': _extends({}, theme.typography.body2, {\n    padding: theme.spacing(2),\n    color: (theme.vars || theme).palette.text.secondary,\n    textAlign: 'left',\n    captionSide: 'bottom'\n  })\n}, ownerState.stickyHeader && {\n  borderCollapse: 'separate'\n}));\nconst defaultComponent = 'table';\nconst Table = /*#__PURE__*/React.forwardRef(function Table(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTable'\n  });\n  const {\n      className,\n      component = defaultComponent,\n      padding = 'normal',\n      size = 'medium',\n      stickyHeader = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component,\n    padding,\n    size,\n    stickyHeader\n  });\n  const classes = useUtilityClasses(ownerState);\n  const table = React.useMemo(() => ({\n    padding,\n    size,\n    stickyHeader\n  }), [padding, size, stickyHeader]);\n  return /*#__PURE__*/_jsx(TableContext.Provider, {\n    value: table,\n    children: /*#__PURE__*/_jsx(TableRoot, _extends({\n      as: component,\n      role: component === defaultComponent ? null : 'table',\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   * @default 'normal'\n   */\n  padding: PropTypes.oneOf(['checkbox', 'none', 'normal']),\n  /**\n   * Allows TableCells to inherit size of the Table.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * Set the header sticky.\n   *\n   * ⚠️ It doesn't work with IE11.\n   * @default false\n   */\n  stickyHeader: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Table;"],"names":["PageTitle","styled","Box","_ref","theme","spacing","_ref2","children","_jsx","className","Container","maxWidth","props","title","BootstrapDialog","Dialog","padding","height","BootstrapDialogTitle","onClose","other","_jsxs","DialogTitle","sx","m","p","fontSize","fontWeight","IconButton","onClick","position","right","top","color","palette","grey","CloseIcon","initialState","id","name","description","isSend","imageUrl","sendCount","CustomNotification","navigate","useNavigate","useTheme","page","setPage","useState","limit","setLimit","row","setRow","v1","setV1","React","isOpen","setIsOpen","isloading","setIsLoading","ischeck","setIsCheck","search","setSearch","customNotifications","setCustomNotifications","isNameError","setIsNameError","NameErrorMsg","setNameErrorMsg","isTitleError","setIsTitleError","TitleErrorMsg","setTitleErrorMsg","isDescriptionError","setIsDescriptionError","DescriptionErrorMsg","setDescriptionErrorMsg","image","setImage","credentail","setCredentail","isReadPermission","setIsReadPermission","isWritePermission","setIsWritePermission","isEditPermission","setIsEditPermission","isDeletePermission","setIsDeletePermission","isConfirmNotification","setConfirmNotification","isNotificationConfirmation","setIsNotificationConfirmationDialog","apiUrl","setApiUrl","useEffect","cred","JSON","parse","localStorage","getItem","roleId","ind","pagePermissions","findIndex","c","isAddPermission","getdata","loadjson","async","res","fetch","url","json","startIndex","fetchRecord","token","refreshToken","obj","isActive","searchString","APIservice","httpPost","recordList","totalRecords","status","clear","toast","error","message","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","POSITION","TOP_RIGHT","handleClickOpenAdd","handleClose","handleCloseCustomNotificationDialog","handleInputChange","arr","value","target","handleConfirmNotificationClose","saveCustomNotification","e","flag","preventDefault","validateForm","val","isDelete","ToastContainer","style","newestOnTop","rtl","pauseOnFocusLoss","Helmet","PageTitleWrapper","Grid","container","justifyContent","alignItems","item","Stack","Breadcrumbs","Link","to","display","HomeIcon","Typography","variant","_Fragment","Button","mt","xs","md","size","AddTwoToneIcon","FormControl","lg","sm","TextField","label","onChange","searchData","InputProps","startAdornment","InputAdornment","SearchIcon","direction","Card","Loader1","Divider","length","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","colSpan","noWrap","marginBottom","align","TableBody","map","index","hover","gutterBottom","textTransform","width","Tooltip","arrow","Switch","disabled","email","checked","handleSwitch","inputProps","background","colors","primary","lighter","main","handleClickOpenEdit","EditTwoToneIcon","handleClickResend","ForwardToInboxIcon","TablePagination","component","count","onPageChange","handlePageChange","event","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","Paper","textAlign","verticalAlign","boxShadow","paragraph","open","fullWidth","DialogContent","DialogContentText","letterSpacing","DialogActions","marginRight","PaperProps","dividers","FormGroup","type","accept","file","files","reader","FileReader","onload","result","toString","readAsDataURL","onFileChange","htmlFor","src","alt","autoFocus","margin","validateName","required","FormHelperText","validateTitle","multiline","rows","defaultValue","validateDescription","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getTableHeadUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableHeadRoot","overridesResolver","styles","root","tablelvl2","defaultComponent","inProps","ref","useDefaultProps","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","Tablelvl2Context","Provider","as","clsx","role","getTableUtilityClass","TableRoot","borderCollapse","borderSpacing","typography","body2","vars","text","secondary","captionSide","slots","table","TableContext"],"sourceRoot":""}