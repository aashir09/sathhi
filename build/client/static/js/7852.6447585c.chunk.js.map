{"version":3,"file":"static/js/7852.6447585c.chunk.js","mappings":"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","sources":["components/PageTitleWrapper/index.tsx","content/Loader.tsx","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js","content/setAPI/Setting.tsx","../node_modules/@mui/material/FormGroup/formGroupClasses.js","../node_modules/@mui/material/FormGroup/FormGroup.js","../node_modules/@mui/material/Switch/switchClasses.js","../node_modules/@mui/material/Switch/Switch.js","../node_modules/@mui/material/TableContainer/tableContainerClasses.js","../node_modules/@mui/material/TableContainer/TableContainer.js","../node_modules/@mui/material/internal/switchBaseClasses.js","../node_modules/@mui/material/internal/SwitchBase.js","../node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js","../node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js"],"sourcesContent":["import { FC, ReactNode } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Container, styled } from '@mui/material';\r\n\r\nconst PageTitle = styled(Box)(\r\n  ({ theme }) => `\r\n        padding: ${theme.spacing(1)};\r\n`\r\n);\r\n\r\ninterface PageTitleWrapperProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nconst PageTitleWrapper: FC<PageTitleWrapperProps> = ({ children }) => {\r\n  return (\r\n    <PageTitle className=\"MuiPageTitle-wrapper\">\r\n      <Container maxWidth=\"lg\">{children}</Container>\r\n    </PageTitle>\r\n  );\r\n};\r\n\r\nPageTitleWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default PageTitleWrapper;\r\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst Loader1 = (props: Props) => {\r\n  const { title } = props;\r\n  return (\r\n    // <div className=\"loader\">\r\n    //     <img className=\"img\" src={loader} alt=\"\" />\r\n    //     <span>{title}</span>\r\n    // </div>\r\n    <div className=\"spinner-container\">\r\n      <div className=\"loading-spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader1;\r\n","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","import { ChangeEvent, useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  Grid,\r\n  TableContainer,\r\n  Typography,\r\n  Stack,\r\n  Tooltip,\r\n  Switch,\r\n  TextField,\r\n  IconButton,\r\n  InputAdornment,\r\n  FormGroup,\r\n  Select,\r\n  MenuItem,\r\n  Checkbox,\r\n  ListItemText,\r\n  FormControl,\r\n  FormHelperText\r\n} from '@mui/material';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport PageTitleWrapper from 'src/components/PageTitleWrapper';\r\nimport APIservice from 'src/utils/APIservice';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\r\nimport Tab from '@mui/material/Tab';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport Loader1 from '../Loader';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport \"./Setting.css\"\r\n\r\nconst modules = {\r\n  toolbar: {\r\n    container: [\r\n      [{ header: [1, 2, false] }],\r\n      ['bold', 'italic', 'underline', 'strike'],\r\n      [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n      ['link', 'image']\r\n    ],\r\n  },\r\n};\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst Setting = () => {\r\n  const [list, setList] = useState<any[]>([]);\r\n  const [groupflag, setGroupFlag] = useState([]);\r\n  const [value, setValue] = useState('0');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  let [credentail, setCredentail] = useState<any>();\r\n\r\n  const [isReadPermission, setIsReadPermission] = useState(true);\r\n  const [isWritePermission, setIsWritePermission] = useState(true);\r\n  const [isEditPermission, setIsEditPermission] = useState(true);\r\n  const [isDeletePermission, setIsDeletePermission] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n\r\n  let [apiUrl, setApiUrl] = useState<any>();\r\n\r\n  // window.onpopstate = () => {\r\n  //   navigate(-1);\r\n  // }\r\n\r\n  useEffect(() => {\r\n    let cred = JSON.parse(localStorage.getItem('Credentials'));\r\n    setCredentail(cred);\r\n    //getData();\r\n    if (cred) {\r\n      if (cred.roleId != 1) {\r\n        let ind = cred.pagePermissions.findIndex((c: any) => c.title === \"Block Users\");\r\n        if (ind >= 0) {\r\n          setIsReadPermission(cred.pagePermissions[ind].isReadPermission);\r\n          setIsWritePermission(cred.pagePermissions[ind].isAddPermission)\r\n          setIsEditPermission(cred.pagePermissions[ind].isEditPermission);\r\n          setIsDeletePermission(cred.pagePermissions[ind].isDeletePermission);\r\n\r\n          if (cred.pagePermissions[ind].isReadPermission)\r\n            getData();\r\n          loadjson()\r\n        }\r\n      } else {\r\n        getData();\r\n        loadjson();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const loadjson = async () => {\r\n    let res = await fetch('/admin/variable.json'); // Adjust the file path as needed\r\n    let url = await res.json();\r\n    setApiUrl(url);\r\n    apiUrl = url;\r\n  }\r\n\r\n  const getData = async () => {\r\n    setIsLoading(true);\r\n    const token = localStorage.getItem('SessionToken');\r\n    const refreshToken = localStorage.getItem('RefreshToken');\r\n    let response = await APIservice.httpPost(\r\n      '/api/admin/systemflags/getAdminSystemFlagSetting',\r\n      {},\r\n      token,\r\n      refreshToken\r\n    );\r\n    let _data = response.recordList;\r\n    if (_data && _data.length > 0) {\r\n      for (let i = 0; i < _data.length; i++) {\r\n        for (let j = 0; j < _data[i].group.length; j++) {\r\n          for (let k = 0; k < _data[i].group[j].systemFlag.length; k++) {\r\n            if (_data[i].group[j].systemFlag[k].valueTypeId === 9) {\r\n              if (_data[i].group[j].systemFlag[k].value)\r\n                _data[i].group[j].systemFlag[k].value =  _data[i].group[j].systemFlag[k].value;\r\n            }\r\n          }\r\n        }\r\n        for (let j = 0; j < _data[i].systemFlag.length; j++) {\r\n          if (_data[i].systemFlag[j].valueTypeId === 9) {\r\n            if (_data[i].systemFlag[j].value)\r\n              _data[i].systemFlag[j].value =  _data[i].systemFlag[j].value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    setList(_data);\r\n    let data = _data[0].systemFlag[0].value;\r\n    localStorage.setItem('DateFormat', data);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleEditorChange = (value: string, id: number, flagGroup: any, childGroup: any, pSystemFlag: any) => {\r\n    // setContent(value);\r\n    // onChange(value);\r\n    let changeFlag = false;\r\n    console.log(\"value\");\r\n    let fGroups = JSON.parse(JSON.stringify(list));\r\n    if (flagGroup && flagGroup.id) {\r\n      let ind = fGroups.findIndex((c) => c.id == flagGroup.id);\r\n      if (ind >= 0) {\r\n        if (childGroup && childGroup.id) {\r\n          let cInd = fGroups[ind].group.findIndex((c) => c.id == childGroup.id);\r\n          if (cInd >= 0) {\r\n            let sInd = fGroups[ind].group[cInd].systemFlag.findIndex(\r\n              (c) => c.id == parseInt(id + \"\")\r\n            );\r\n            if (sInd >= 0) {\r\n              if (fGroups[ind].group[cInd].systemFlag[sInd].value != value) {\r\n                fGroups[ind].group[cInd].systemFlag[sInd].value = value;\r\n                changeFlag = true;\r\n              }\r\n              let childFlags = fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag;\r\n              if (childFlags && childFlags.length > 0) {\r\n                for (let i = 0; i < fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag.length; i++) {\r\n                  if (fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].parentFlagValue == fGroups[ind].group[cInd].systemFlag[sInd].value) {\r\n                    fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].autoRender = 1;\r\n                  } else {\r\n                    fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].autoRender = 0;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (pSystemFlag && pSystemFlag.id) {\r\n              let psind = fGroups[ind].group[cInd].systemFlag.findIndex((c) => c.id == pSystemFlag.id);;\r\n              let csInd = fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag.findIndex(\r\n                (c) => c.id == parseInt(id + \"\")\r\n              );\r\n              if (csInd >= 0) {\r\n                fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag[csInd].value =\r\n                  value;\r\n              }\r\n            }\r\n\r\n          }\r\n        } else {\r\n          let sInd = fGroups[ind].systemFlag.findIndex(\r\n            (c) => c.id == parseInt(id + \"\")\r\n          );\r\n          if (sInd >= 0) {\r\n            if (fGroups[ind].systemFlag[sInd].value != value) {\r\n              fGroups[ind].systemFlag[sInd].value = value;\r\n              changeFlag = true;\r\n            }\r\n            let childFlags = fGroups[ind].systemFlag[sInd].childSystemFlag;\r\n            if (childFlags && childFlags.length > 0) {\r\n              for (let i = 0; i < fGroups[ind].systemFlag[sInd].childSystemFlag.length; i++) {\r\n                if (fGroups[ind].systemFlag[sInd].childSystemFlag[i].parentFlagValue == fGroups[ind].systemFlag[sInd].value) {\r\n                  fGroups[ind].systemFlag[sInd].childSystemFlag[i].autoRender = 1;\r\n                } else {\r\n                  fGroups[ind].systemFlag[sInd].childSystemFlag[i].autoRender = 0;\r\n                }\r\n              }\r\n            }\r\n\r\n          }\r\n\r\n          if (pSystemFlag && pSystemFlag.id) {\r\n            let psind = fGroups[ind].systemFlag.findIndex((c) => c.id == pSystemFlag.id);\r\n            let csInd = fGroups[ind].systemFlag[psind].childSystemFlag.findIndex(\r\n              (c) => c.id == parseInt(id + \"\")\r\n            );\r\n            if (csInd >= 0) {\r\n              fGroups[ind].systemFlag[psind].childSystemFlag[csInd].value = value\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (changeFlag)\r\n      setList(fGroups);\r\n  };\r\n\r\n\r\n  const handleflagChange = (e: ChangeEvent<HTMLInputElement>, flagGroup: any, childGroup: any, pSystemFlag: any) => {\r\n    debugger;\r\n    //let flagGroup = JSON.parse(JSON.stringify(list));\r\n    let fGroups = JSON.parse(JSON.stringify(list));\r\n    if (flagGroup && flagGroup.id) {\r\n      let ind = fGroups.findIndex((c) => c.id == flagGroup.id);\r\n      if (ind >= 0) {\r\n        if (childGroup && childGroup.id) {\r\n          let cInd = fGroups[ind].group.findIndex((c) => c.id == childGroup.id);\r\n          if (cInd >= 0) {\r\n            let sInd = fGroups[ind].group[cInd].systemFlag.findIndex(\r\n              (c) => c.id == parseInt(e.target.name)\r\n            );\r\n            if (sInd >= 0) {\r\n              if (fGroups[ind].group[cInd].systemFlag[sInd].valueTypeId === 7) {\r\n                // let res = fGroups[ind].group[cInd].systemFlag[sInd].value\r\n                // res === 0 ? 1 : 0\r\n                fGroups[ind].group[cInd].systemFlag[sInd].value = (fGroups[ind].group[cInd].systemFlag[sInd].value === '1' || fGroups[ind].group[cInd].systemFlag[sInd].value === true) ? true : false;\r\n                fGroups[ind].group[cInd].systemFlag[sInd].value = !(\r\n                  fGroups[ind].group[cInd].systemFlag[sInd].value\r\n                );\r\n              } else {\r\n                fGroups[ind].group[cInd].systemFlag[sInd].value =\r\n                  e.target.value;\r\n              }\r\n\r\n              let childFlags = fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag;\r\n              if (childFlags && childFlags.length > 0) {\r\n                for (let i = 0; i < fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag.length; i++) {\r\n                  if (fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].parentFlagValue == fGroups[ind].group[cInd].systemFlag[sInd].value) {\r\n                    fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].autoRender = 1;\r\n\r\n                    if (fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].valueTypeId === 7) {\r\n                      fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].value = (fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].value === '1' || fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].value === true) ? true : false;\r\n                      fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].value = !(\r\n                        fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].value\r\n                      );\r\n                    }\r\n                  } else {\r\n                    fGroups[ind].group[cInd].systemFlag[sInd].childSystemFlag[i].autoRender = 0;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (pSystemFlag && pSystemFlag.id) {\r\n              let psind = fGroups[ind].group[cInd].systemFlag.findIndex((c) => c.id == pSystemFlag.id);;\r\n              let csInd = fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag.findIndex(\r\n                (c) => c.id == parseInt(e.target.name)\r\n              );\r\n              if (csInd >= 0) {\r\n                if (fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag[csInd].valueTypeId === 7) {\r\n                  // let res = fGroups[ind].group[cInd].systemFlag[sInd].value\r\n                  // res === 0 ? 1 : 0\r\n                  fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag[csInd].value = (fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag[csInd].value === '1' || fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag[csInd].value === true) ? true : false;\r\n                  fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag[csInd].value = !(\r\n                    fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag[csInd].value\r\n                  );\r\n                } else {\r\n                  fGroups[ind].group[cInd].systemFlag[psind].childSystemFlag[csInd].value =\r\n                    e.target.value;\r\n                }\r\n              }\r\n            }\r\n\r\n          }\r\n\r\n        } else {\r\n          let sInd = fGroups[ind].systemFlag.findIndex(\r\n            (c) => c.id == parseInt(e.target.name)\r\n          );\r\n          if (sInd >= 0) {\r\n            if (fGroups[ind].systemFlag[sInd].valueTypeId === 7) {\r\n              fGroups[ind].systemFlag[sInd].value = (fGroups[ind].systemFlag[sInd].value === '1' || fGroups[ind].systemFlag[sInd].value === true) ? true : false;\r\n              fGroups[ind].systemFlag[sInd].value = !(fGroups[ind].systemFlag[sInd].value);\r\n              if (fGroups[ind].systemFlag[sInd].id == 41 && !fGroups[ind].systemFlag[sInd].value) {\r\n                let rewardInd = fGroups[ind].systemFlag.findIndex(c => c.id == 42);\r\n                if (rewardInd >= 0 && fGroups[ind].systemFlag[rewardInd].valueTypeId === 7) {\r\n                  fGroups[ind].systemFlag[rewardInd].value = false;\r\n                }\r\n              }\r\n            } else {\r\n              fGroups[ind].systemFlag[sInd].value = e.target.value;\r\n            }\r\n\r\n            let childFlags = fGroups[ind].systemFlag[sInd].childSystemFlag;\r\n            if (childFlags && childFlags.length > 0) {\r\n              for (let i = 0; i < fGroups[ind].systemFlag[sInd].childSystemFlag.length; i++) {\r\n                if (fGroups[ind].systemFlag[sInd].childSystemFlag[i].parentFlagValue == fGroups[ind].systemFlag[sInd].value) {\r\n                  fGroups[ind].systemFlag[sInd].childSystemFlag[i].autoRender = 1;\r\n\r\n                  if (fGroups[ind].systemFlag[sInd].childSystemFlag[i].valueTypeId === 7) {\r\n                    fGroups[ind].systemFlag[sInd].childSystemFlag[i].value = (fGroups[ind].systemFlag[sInd].childSystemFlag[i].value === '1' || fGroups[ind].systemFlag[sInd].childSystemFlag[i].value === true) ? true : false;\r\n                    fGroups[ind].systemFlag[sInd].childSystemFlag[i].value = !(\r\n                      fGroups[ind].systemFlag[sInd].childSystemFlag[i].value\r\n                    );\r\n                  }\r\n                } else {\r\n                  fGroups[ind].systemFlag[sInd].childSystemFlag[i].autoRender = 0;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (pSystemFlag && pSystemFlag.id) {\r\n            let psind = fGroups[ind].systemFlag.findIndex((c) => c.id == pSystemFlag.id);\r\n            let csInd = fGroups[ind].systemFlag[psind].childSystemFlag.findIndex(\r\n              (c) => c.id == parseInt(e.target.name)\r\n            );\r\n            if (csInd >= 0) {\r\n              if (fGroups[ind].systemFlag[psind].childSystemFlag[csInd].valueTypeId === 7) {\r\n                // let res = fGroups[ind].group[cInd].systemFlag[sInd].value\r\n                // res === 0 ? 1 : 0\r\n                fGroups[ind].systemFlag[psind].childSystemFlag[csInd].value = (fGroups[ind].systemFlag[psind].childSystemFlag[csInd].value === '1' || fGroups[ind].systemFlag[psind].childSystemFlag[csInd].value === true) ? true : false;\r\n                fGroups[ind].systemFlag[psind].childSystemFlag[csInd].value = !(\r\n                  fGroups[ind].systemFlag[psind].childSystemFlag[csInd].value\r\n                );\r\n              } else {\r\n                fGroups[ind].systemFlag[psind].childSystemFlag[csInd].value =\r\n                  e.target.value;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n        let checkindex = fGroups[ind].systemFlag.findIndex((c) => c.value === \"PreFix\" || c.value === \"PostFix\");\r\n        // if (checkindex >= 0) {\r\n        //   setIsPreOrPost(true);\r\n        // } else {\r\n        //   setIsPreOrPost(false);\r\n        // }\r\n\r\n      }\r\n    }\r\n\r\n    //show child flag on condition\r\n    // let value: any\r\n    // if (e.target.value === '1' || e.target.value === '0' || e.target.value === 'true' || e.target.value === 'false') {\r\n    //   //store opposite boolean value in value\r\n    //   value = (e.target.value === '1' || e.target.value === 'true') ? 0 : 1;\r\n    // } else {\r\n    //   value = e.target.value\r\n    // }\r\n    // if (fGroups && fGroups.length > 0) {\r\n    //   if (fGroups && fGroups.length > 0) {\r\n    //     debugger\r\n    //     for (let i = 0; i < fGroups.length; i++) {\r\n    //       for (let j = 0; j < fGroups[i].group.length; j++) {\r\n\r\n    //         let matchingIndices = fGroups[i].group[j].systemFlag\r\n    //           .map((c: any, index: number) => ({ ...c, index }))  // Map to objects with value and index\r\n    //           .filter((c: any) => c.parentFlagId == parseInt(e.target.name))  // Filter those that match the condition\r\n    //           .map((c: any) => c.index);\r\n\r\n    //         if (matchingIndices && matchingIndices.length > 0) {\r\n    //           for (let index of matchingIndices) {\r\n    //             if (fGroups[i].group[j].systemFlag[index].parentFlagValue == value) {\r\n    //               fGroups[i].group[j].systemFlag[index].autoRender = true;\r\n    //               if (fGroups[i].group[j].systemFlag[index].valueTypeId === 7) {\r\n\r\n    //                 fGroups[i].group[j].systemFlag[index].value = (fGroups[i].group[j].systemFlag[index].value === '1' || fGroups[i].group[j].systemFlag[index].value === true) ? true : false;\r\n    //                 fGroups[i].group[j].systemFlag[index].value = !(\r\n    //                   fGroups[i].group[j].systemFlag[index].value\r\n    //                 );\r\n    //               }\r\n    //             } else {\r\n    //               fGroups[i].group[j].systemFlag[index].autoRender = false;\r\n    //             }\r\n    //           }\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //     for (let i = 0; i < fGroups.length; i++) {\r\n    //       for (let j = 0; j < fGroups[i].systemFlag.length; j++) {\r\n\r\n    //         // let childSysFlagInd = fGroups[i].systemFlag.findIndex((c: any) => (c.parentFlagId == parseInt(e.target.name)) && (c.parentFlagValue == value));\r\n\r\n    //         let matchingIndices = fGroups[i].systemFlag\r\n    //           .map((c: any, index: number) => ({ ...c, index }))  // Map to objects with value and index\r\n    //           .filter((c: any) => c.parentFlagId == parseInt(e.target.name))  // Filter those that match the condition\r\n    //           .map((c: any) => c.index);\r\n\r\n    //         if (matchingIndices && matchingIndices.length > 0) {\r\n    //           for (let index of matchingIndices) {\r\n    //             if (fGroups[i].systemFlag[index].parentFlagValue == value) {\r\n    //               fGroups[i].systemFlag[index].autoRender = 1;\r\n    //               if (fGroups[i].systemFlag[index].valueTypeId === 7) {\r\n    //                 fGroups[i].systemFlag[index].value = (fGroups[i].systemFlag[index].value === '1' || fGroups[i].systemFlag[index].value === true) ? true : false;\r\n    //                 fGroups[i].systemFlag[index].value = !(\r\n    //                   fGroups[i].systemFlag[index].value\r\n    //                 );\r\n    //               }\r\n    //             } else {\r\n    //               fGroups[i].systemFlag[index].autoRender = 0;\r\n    //             }\r\n    //           }\r\n    //         }\r\n\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n    setList(fGroups);\r\n\r\n  };\r\n\r\n  // const validateForm = () => {\r\n  //   let flag = true;\r\n  //   if (isPrePostFixError) {\r\n  //     flag = false;\r\n  //   }\r\n  //   return flag\r\n  // }\r\n\r\n  const handleClick = async (e: any) => {\r\n    debugger\r\n    // var flag = validateForm();\r\n    // if (flag) {\r\n    const token = localStorage.getItem('SessionToken');\r\n    const refreshToken = localStorage.getItem('RefreshToken');\r\n    let nameList = new Array<string>();\r\n    let valueList = new Array<string>();\r\n    let autoRenderList = new Array<any>();\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (list[i].systemFlag && list[i].systemFlag.length > 0) {\r\n        for (let k = 0; k < list[i].systemFlag.length; k++) {\r\n          if (list[i].systemFlag[k].valueTypeId == 10)\r\n            list[i].systemFlag[k].value = Array.isArray(list[i].systemFlag[k].value) ? list[i].systemFlag[k].value.join(\";\") : list[i].systemFlag[k].value;\r\n\r\n          nameList.push(list[i].systemFlag[k].name);\r\n          valueList.push(list[i].systemFlag[k].value);\r\n          autoRenderList.push(list[i].systemFlag[k].autoRender);\r\n          localStorage.setItem('DateFormat', valueList[0]);\r\n          if (list[i].systemFlag[k].name == 'isUserProfilePicApprove')\r\n            localStorage.setItem('isUserProfilePicApprove', list[i].systemFlag[k].value);\r\n\r\n          if (list[i].systemFlag[k].childSystemFlag && list[i].systemFlag[k].childSystemFlag.length > 0) {\r\n            for (let l = 0; l < list[i].systemFlag[k].childSystemFlag.length; k++) {\r\n              if (list[i].systemFlag[k].childSystemFlag[l].valueTypeId == 10)\r\n                list[i].systemFlag[k].childSystemFlag[l].value = Array.isArray(list[i].systemFlag[k].value) ? list[i].systemFlag[k].childSystemFlag[l].value.join(\";\") : list[i].systemFlag[k].childSystemFlag[l].value;\r\n              nameList.push(list[i].systemFlag[k].childSystemFlag[l].name);\r\n              valueList.push(list[i].systemFlag[k].childSystemFlag[l].value);\r\n              autoRenderList.push(list[i].systemFlag[k].childSystemFlag[l].autoRender);\r\n              localStorage.setItem('DateFormat', valueList[0]);\r\n              if (list[i].systemFlag[k].childSystemFlag[l].name == 'isUserProfilePicApprove')\r\n                localStorage.setItem('isUserProfilePicApprove', list[i].systemFlag[k].childSystemFlag[l].value);\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n      if (list[i].group && list[i].group.length > 0) {\r\n        for (let j = 0; j < list[i].group.length; j++) {\r\n          if (\r\n            list[i].group[j].systemFlag &&\r\n            list[i].group[j].systemFlag.length > 0\r\n          ) {\r\n            for (let k = 0; k < list[i].group[j].systemFlag.length; k++) {\r\n              if (list[i].group[j].systemFlag[k].valueTypeId == 10)\r\n                list[i].group[j].systemFlag[k].value = Array.isArray(list[i].group[j].systemFlag[k].value) ? list[i].group[j].systemFlag[k].value.join(\";\") : list[i].group[j].systemFlag[k].value;\r\n\r\n              if (list[i].group[j].systemFlag[k].valueTypeId === 7) {\r\n                nameList.push(list[i].group[j].systemFlag[k].name);\r\n                // list[i].group[j].systemFlag[k].value = !list[i].group[j].systemFlag[k].value\r\n                valueList.push(list[i].group[j].systemFlag[k].value);\r\n                autoRenderList.push(list[i].group[j].systemFlag[k].autoRender)\r\n              } else {\r\n                nameList.push(list[i].group[j].systemFlag[k].name);\r\n                valueList.push(list[i].group[j].systemFlag[k].value);\r\n                autoRenderList.push(list[i].group[j].systemFlag[k].autoRender);\r\n              }\r\n              if (list[i].group[j].systemFlag[k].childSystemFlag && list[i].group[j].systemFlag[k].childSystemFlag.length > 0) {\r\n                for (let l = 0; l < list[i].group[j].systemFlag[k].childSystemFlag.length; l++) {\r\n                  if (list[i].group[j].systemFlag[k].childSystemFlag[l].valueTypeId == 10)\r\n                    list[i].group[j].systemFlag[k].childSystemFlag[l].value = Array.isArray(list[i].group[j].systemFlag[k].childSystemFlag[l].value) ? list[i].group[j].systemFlag[k].childSystemFlag[l].value.join(\";\") : list[i].group[j].systemFlag[k].childSystemFlag[l].value;\r\n\r\n                  if (list[i].group[j].systemFlag[k].childSystemFlag[l].valueTypeId === 7) {\r\n                    nameList.push(list[i].group[j].systemFlag[k].childSystemFlag[l].name);\r\n                    // list[i].group[j].systemFlag[k].value = !list[i].group[j].systemFlag[k].value\r\n                    valueList.push(list[i].group[j].systemFlag[k].childSystemFlag[l].value);\r\n                    autoRenderList.push(list[i].group[j].systemFlag[k].childSystemFlag[l].autoRender)\r\n                  } else {\r\n                    nameList.push(list[i].group[j].systemFlag[k].childSystemFlag[l].name);\r\n                    valueList.push(list[i].group[j].systemFlag[k].childSystemFlag[l].value);\r\n                    autoRenderList.push(list[i].group[j].systemFlag[k].childSystemFlag[l].autoRender);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    let obj = {\r\n      nameList: nameList,\r\n      valueList: valueList,\r\n      autoRenderList: autoRenderList\r\n    };\r\n    let res = await APIservice.httpPost(\r\n      '/api/admin/systemflags/updateSystemFlagByName',\r\n      obj,\r\n      token,\r\n      refreshToken\r\n    );\r\n    getData();\r\n    if (res && res.status == 200) {\r\n      toast.success('Update Successfully', {\r\n        autoClose: 6000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'colored',\r\n        position: toast.POSITION.TOP_RIGHT\r\n      });\r\n      getData();\r\n    } else if (res.status == 401) {\r\n      localStorage.clear();\r\n      navigate('/admin');\r\n    } else if (res.status == 400) {\r\n      toast.error(res.message, {\r\n        autoClose: 6000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'colored',\r\n        position: toast.POSITION.TOP_RIGHT\r\n      });\r\n    } else if (res.status == 500) {\r\n      toast.error(res.message, {\r\n        autoClose: 6000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'colored',\r\n        position: toast.POSITION.TOP_RIGHT\r\n      });\r\n    } else if (res.status == 300) {\r\n      toast.error(res.message, {\r\n        autoClose: 6000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'colored',\r\n        position: toast.POSITION.TOP_RIGHT\r\n      });\r\n    } else if (res.status == 404) {\r\n      toast.error(res.message, {\r\n        autoClose: 6000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'colored',\r\n        position: toast.POSITION.TOP_RIGHT\r\n      });\r\n    }\r\n    // }\r\n  };\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const onFileChange = (e: any, flagGroup: any, childGroup: any) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      //setImage(reader.result.toString());\r\n      let fGroups = JSON.parse(JSON.stringify(list));\r\n      if (flagGroup && flagGroup.id) {\r\n        let ind = fGroups.findIndex((c) => c.id == flagGroup.id);\r\n        if (ind >= 0) {\r\n          if (childGroup && childGroup.id) {\r\n            let cInd = fGroups[ind].group.findIndex((c) => c.id == childGroup.id);\r\n            if (cInd >= 0) {\r\n              let sInd = fGroups[ind].group[cInd].systemFlag.findIndex(\r\n                (c) => c.id == parseInt(e.target.name)\r\n              );\r\n              if (sInd >= 0) {\r\n                if (fGroups[ind].group[cInd].systemFlag[sInd].valueTypeId === 7) {\r\n                  fGroups[ind].group[cInd].systemFlag[sInd].value = !parseInt(fGroups[ind].group[cInd].systemFlag[sInd].value);\r\n                } else {\r\n                  fGroups[ind].group[cInd].systemFlag[sInd].value = reader.result.toString();\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            let sInd = fGroups[ind].systemFlag.findIndex(\r\n              (c) => c.id == parseInt(e.target.name)\r\n            );\r\n            if (sInd >= 0) {\r\n              fGroups[ind].systemFlag[sInd].value = reader.result.toString();\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setList(fGroups);\r\n\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer\r\n        style={{ top: '10%', left: '80%' }}\r\n        autoClose={6000}\r\n        hideProgressBar={true}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <Helmet>\r\n        <title>Setting</title>\r\n      </Helmet>\r\n      <PageTitleWrapper>\r\n        <Box py={1.9} pl={1}>\r\n          <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Grid item>\r\n              <Stack alignItems=\"left\" justifyContent=\"space-between\">\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                  <Link to=\"/admin\" style={{ display: 'flex', color: 'black' }}>\r\n                    <HomeIcon />\r\n                  </Link>\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    color=\"inherit\"\r\n                    fontWeight=\"bold\"\r\n                  >\r\n                    Setting\r\n                  </Typography>\r\n                </Breadcrumbs>\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </PageTitleWrapper>\r\n      <div>\r\n        <div>\r\n          <Container maxWidth=\"lg\">\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"stretch\"\r\n              spacing={3}\r\n            >\r\n              <Grid item xs={12}>\r\n                <Card style={{marginBottom: '10px'}}>\r\n                  <CardContent>\r\n                    <Box sx={{ width: '100%', typography: 'body1' }}>\r\n                      <TabContext value={value}>\r\n                        <Box\r\n                          sx={{\r\n                            borderBottom: 1,\r\n                            borderColor: 'divider',\r\n                            padding: '16px',\r\n                            paddingLeft: '0px',\r\n                            overflowX: 'auto'\r\n                          }}\r\n                        >\r\n                          <TabList\r\n                            onChange={handleChange}\r\n                            variant=\"scrollable\"\r\n                            aria-label=\"lab API tabs example\"\r\n                          >\r\n                            {list.map((resp: any, index: number) => (\r\n                              <Tab\r\n                                key={index}\r\n                                label={resp.flagGroupName}\r\n                                value={index + ''}\r\n                              />\r\n                            ))}\r\n                          </TabList>\r\n                        </Box>\r\n                        <div>\r\n                          {isLoading ? (\r\n                            <Loader1 title=\"Loading...\" />\r\n                          ) : (\r\n                            <>\r\n                              <TableContainer>\r\n                                {list.map((resp: any, index: number) => (\r\n                                  <TabPanel\r\n                                    key={index + ''}\r\n                                    value={index + ''}\r\n                                    className=\"p-0\"\r\n                                  >\r\n                                    <div className=\"mt-3\">\r\n                                      {resp.systemFlag.map(\r\n                                        (sysflag: any, sIndex: number) => (\r\n                                          <div\r\n                                            className=\"mb-3\"\r\n                                            key={sysflag.id}\r\n                                          >\r\n                                            {sysflag.autoRender == 1 && <>\r\n                                              <label className=\"form-label text-capitalize\">\r\n                                                {sysflag.displayName}\r\n                                              </label>\r\n                                              {sysflag.description && (\r\n                                                <Tooltip\r\n                                                  title={sysflag.description}\r\n                                                  arrow\r\n                                                >\r\n                                                  <InfoIcon sx={{ 'font-size': '16px!important' }} style={{ marginRight: '5px', marginLeft: '5px' }} />\r\n                                                </Tooltip>\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 1 && (\r\n                                                <>\r\n                                                  <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    required\r\n                                                    name={sysflag.id + \"\"}\r\n                                                    onChange={(e) => handleflagChange(e, resp, null, null)}\r\n                                                    value={sysflag.value}\r\n                                                  />\r\n\r\n                                                </>\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 2 && (\r\n                                                <input\r\n                                                  type=\"number\"\r\n                                                  className=\"form-control\"\r\n                                                  required\r\n                                                  name={sysflag.id + \"\"}\r\n                                                  onChange={(e) => handleflagChange(e, resp, null, null)}\r\n                                                  value={sysflag.value}\r\n                                                />\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 3 && (\r\n                                                <Form.Select\r\n                                                  name={sysflag.id + \"\"}\r\n                                                  value={sysflag.value}\r\n                                                  onChange={(e: any) => handleflagChange(e, resp, null, null)}\r\n                                                >\r\n                                                  {sysflag.valueList\r\n                                                    .split(';')\r\n                                                    .map((arr: any) => (\r\n                                                      <option\r\n                                                        key={arr}\r\n                                                        value={arr}\r\n                                                      >\r\n                                                        {arr}\r\n                                                      </option>\r\n                                                    ))}\r\n                                                </Form.Select>\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 4 && (\r\n                                                <ReactQuill\r\n                                                  theme=\"snow\"\r\n                                                  value={sysflag.value}\r\n                                                  onChange={(e) => { handleEditorChange(e, sysflag.id, resp, null, null) }}\r\n                                                  modules={modules}\r\n                                                />\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 5 && (\r\n                                                <input\r\n                                                  type=\"text\"\r\n                                                  className=\"form-control\"\r\n                                                  required\r\n                                                  name={sysflag.id + \"\"}\r\n                                                  onChange={(e) => handleflagChange(e, resp, null, null)}\r\n                                                  disabled={true}\r\n                                                  value={sysflag.value}\r\n                                                />\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 6 && (\r\n                                                <input\r\n                                                  type=\"email\"\r\n                                                  className=\"form-control\"\r\n                                                  required\r\n                                                  name={sysflag.id + \"\"}\r\n                                                  onChange={(e) => handleflagChange(e, resp, null, null)}\r\n                                                  value={sysflag.value}\r\n                                                />\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 7 && (\r\n                                                <>\r\n                                                  <Tooltip\r\n                                                    title={(sysflag.value === '0' || !sysflag.value) ? 'Inactive' : 'Active'}\r\n                                                    arrow\r\n                                                  >\r\n                                                    <>\r\n                                                      <Switch\r\n                                                        sx={{\r\n                                                          '& .MuiSwitch-switchBase': {\r\n                                                            '& .MuiSwitch-input': {\r\n                                                              left: '0px',\r\n                                                            },\r\n                                                          },\r\n                                                        }}\r\n                                                        name={sysflag.id + \"\"}\r\n                                                        value={sysflag.value}\r\n                                                        checked={(sysflag.value === '1' || (sysflag.value ? (sysflag.value === '0' ? false : true) : false))}\r\n                                                        onChange={(e: any) => handleflagChange(e, resp, null, null)}\r\n                                                        inputProps={{\r\n                                                          'aria-label':\r\n                                                            'controlled'\r\n                                                        }}\r\n                                                      />\r\n                                                      {sysflag.id == 41 ?\r\n                                                        <span>(\r\n                                                          <span style={{ fontSize: '11px', color: \"#ff0000\" }}> If the wallet feature is enabled, you can activate 'Reward and Earn' functionality. If the wallet is disabled, the 'Refer and Earn' feature will automatically be disabled as well.</span>\r\n                                                          )\r\n                                                        </span>\r\n                                                        : \"\"}\r\n                                                    </>\r\n                                                  </Tooltip>\r\n                                                </>\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 8 && (\r\n                                                <InputGroup>\r\n                                                  <Form.Control\r\n                                                    type={\r\n                                                      showPassword === true\r\n                                                        ? 'text'\r\n                                                        : 'password'\r\n                                                    }\r\n                                                    className=\"form-control\"\r\n                                                    required\r\n                                                    name={sysflag.id + \"\"}\r\n                                                    onChange={(e: ChangeEvent<HTMLInputElement>) => handleflagChange(e, resp, null, null)}\r\n                                                    value={sysflag.value}\r\n                                                  />\r\n                                                  <InputGroup.Text\r\n                                                    onClick={() =>\r\n                                                      setShowPassword(\r\n                                                        !showPassword\r\n                                                      )\r\n                                                    }\r\n                                                  >\r\n                                                    {showPassword === true ? (\r\n                                                      <VisibilityIcon />\r\n                                                    ) : (\r\n                                                      <VisibilityOffIcon />\r\n                                                    )}\r\n                                                  </InputGroup.Text>\r\n                                                </InputGroup>\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 9 && (\r\n                                                <FormGroup\r\n                                                  style={{\r\n                                                    alignItems: 'center',\r\n                                                    marginBottom: '10px'\r\n                                                  }}\r\n                                                >\r\n                                                  <input\r\n                                                    style={{\r\n                                                      display: 'none'\r\n                                                    }}\r\n                                                    id=\"icon-button-file\"\r\n                                                    type=\"file\"\r\n                                                    accept=\"image/*\"\r\n                                                    name={sysflag.id + \"\"}\r\n                                                    // value = {userValue.image}\r\n                                                    onChange={(e) => { onFileChange(e, resp, null); handleflagChange(e, resp, null, null) }}\r\n                                                    className=\"upload-button\"\r\n                                                  />\r\n                                                  <label htmlFor=\"icon-button-file\">\r\n                                                    {sysflag.value ? (\r\n                                                      <img\r\n                                                        src={sysflag.value}\r\n                                                        alt=\"notification Url\"\r\n                                                        style={{\r\n                                                          height: '130px',\r\n                                                          width: 'auto'\r\n                                                          // borderRadius: '50%',\r\n                                                        }}\r\n                                                      />\r\n                                                    ) : (\r\n                                                      <img\r\n                                                        src=\"/dummy.png\"\r\n                                                        alt=\"notification Url\"\r\n                                                        style={{\r\n                                                          height: '130px',\r\n                                                          width: 'auto'\r\n                                                          // borderRadius: '50%',\r\n                                                        }}\r\n                                                      />\r\n                                                    )}\r\n                                                  </label>\r\n                                                </FormGroup>\r\n                                              )}\r\n                                              {sysflag.valueTypeId == 10 && (\r\n                                                <>\r\n                                                  <FormControl\r\n                                                    sx={{ width: { lg: '100%' } }}\r\n                                                  >\r\n                                                    <Select\r\n                                                      name={sysflag.id + \"\"}\r\n                                                      id={sysflag.id + \"\"}\r\n                                                      multiple\r\n                                                      value={sysflag.value}\r\n                                                      onChange={(e: any) => handleflagChange(e, resp, null, null)}\r\n                                                      renderValue={(selected) => selected.join(', ')}\r\n                                                      MenuProps={MenuProps}\r\n                                                    >\r\n                                                      {sysflag.valueList.split(';').map((name) => (\r\n                                                        <MenuItem key={name} value={name}>\r\n                                                          <Checkbox checked={sysflag.value.indexOf(name) > -1} />\r\n                                                          <ListItemText primary={name} />\r\n                                                        </MenuItem>\r\n                                                      ))}\r\n                                                    </Select></FormControl>\r\n                                                  {/* // <Form.Select\r\n                                              //   name={sysflag.id + \"\"}\r\n                                              //   value={sysflag.value}\r\n                                              //   onChange={(e: any) =>\r\n                                              //     handleflagChange(\r\n                                              //       e,\r\n                                              //       resp,\r\n                                              //       null\r\n                                              //     )\r\n                                              //   }\r\n                                              // >\r\n                                              //   {sysflag.valueList\r\n                                              //     .split(';')\r\n                                              //     .map((arr: any) => (\r\n                                              //       <option\r\n                                              //         key={arr}\r\n                                              //         value={arr}\r\n                                              //       >\r\n                                              //         {arr}\r\n                                              //       </option>\r\n                                              //     ))}\r\n                                              // </Form.Select> */}\r\n                                                </>\r\n                                              )}\r\n                                            </>}\r\n\r\n                                            <div className=\"mt-3\">\r\n                                              {sysflag.childSystemFlag && sysflag.childSystemFlag.map(\r\n                                                (childsysflag: any, sIndex: number) => (\r\n                                                  <div\r\n                                                    className=\"mb-3\"\r\n                                                    key={childsysflag.id}\r\n                                                    style={{ paddingLeft: '20px' }}\r\n                                                  >\r\n                                                    {childsysflag.autoRender == 1 && <>\r\n                                                      <label className=\"form-label text-capitalize\">\r\n                                                        {childsysflag.displayName}\r\n                                                      </label>\r\n                                                      {childsysflag.description && (\r\n                                                        <Tooltip\r\n                                                          title={childsysflag.description}\r\n                                                          arrow\r\n                                                        >\r\n                                                          <InfoIcon sx={{ 'font-size': '16px!important' }} style={{ marginRight: '5px', marginLeft: '5px' }} />\r\n                                                        </Tooltip>\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 1 && (\r\n                                                        <>\r\n                                                          <input\r\n                                                            type=\"text\"\r\n                                                            className=\"form-control\"\r\n                                                            required\r\n                                                            name={childsysflag.id + \"\"}\r\n                                                            onChange={(e) => handleflagChange(e, resp, null, sysflag)}\r\n                                                            value={childsysflag.value}\r\n                                                          />\r\n\r\n                                                        </>\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 2 && (\r\n                                                        <input\r\n                                                          type=\"number\"\r\n                                                          className=\"form-control\"\r\n                                                          required\r\n                                                          name={childsysflag.id + \"\"}\r\n                                                          onChange={(e) => handleflagChange(e, resp, null, sysflag)}\r\n                                                          value={childsysflag.value}\r\n                                                        />\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 3 && (\r\n                                                        <Form.Select\r\n                                                          name={childsysflag.id + \"\"}\r\n                                                          value={childsysflag.value}\r\n                                                          onChange={(e: any) => handleflagChange(e, resp, null, sysflag)}\r\n                                                        >\r\n                                                          {childsysflag.valueList\r\n                                                            .split(';')\r\n                                                            .map((arr: any) => (\r\n                                                              <option\r\n                                                                key={arr}\r\n                                                                value={arr}\r\n                                                              >\r\n                                                                {arr}\r\n                                                              </option>\r\n                                                            ))}\r\n                                                        </Form.Select>\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 4 && (\r\n                                                        <ReactQuill\r\n                                                          theme=\"snow\"\r\n                                                          value={childsysflag.value}\r\n                                                          onChange={(e) => { handleEditorChange(e, childsysflag.id, resp, null, sysflag) }}\r\n                                                          modules={modules}\r\n                                                        />\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 5 && (\r\n                                                        <input\r\n                                                          type=\"text\"\r\n                                                          className=\"form-control\"\r\n                                                          required\r\n                                                          name={childsysflag.id + \"\"}\r\n                                                          onChange={(e) => handleflagChange(e, resp, null, sysflag)}\r\n                                                          disabled={true}\r\n                                                          value={childsysflag.value}\r\n                                                        />\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 6 && (\r\n                                                        <input\r\n                                                          type=\"email\"\r\n                                                          className=\"form-control\"\r\n                                                          required\r\n                                                          name={childsysflag.id + \"\"}\r\n                                                          onChange={(e) => handleflagChange(e, resp, null, sysflag)}\r\n                                                          value={childsysflag.value}\r\n                                                        />\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 7 && (\r\n                                                        <>\r\n                                                          <Tooltip\r\n                                                            title={(childsysflag.value === '0' || !childsysflag.value) ? 'Inactive' : 'Active'}\r\n                                                            arrow\r\n                                                          >\r\n                                                            <>\r\n                                                              <Switch\r\n                                                                sx={{\r\n                                                                  '& .MuiSwitch-switchBase': {\r\n                                                                    '& .MuiSwitch-input': {\r\n                                                                      left: '0px',\r\n                                                                    },\r\n                                                                  },\r\n                                                                }}\r\n                                                                name={childsysflag.id + \"\"}\r\n                                                                value={childsysflag.value}\r\n                                                                checked={(childsysflag.value === '1' || (childsysflag.value ? (childsysflag.value === '0' ? false : true) : false))}\r\n                                                                onChange={(e: any) => handleflagChange(e, resp, null, sysflag)}\r\n                                                                inputProps={{\r\n                                                                  'aria-label':\r\n                                                                    'controlled'\r\n                                                                }}\r\n                                                              />\r\n                                                              {childsysflag.id == 41 ?\r\n                                                                <span>(\r\n                                                                  <span style={{ fontSize: '11px', color: \"#ff0000\" }}> If the wallet feature is enabled, you can activate 'Reward and Earn' functionality. If the wallet is disabled, the 'Refer and Earn' feature will automatically be disabled as well.</span>\r\n                                                                  )\r\n                                                                </span>\r\n                                                                : \"\"}\r\n                                                            </>\r\n                                                          </Tooltip>\r\n                                                        </>\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 8 && (\r\n                                                        <InputGroup>\r\n                                                          <Form.Control\r\n                                                            type={\r\n                                                              showPassword === true\r\n                                                                ? 'text'\r\n                                                                : 'password'\r\n                                                            }\r\n                                                            className=\"form-control\"\r\n                                                            required\r\n                                                            name={childsysflag.id + \"\"}\r\n                                                            onChange={(e: ChangeEvent<HTMLInputElement>) => handleflagChange(e, resp, null, sysflag)}\r\n                                                            value={childsysflag.value}\r\n                                                          />\r\n                                                          <InputGroup.Text\r\n                                                            onClick={() =>\r\n                                                              setShowPassword(\r\n                                                                !showPassword\r\n                                                              )\r\n                                                            }\r\n                                                          >\r\n                                                            {showPassword === true ? (\r\n                                                              <VisibilityIcon />\r\n                                                            ) : (\r\n                                                              <VisibilityOffIcon />\r\n                                                            )}\r\n                                                          </InputGroup.Text>\r\n                                                        </InputGroup>\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 9 && (\r\n                                                        <FormGroup\r\n                                                          style={{\r\n                                                            alignItems: 'center',\r\n                                                            marginBottom: '10px'\r\n                                                          }}\r\n                                                        >\r\n                                                          <input\r\n                                                            style={{\r\n                                                              display: 'none'\r\n                                                            }}\r\n                                                            id=\"icon-button-file\"\r\n                                                            type=\"file\"\r\n                                                            accept=\"image/*\"\r\n                                                            name={childsysflag.id + \"\"}\r\n                                                            // value = {userValue.image}\r\n                                                            onChange={(e) => { onFileChange(e, resp, null); handleflagChange(e, resp, null, sysflag) }}\r\n                                                            className=\"upload-button\"\r\n                                                          />\r\n                                                          <label htmlFor=\"icon-button-file\">\r\n                                                            {childsysflag.value ? (\r\n                                                              <img\r\n                                                                src={childsysflag.value}\r\n                                                                alt=\"notification Url\"\r\n                                                                style={{\r\n                                                                  height: '130px',\r\n                                                                  width: 'auto'\r\n                                                                  // borderRadius: '50%',\r\n                                                                }}\r\n                                                              />\r\n                                                            ) : (\r\n                                                              <img\r\n                                                                src=\"/dummy.png\"\r\n                                                                alt=\"notification Url\"\r\n                                                                style={{\r\n                                                                  height: '130px',\r\n                                                                  width: 'auto'\r\n                                                                  // borderRadius: '50%',\r\n                                                                }}\r\n                                                              />\r\n                                                            )}\r\n                                                          </label>\r\n                                                        </FormGroup>\r\n                                                      )}\r\n                                                      {childsysflag.valueTypeId == 10 && (\r\n                                                        <>\r\n                                                          <FormControl\r\n                                                            sx={{ width: { lg: '100%' } }}\r\n                                                          >\r\n                                                            <Select\r\n                                                              name={childsysflag.id + \"\"}\r\n                                                              id={childsysflag.id + \"\"}\r\n                                                              multiple\r\n                                                              value={childsysflag.value}\r\n                                                              onChange={(e: any) => handleflagChange(e, resp, null, sysflag)}\r\n                                                              renderValue={(selected) => selected.join(', ')}\r\n                                                              MenuProps={MenuProps}\r\n                                                            >\r\n                                                              {childsysflag.valueList.split(';').map((name) => (\r\n                                                                <MenuItem key={name} value={name}>\r\n                                                                  <Checkbox checked={childsysflag.value.indexOf(name) > -1} />\r\n                                                                  <ListItemText primary={name} />\r\n                                                                </MenuItem>\r\n                                                              ))}\r\n                                                            </Select></FormControl>\r\n\r\n                                                        </>\r\n                                                      )}\r\n                                                    </>}\r\n                                                  </div>\r\n                                                )\r\n                                              )}\r\n                                            </div>\r\n                                          </div>\r\n                                        )\r\n                                      )}\r\n                                    </div>\r\n                                    {\r\n                                      resp.group &&\r\n                                      resp.group.length > 0 &&\r\n                                      resp.group.map(\r\n                                        (group: any, gIndex: number) =>\r\n                                          group.systemFlag.length > 0 && (\r\n                                            <div key={group.id}>\r\n                                              <div className=\"mt-3\">\r\n                                                <label className=\"form-label text-capitalize\">\r\n                                                  <b>{group.flagGroupName}</b>\r\n                                                </label>\r\n                                                {group.detail && (\r\n                                                  <Tooltip\r\n                                                    title={group.detail}\r\n                                                    arrow\r\n                                                  >\r\n                                                    <InfoIcon sx={{ 'font-size': '16px!important' }} style={{ marginRight: '5px', marginLeft: '5px' }} />\r\n                                                  </Tooltip>\r\n                                                )}\r\n                                              </div>\r\n                                              <div\r\n                                                style={{\r\n                                                  border: '1px solid #ddd',\r\n                                                  padding: '15px',\r\n                                                  borderRadius: '5px'\r\n                                                }}\r\n                                              >\r\n                                                {group.systemFlag.map(\r\n                                                  (\r\n                                                    sysflag: any,\r\n                                                    sIndex: number\r\n                                                  ) => (\r\n                                                    <div\r\n                                                      className=\"mb-3\"\r\n                                                      key={sysflag.id}\r\n                                                    >\r\n                                                      {sysflag.autoRender == 1 && <>\r\n                                                        <label className=\"form-label text-capitalize\">\r\n                                                          {sysflag.displayName}\r\n                                                        </label>\r\n                                                        {sysflag.description && (\r\n                                                          <Tooltip\r\n                                                            title={sysflag.description}\r\n                                                            arrow\r\n                                                          >\r\n                                                            <InfoIcon sx={{ 'font-size': '16px!important' }} style={{ marginRight: '5px', marginLeft: '5px' }} />\r\n                                                          </Tooltip>\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 1 && (\r\n                                                          <input\r\n                                                            type=\"text\"\r\n                                                            className=\"form-control\"\r\n                                                            required\r\n                                                            name={sysflag.id + \"\"}\r\n                                                            onChange={(e) => handleflagChange(e, resp, group, null)}\r\n                                                            value={sysflag.value}\r\n                                                          />\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 2 && (\r\n                                                          <input\r\n                                                            type=\"number\"\r\n                                                            className=\"form-control\"\r\n                                                            required\r\n                                                            name={sysflag.id + \"\"}\r\n                                                            onChange={(e) => handleflagChange(e, resp, group, null)}\r\n                                                            value={sysflag.value}\r\n                                                          />\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 3 && (\r\n                                                          <Form.Select\r\n                                                            name={sysflag.id + \"\"}\r\n                                                            value={sysflag.value}\r\n                                                            onChange={(e: any) => handleflagChange(e, resp, group, null)}\r\n                                                          >\r\n                                                            {sysflag.valueList\r\n                                                              .split(';')\r\n                                                              .map((arr: any) => (\r\n                                                                <option\r\n                                                                  key={arr}\r\n                                                                  value={arr}\r\n                                                                >\r\n                                                                  {arr}\r\n                                                                </option>\r\n                                                              ))}\r\n                                                          </Form.Select>\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 4 && (\r\n                                                          <ReactQuill\r\n                                                            theme=\"snow\"\r\n                                                            value={sysflag.value}\r\n                                                            onChange={(e) => { handleEditorChange(e, sysflag.id, resp, group, null) }}\r\n                                                            modules={modules}\r\n                                                          />\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 5 && (\r\n                                                          <input\r\n                                                            type=\"text\"\r\n                                                            className=\"form-control\"\r\n                                                            required\r\n                                                            name={sysflag.id + \"\"}\r\n                                                            onChange={(e) => handleflagChange(e, resp, group, null)}\r\n                                                            value={sysflag.value}\r\n                                                            disabled\r\n                                                          />\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 6 && (\r\n                                                          <input\r\n                                                            type=\"email\"\r\n                                                            className=\"form-control\"\r\n                                                            required\r\n                                                            name={sysflag.id + \"\"}\r\n                                                            onChange={(e) => handleflagChange(e, resp, group, null)}\r\n                                                            value={sysflag.value}\r\n                                                          />\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 7 && (\r\n                                                          <>\r\n                                                            {/* {sysflag.value === '1' ? ( */}\r\n                                                            <Tooltip\r\n                                                              title={(sysflag.value === '0' || !sysflag.value) ? 'Inactive' : 'Active'}\r\n                                                              arrow\r\n                                                            >\r\n                                                              <Switch\r\n                                                                name={sysflag.id + \"\"}\r\n                                                                value={sysflag.value}\r\n                                                                checked={(sysflag.value === '1' || (sysflag.value ? (sysflag.value === '0' ? false : true) : false))}\r\n                                                                onChange={(e: any) => handleflagChange(e, resp, group, null)}\r\n                                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                                              />\r\n                                                            </Tooltip>\r\n                                                            {/* ) : (\r\n                                                            <Tooltip\r\n                                                              title={sysflag.value === '0' ? 'Inactive' : 'Active'}\r\n                                                              arrow\r\n                                                            >\r\n                                                              <Switch\r\n                                                                name={sysflag.id + \"\"}\r\n                                                                value={sysflag.value}\r\n                                                                // checked={sysflag.value}\r\n                                                                onChange={(e: any) => handleflagChange(e, resp, group)}\r\n                                                                inputProps={{\r\n                                                                  'aria-label': 'controlled'\r\n                                                                }}\r\n                                                              />\r\n                                                            </Tooltip>\r\n                                                          )} */}\r\n                                                          </>\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 8 && (\r\n                                                          <>\r\n                                                            <InputGroup>\r\n                                                              <Form.Control\r\n                                                                type={showPassword === true ? 'text' : 'password'}\r\n                                                                className=\"form-control\"\r\n                                                                required\r\n                                                                name={sysflag.id + \"\"}\r\n                                                                onChange={(e: ChangeEvent<HTMLInputElement>) => handleflagChange(e, resp, group, null)}\r\n                                                                value={sysflag.value}\r\n                                                              />\r\n                                                              <InputGroup.Text\r\n                                                                onClick={() => setShowPassword(!showPassword)}\r\n                                                              >\r\n                                                                {showPassword === true ? (<VisibilityIcon />) : (<VisibilityOffIcon />)}\r\n                                                              </InputGroup.Text>\r\n                                                            </InputGroup>\r\n                                                          </>\r\n                                                        )}\r\n\r\n                                                        {sysflag.valueTypeId == 9 && (\r\n                                                          <FormGroup\r\n                                                            style={{\r\n                                                              alignItems: 'center',\r\n                                                              marginBottom: '10px'\r\n                                                            }}\r\n                                                          >\r\n                                                            <input\r\n                                                              style={{ display: 'none' }}\r\n                                                              id=\"icon-button-file\"\r\n                                                              type=\"file\"\r\n                                                              accept=\"image/*\"\r\n                                                              name={sysflag.id + \"\"}\r\n                                                              // value = {userValue.image}\r\n                                                              onChange={(e) => { onFileChange(e, resp, group); handleflagChange(e, resp, group, null) }}\r\n                                                              className=\"upload-button\"\r\n                                                            />\r\n                                                            <label htmlFor=\"icon-button-file\">\r\n                                                              {sysflag.value ? (\r\n                                                                <img\r\n                                                                  src={sysflag.value}\r\n                                                                  alt=\"notification Url\"\r\n                                                                  style={{ height: '130px', width: 'auto' }}\r\n                                                                />\r\n                                                              ) : (\r\n                                                                <img\r\n                                                                  src=\"/dummy.png\"\r\n                                                                  alt=\"notification Url\"\r\n                                                                  style={{ height: '130px', width: 'auto' }}\r\n                                                                />\r\n                                                              )}\r\n                                                            </label>\r\n                                                          </FormGroup>\r\n                                                        )}\r\n                                                        {sysflag.valueTypeId == 10 && (\r\n                                                          <>\r\n                                                            <FormControl\r\n                                                              sx={{ width: { lg: '100%' } }}\r\n                                                            >\r\n                                                              <Select\r\n                                                                id={sysflag.id + \"\"}\r\n                                                                name={sysflag.id + \"\"}\r\n                                                                multiple\r\n                                                                value={sysflag.value}\r\n                                                                onChange={(e: any) => handleflagChange(e, resp, group, null)}\r\n                                                                renderValue={(selected) => selected.join(', ')}\r\n                                                                MenuProps={MenuProps}\r\n                                                              >\r\n                                                                {sysflag.valueList.split(';').map((name) => (\r\n                                                                  <MenuItem key={name} value={name}>\r\n                                                                    <Checkbox checked={sysflag.value.indexOf(name) > -1} />\r\n                                                                    <ListItemText primary={name} />\r\n                                                                  </MenuItem>\r\n                                                                ))}\r\n                                                              </Select>\r\n                                                            </FormControl>\r\n                                                            {/* <Form.Select\r\n                                                            name={sysflag.id + \"\"}\r\n                                                            value={sysflag.value}\r\n                                                            onChange={(e: any) =>\r\n                                                              handleflagChange(\r\n                                                                e,\r\n                                                                resp,\r\n                                                                group\r\n                                                              )\r\n                                                            }\r\n                                                          >\r\n                                                            {sysflag.valueList\r\n                                                              .split(';')\r\n                                                              .map((arr: any) => (\r\n                                                                <option\r\n                                                                  key={arr}\r\n                                                                  value={arr}\r\n                                                                >\r\n                                                                  {arr}\r\n                                                                </option>\r\n                                                              ))}\r\n                                                          </Form.Select> */}\r\n                                                          </>\r\n                                                        )}\r\n                                                      </>}\r\n\r\n                                                      <div className=\"mt-3\">\r\n                                                        {sysflag.childSystemFlag && sysflag.childSystemFlag.map(\r\n                                                          (childsysflag: any, sIndex: number) => (\r\n                                                            <div\r\n                                                              className=\"mb-3\"\r\n                                                              key={childsysflag.id}\r\n                                                              style={{ paddingLeft: '20px' }}\r\n                                                            >\r\n                                                              {childsysflag.autoRender == 1 && <>\r\n                                                                <label className=\"form-label text-capitalize\">\r\n                                                                  {childsysflag.displayName}\r\n                                                                </label>\r\n                                                                {childsysflag.description && (\r\n                                                                  <Tooltip\r\n                                                                    title={childsysflag.description}\r\n                                                                    arrow\r\n                                                                  >\r\n                                                                    <InfoIcon sx={{ 'font-size': '16px!important' }} style={{ marginRight: '5px', marginLeft: '5px' }} />\r\n                                                                  </Tooltip>\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 1 && (\r\n                                                                  <>\r\n                                                                    <input\r\n                                                                      type=\"text\"\r\n                                                                      className=\"form-control\"\r\n                                                                      required\r\n                                                                      name={childsysflag.id + \"\"}\r\n                                                                      onChange={(e) => handleflagChange(e, resp, group, sysflag)}\r\n                                                                      value={childsysflag.value}\r\n                                                                    />\r\n\r\n                                                                  </>\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 2 && (\r\n                                                                  <input\r\n                                                                    type=\"number\"\r\n                                                                    className=\"form-control\"\r\n                                                                    required\r\n                                                                    name={childsysflag.id + \"\"}\r\n                                                                    onChange={(e) => handleflagChange(e, resp, group, sysflag)}\r\n                                                                    value={childsysflag.value}\r\n                                                                  />\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 3 && (\r\n                                                                  <Form.Select\r\n                                                                    name={childsysflag.id + \"\"}\r\n                                                                    value={childsysflag.value}\r\n                                                                    onChange={(e: any) => handleflagChange(e, resp, group, sysflag)}\r\n                                                                  >\r\n                                                                    {childsysflag.valueList\r\n                                                                      .split(';')\r\n                                                                      .map((arr: any) => (\r\n                                                                        <option\r\n                                                                          key={arr}\r\n                                                                          value={arr}\r\n                                                                        >\r\n                                                                          {arr}\r\n                                                                        </option>\r\n                                                                      ))}\r\n                                                                  </Form.Select>\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 4 && (\r\n                                                                  <ReactQuill\r\n                                                                    theme=\"snow\"\r\n                                                                    value={childsysflag.value}\r\n                                                                    onChange={(e) => { handleEditorChange(e, childsysflag.id, resp, group, sysflag) }}\r\n                                                                    modules={modules}\r\n                                                                  />\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 5 && (\r\n                                                                  <input\r\n                                                                    type=\"text\"\r\n                                                                    className=\"form-control\"\r\n                                                                    required\r\n                                                                    name={childsysflag.id + \"\"}\r\n                                                                    onChange={(e) => handleflagChange(e, resp, group, sysflag)}\r\n                                                                    disabled={true}\r\n                                                                    value={childsysflag.value}\r\n                                                                  />\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 6 && (\r\n                                                                  <input\r\n                                                                    type=\"email\"\r\n                                                                    className=\"form-control\"\r\n                                                                    required\r\n                                                                    name={childsysflag.id + \"\"}\r\n                                                                    onChange={(e) => handleflagChange(e, resp, group, sysflag)}\r\n                                                                    value={childsysflag.value}\r\n                                                                  />\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 7 && (\r\n                                                                  <>\r\n                                                                    <Tooltip\r\n                                                                      title={(childsysflag.value === '0' || !childsysflag.value) ? 'Inactive' : 'Active'}\r\n                                                                      arrow\r\n                                                                    >\r\n                                                                      <>\r\n                                                                        <Switch\r\n                                                                          sx={{\r\n                                                                            '& .MuiSwitch-switchBase': {\r\n                                                                              '& .MuiSwitch-input': {\r\n                                                                                left: '0px',\r\n                                                                              },\r\n                                                                            },\r\n                                                                          }}\r\n                                                                          name={childsysflag.id + \"\"}\r\n                                                                          value={childsysflag.value}\r\n                                                                          checked={(childsysflag.value === '1' || (childsysflag.value ? (childsysflag.value === '0' ? false : true) : false))}\r\n                                                                          onChange={(e: any) => handleflagChange(e, resp, group, sysflag)}\r\n                                                                          inputProps={{\r\n                                                                            'aria-label':\r\n                                                                              'controlled'\r\n                                                                          }}\r\n                                                                        />\r\n                                                                        {childsysflag.id == 41 ?\r\n                                                                          <span>(\r\n                                                                            <span style={{ fontSize: '11px', color: \"#ff0000\" }}> If the wallet feature is enabled, you can activate 'Reward and Earn' functionality. If the wallet is disabled, the 'Refer and Earn' feature will automatically be disabled as well.</span>\r\n                                                                            )\r\n                                                                          </span>\r\n                                                                          : \"\"}\r\n                                                                      </>\r\n                                                                    </Tooltip>\r\n                                                                  </>\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 8 && (\r\n                                                                  <InputGroup>\r\n                                                                    <Form.Control\r\n                                                                      type={\r\n                                                                        showPassword === true\r\n                                                                          ? 'text'\r\n                                                                          : 'password'\r\n                                                                      }\r\n                                                                      className=\"form-control\"\r\n                                                                      required\r\n                                                                      name={childsysflag.id + \"\"}\r\n                                                                      onChange={(e: ChangeEvent<HTMLInputElement>) => handleflagChange(e, resp, group, sysflag)}\r\n                                                                      value={childsysflag.value}\r\n                                                                    />\r\n                                                                    <InputGroup.Text\r\n                                                                      onClick={() =>\r\n                                                                        setShowPassword(\r\n                                                                          !showPassword\r\n                                                                        )\r\n                                                                      }\r\n                                                                    >\r\n                                                                      {showPassword === true ? (\r\n                                                                        <VisibilityIcon />\r\n                                                                      ) : (\r\n                                                                        <VisibilityOffIcon />\r\n                                                                      )}\r\n                                                                    </InputGroup.Text>\r\n                                                                  </InputGroup>\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 9 && (\r\n                                                                  <FormGroup\r\n                                                                    style={{\r\n                                                                      alignItems: 'center',\r\n                                                                      marginBottom: '10px'\r\n                                                                    }}\r\n                                                                  >\r\n                                                                    <input\r\n                                                                      style={{\r\n                                                                        display: 'none'\r\n                                                                      }}\r\n                                                                      id=\"icon-button-file\"\r\n                                                                      type=\"file\"\r\n                                                                      accept=\"image/*\"\r\n                                                                      name={childsysflag.id + \"\"}\r\n                                                                      // value = {userValue.image}\r\n                                                                      onChange={(e) => { onFileChange(e, resp, null); handleflagChange(e, resp, group, sysflag) }}\r\n                                                                      className=\"upload-button\"\r\n                                                                    />\r\n                                                                    <label htmlFor=\"icon-button-file\">\r\n                                                                      {childsysflag.value ? (\r\n                                                                        <img\r\n                                                                          src={childsysflag.value}\r\n                                                                          alt=\"notification Url\"\r\n                                                                          style={{\r\n                                                                            height: '130px',\r\n                                                                            width: 'auto'\r\n                                                                            // borderRadius: '50%',\r\n                                                                          }}\r\n                                                                        />\r\n                                                                      ) : (\r\n                                                                        <img\r\n                                                                          src=\"/dummy.png\"\r\n                                                                          alt=\"notification Url\"\r\n                                                                          style={{\r\n                                                                            height: '130px',\r\n                                                                            width: 'auto'\r\n                                                                            // borderRadius: '50%',\r\n                                                                          }}\r\n                                                                        />\r\n                                                                      )}\r\n                                                                    </label>\r\n                                                                  </FormGroup>\r\n                                                                )}\r\n                                                                {childsysflag.valueTypeId == 10 && (\r\n                                                                  <>\r\n                                                                    <FormControl\r\n                                                                      sx={{ width: { lg: '100%' } }}\r\n                                                                    >\r\n                                                                      <Select\r\n                                                                        name={childsysflag.id + \"\"}\r\n                                                                        id={childsysflag.id + \"\"}\r\n                                                                        multiple\r\n                                                                        value={childsysflag.value}\r\n                                                                        onChange={(e: any) => handleflagChange(e, resp, group, sysflag)}\r\n                                                                        renderValue={(selected) => selected.join(', ')}\r\n                                                                        MenuProps={MenuProps}\r\n                                                                      >\r\n                                                                        {childsysflag.valueList.split(';').map((name) => (\r\n                                                                          <MenuItem key={name} value={name}>\r\n                                                                            <Checkbox checked={childsysflag.value.indexOf(name) > -1} />\r\n                                                                            <ListItemText primary={name} />\r\n                                                                          </MenuItem>\r\n                                                                        ))}\r\n                                                                      </Select></FormControl>\r\n\r\n                                                                  </>\r\n                                                                )}\r\n                                                              </>}\r\n                                                            </div>\r\n                                                          )\r\n                                                        )}\r\n                                                      </div>\r\n                                                    </div>\r\n                                                  )\r\n                                                )}\r\n                                              </div>\r\n                                            </div>\r\n                                          )\r\n                                      )\r\n                                    }\r\n                                  </TabPanel>\r\n                                ))}\r\n                              </TableContainer>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </TabContext>\r\n                    </Box>\r\n                    {isEditPermission ?\r\n                      <Button\r\n                        className=\"mt-3\"\r\n                        sx={{ mt: { xs: 2, md: 0 } }}\r\n                        variant=\"contained\"\r\n                        disabled={credentail?.email === \"demo@admin.com\"}\r\n                        onClick={handleClick}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                      : <></>}\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </div>\r\n      </div >\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Setting;\r\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getFormGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiFormGroup', slot);\n}\nconst formGroupClasses = generateUtilityClasses('MuiFormGroup', ['root', 'row', 'error']);\nexport default formGroupClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"row\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getFormGroupUtilityClass } from './formGroupClasses';\nimport useFormControl from '../FormControl/useFormControl';\nimport formControlState from '../FormControl/formControlState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    row,\n    error\n  } = ownerState;\n  const slots = {\n    root: ['root', row && 'row', error && 'error']\n  };\n  return composeClasses(slots, getFormGroupUtilityClass, classes);\n};\nconst FormGroupRoot = styled('div', {\n  name: 'MuiFormGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.row && styles.row];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  flexDirection: 'column',\n  flexWrap: 'wrap'\n}, ownerState.row && {\n  flexDirection: 'row'\n}));\n\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\nconst FormGroup = /*#__PURE__*/React.forwardRef(function FormGroup(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiFormGroup'\n  });\n  const {\n      className,\n      row = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['error']\n  });\n  const ownerState = _extends({}, props, {\n    row,\n    error: fcs.error\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormGroupRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Display group of elements in a compact row.\n   * @default false\n   */\n  row: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default FormGroup;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSwitchUtilityClass(slot) {\n  return generateUtilityClass('MuiSwitch', slot);\n}\nconst switchClasses = generateUtilityClasses('MuiSwitch', ['root', 'edgeStart', 'edgeEnd', 'switchBase', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium', 'checked', 'disabled', 'input', 'thumb', 'track']);\nexport default switchClasses;","'use client';\n\n// @inheritedComponent IconButton\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"edge\", \"size\", \"sx\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha, darken, lighten } from '@mui/system/colorManipulator';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\nimport { styled } from '../zero-styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport switchClasses, { getSwitchUtilityClass } from './switchClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    edge,\n    size,\n    color,\n    checked,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],\n    switchBase: ['switchBase', `color${capitalize(color)}`, checked && 'checked', disabled && 'disabled'],\n    thumb: ['thumb'],\n    track: ['track'],\n    input: ['input']\n  };\n  const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst SwitchRoot = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];\n  }\n})({\n  display: 'inline-flex',\n  width: 34 + 12 * 2,\n  height: 14 + 12 * 2,\n  overflow: 'hidden',\n  padding: 12,\n  boxSizing: 'border-box',\n  position: 'relative',\n  flexShrink: 0,\n  zIndex: 0,\n  // Reset the stacking context.\n  verticalAlign: 'middle',\n  // For correct alignment with the text.\n  '@media print': {\n    colorAdjust: 'exact'\n  },\n  variants: [{\n    props: {\n      edge: 'start'\n    },\n    style: {\n      marginLeft: -8\n    }\n  }, {\n    props: {\n      edge: 'end'\n    },\n    style: {\n      marginRight: -8\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      width: 40,\n      height: 24,\n      padding: 7,\n      [`& .${switchClasses.thumb}`]: {\n        width: 16,\n        height: 16\n      },\n      [`& .${switchClasses.switchBase}`]: {\n        padding: 4,\n        [`&.${switchClasses.checked}`]: {\n          transform: 'translateX(16px)'\n        }\n      }\n    }\n  }]\n});\nconst SwitchSwitchBase = styled(SwitchBase, {\n  name: 'MuiSwitch',\n  slot: 'SwitchBase',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.switchBase, {\n      [`& .${switchClasses.input}`]: styles.input\n    }, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme\n}) => ({\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  // Render above the focus ripple.\n  color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300]}`,\n  transition: theme.transitions.create(['left', 'transform'], {\n    duration: theme.transitions.duration.shortest\n  }),\n  [`&.${switchClasses.checked}`]: {\n    transform: 'translateX(20px)'\n  },\n  [`&.${switchClasses.disabled}`]: {\n    color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]}`\n  },\n  [`&.${switchClasses.checked} + .${switchClasses.track}`]: {\n    opacity: 0.5\n  },\n  [`&.${switchClasses.disabled} + .${switchClasses.track}`]: {\n    opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === 'light' ? 0.12 : 0.2}`\n  },\n  [`& .${switchClasses.input}`]: {\n    left: '-100%',\n    width: '300%'\n  }\n}), ({\n  theme\n}) => ({\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  variants: [...Object.entries(theme.palette).filter(([, value]) => value.main && value.light) // check all the used fields in the style below\n  .map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      [`&.${switchClasses.checked}`]: {\n        color: (theme.vars || theme).palette[color].main,\n        '&:hover': {\n          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        },\n        [`&.${switchClasses.disabled}`]: {\n          color: theme.vars ? theme.vars.palette.Switch[`${color}DisabledColor`] : `${theme.palette.mode === 'light' ? lighten(theme.palette[color].main, 0.62) : darken(theme.palette[color].main, 0.55)}`\n        }\n      },\n      [`&.${switchClasses.checked} + .${switchClasses.track}`]: {\n        backgroundColor: (theme.vars || theme).palette[color].main\n      }\n    }\n  }))]\n}));\nconst SwitchTrack = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Track',\n  overridesResolver: (props, styles) => styles.track\n})(({\n  theme\n}) => ({\n  height: '100%',\n  width: '100%',\n  borderRadius: 14 / 2,\n  zIndex: -1,\n  transition: theme.transitions.create(['opacity', 'background-color'], {\n    duration: theme.transitions.duration.shortest\n  }),\n  backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white}`,\n  opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === 'light' ? 0.38 : 0.3}`\n}));\nconst SwitchThumb = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Thumb',\n  overridesResolver: (props, styles) => styles.thumb\n})(({\n  theme\n}) => ({\n  boxShadow: (theme.vars || theme).shadows[1],\n  backgroundColor: 'currentColor',\n  width: 20,\n  height: 20,\n  borderRadius: '50%'\n}));\nconst Switch = /*#__PURE__*/React.forwardRef(function Switch(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSwitch'\n  });\n  const {\n      className,\n      color = 'primary',\n      edge = false,\n      size = 'medium',\n      sx\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    edge,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const icon = /*#__PURE__*/_jsx(SwitchThumb, {\n    className: classes.thumb,\n    ownerState: ownerState\n  });\n  return /*#__PURE__*/_jsxs(SwitchRoot, {\n    className: clsx(classes.root, className),\n    sx: sx,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(SwitchSwitchBase, _extends({\n      type: \"checkbox\",\n      icon: icon,\n      checkedIcon: icon,\n      ref: ref,\n      ownerState: ownerState\n    }, other, {\n      classes: _extends({}, classes, {\n        root: classes.switchBase\n      })\n    })), /*#__PURE__*/_jsx(SwitchTrack, {\n      className: classes.track,\n      ownerState: ownerState\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense switch styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Switch;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableContainerUtilityClass(slot) {\n  return generateUtilityClass('MuiTableContainer', slot);\n}\nconst tableContainerClasses = generateUtilityClasses('MuiTableContainer', ['root']);\nexport default tableContainerClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableContainerUtilityClass } from './tableContainerClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableContainerUtilityClass, classes);\n};\nconst TableContainerRoot = styled('div', {\n  name: 'MuiTableContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  width: '100%',\n  overflowX: 'auto'\n});\nconst TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableContainer'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TableContainerRoot, _extends({\n    ref: ref,\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `Table`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableContainer;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSwitchBaseUtilityClass(slot) {\n  return generateUtilityClass('PrivateSwitchBase', slot);\n}\nconst switchBaseClasses = generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);\nexport default switchBaseClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"autoFocus\", \"checked\", \"checkedIcon\", \"className\", \"defaultChecked\", \"disabled\", \"disableFocusRipple\", \"edge\", \"icon\", \"id\", \"inputProps\", \"inputRef\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"readOnly\", \"required\", \"tabIndex\", \"type\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '../utils/capitalize';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport useControlled from '../utils/useControlled';\nimport useFormControl from '../FormControl/useFormControl';\nimport ButtonBase from '../ButtonBase';\nimport { getSwitchBaseUtilityClass } from './switchBaseClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    checked,\n    disabled,\n    edge\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],\n    input: ['input']\n  };\n  return composeClasses(slots, getSwitchBaseUtilityClass, classes);\n};\nconst SwitchBaseRoot = styled(ButtonBase)(({\n  ownerState\n}) => _extends({\n  padding: 9,\n  borderRadius: '50%'\n}, ownerState.edge === 'start' && {\n  marginLeft: ownerState.size === 'small' ? -3 : -12\n}, ownerState.edge === 'end' && {\n  marginRight: ownerState.size === 'small' ? -3 : -12\n}));\nconst SwitchBaseInput = styled('input', {\n  shouldForwardProp: rootShouldForwardProp\n})({\n  cursor: 'inherit',\n  position: 'absolute',\n  opacity: 0,\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n  margin: 0,\n  padding: 0,\n  zIndex: 1\n});\n\n/**\n * @ignore - internal component.\n */\nconst SwitchBase = /*#__PURE__*/React.forwardRef(function SwitchBase(props, ref) {\n  const {\n      autoFocus,\n      checked: checkedProp,\n      checkedIcon,\n      className,\n      defaultChecked,\n      disabled: disabledProp,\n      disableFocusRipple = false,\n      edge = false,\n      icon,\n      id,\n      inputProps,\n      inputRef,\n      name,\n      onBlur,\n      onChange,\n      onFocus,\n      readOnly,\n      required = false,\n      tabIndex,\n      type,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const [checked, setCheckedState] = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: 'SwitchBase',\n    state: 'checked'\n  });\n  const muiFormControl = useFormControl();\n  const handleFocus = event => {\n    if (onFocus) {\n      onFocus(event);\n    }\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    }\n  };\n  const handleBlur = event => {\n    if (onBlur) {\n      onBlur(event);\n    }\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    }\n  };\n  const handleInputChange = event => {\n    // Workaround for https://github.com/facebook/react/issues/9023\n    if (event.nativeEvent.defaultPrevented) {\n      return;\n    }\n    const newChecked = event.target.checked;\n    setCheckedState(newChecked);\n    if (onChange) {\n      // TODO v6: remove the second argument.\n      onChange(event, newChecked);\n    }\n  };\n  let disabled = disabledProp;\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n  const hasLabelFor = type === 'checkbox' || type === 'radio';\n  const ownerState = _extends({}, props, {\n    checked,\n    disabled,\n    disableFocusRipple,\n    edge\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SwitchBaseRoot, _extends({\n    component: \"span\",\n    className: clsx(classes.root, className),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled,\n    tabIndex: null,\n    role: undefined,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/_jsx(SwitchBaseInput, _extends({\n      autoFocus: autoFocus,\n      checked: checkedProp,\n      defaultChecked: defaultChecked,\n      className: classes.input,\n      disabled: disabled,\n      id: hasLabelFor ? id : undefined,\n      name: name,\n      onChange: handleInputChange,\n      readOnly: readOnly,\n      ref: inputRef,\n      required: required,\n      ownerState: ownerState,\n      tabIndex: tabIndex,\n      type: type\n    }, type === 'checkbox' && value === undefined ? {} : {\n      value\n    }, inputProps)), checked ? checkedIcon : icon]\n  }));\n});\n\n// NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\nprocess.env.NODE_ENV !== \"production\" ? SwitchBase.propTypes = {\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node.isRequired,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string.isRequired,\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default SwitchBase;","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\"\n}), 'KeyboardArrowLeft');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\"\n}), 'KeyboardArrowRight');"],"names":["PageTitle","styled","Box","_ref","theme","spacing","_ref2","children","_jsx","className","Container","maxWidth","props","title","context","React","displayName","InputGroupText","ref","bsPrefix","as","Component","useBootstrapPrefix","classNames","InputGroup","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","value","Object","assign","Text","Radio","FormCheckInput","type","Checkbox","modules","toolbar","container","header","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","Setting","list","setList","useState","groupflag","setGroupFlag","setValue","showPassword","setShowPassword","isLoading","setIsLoading","credentail","setCredentail","isReadPermission","setIsReadPermission","isWritePermission","setIsWritePermission","isEditPermission","setIsEditPermission","isDeletePermission","setIsDeletePermission","navigate","useNavigate","apiUrl","setApiUrl","useEffect","cred","JSON","parse","localStorage","getItem","roleId","ind","pagePermissions","findIndex","c","isAddPermission","getData","loadjson","async","res","fetch","url","json","token","refreshToken","_data","APIservice","httpPost","recordList","length","i","j","group","k","systemFlag","valueTypeId","data","setItem","handleEditorChange","id","flagGroup","childGroup","pSystemFlag","changeFlag","console","log","fGroups","stringify","cInd","sInd","parseInt","childFlags","childSystemFlag","parentFlagValue","autoRender","psind","csInd","handleflagChange","e","target","name","rewardInd","onFileChange","file","files","reader","FileReader","onload","result","toString","readAsDataURL","_jsxs","_Fragment","ToastContainer","top","left","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Helmet","PageTitleWrapper","py","pl","Grid","justifyContent","alignItems","item","Stack","Breadcrumbs","Link","to","display","color","HomeIcon","Typography","variant","fontWeight","direction","xs","Card","marginBottom","CardContent","sx","typography","TabContext","borderBottom","borderColor","padding","paddingLeft","overflowX","TabList","onChange","handleChange","event","newValue","map","resp","index","Tab","label","flagGroupName","Loader1","TableContainer","TabPanel","sysflag","sIndex","description","Tooltip","arrow","InfoIcon","marginRight","marginLeft","required","Form","Select","valueList","split","arr","ReactQuill","disabled","Switch","checked","inputProps","fontSize","Control","onClick","VisibilityIcon","VisibilityOffIcon","FormGroup","accept","htmlFor","src","alt","height","FormControl","lg","multiple","renderValue","selected","join","MenuItem","indexOf","ListItemText","primary","childsysflag","gIndex","detail","border","borderRadius","Button","mt","md","email","nameList","Array","autoRenderList","isArray","push","l","obj","status","toast","success","progress","undefined","position","POSITION","TOP_RIGHT","clear","error","message","getFormGroupUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","FormGroupRoot","overridesResolver","styles","ownerState","root","row","_extends","flexDirection","flexWrap","inProps","useDefaultProps","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","fcs","formControlState","states","classes","slots","composeClasses","useUtilityClasses","clsx","getSwitchUtilityClass","SwitchRoot","edge","capitalize","overflow","boxSizing","flexShrink","zIndex","verticalAlign","colorAdjust","variants","switchClasses","thumb","switchBase","transform","SwitchSwitchBase","SwitchBase","input","vars","palette","defaultColor","mode","common","white","grey","transition","transitions","create","duration","shortest","defaultDisabledColor","track","opacity","switchTrackDisabled","backgroundColor","action","activeChannel","hoverOpacity","alpha","active","entries","filter","_ref3","main","light","_ref4","mainChannel","lighten","darken","SwitchTrack","_ref5","onBackground","black","switchTrack","SwitchThumb","_ref6","boxShadow","shadows","composedClasses","icon","checkedIcon","getTableContainerUtilityClass","TableContainerRoot","component","getSwitchBaseUtilityClass","SwitchBaseRoot","ButtonBase","SwitchBaseInput","shouldForwardProp","rootShouldForwardProp","cursor","margin","autoFocus","checkedProp","defaultChecked","disabledProp","disableFocusRipple","inputRef","onBlur","onFocus","readOnly","tabIndex","setCheckedState","useControlled","controlled","default","Boolean","state","hasLabelFor","centerRipple","focusRipple","role","nativeEvent","defaultPrevented","newChecked","createSvgIcon","d"],"sourceRoot":""}