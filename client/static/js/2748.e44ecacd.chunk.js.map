{"version":3,"file":"static/js/2748.e44ecacd.chunk.js","mappings":"wKAIA,MAAMA,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAChBE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAK,sBACEC,EAAMC,QAAQ,OAChC,IAmBD,EAZoDC,IAAmB,IAAlB,SAAEC,GAAUD,EAC/D,OACEE,EAAAA,EAAAA,KAACR,EAAS,CAACS,UAAU,uBAAsBF,UACzCC,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CAACC,SAAS,KAAIJ,SAAEA,KAChB,C,2DCXhB,MAaA,EAbiBK,IACf,MAAM,MAAEC,GAAUD,EAClB,OAKEJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBF,UAChCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBACX,C,oqBC2CV,MAEMK,GAAY,CACdC,WAAY,CACRC,MAAO,CACHC,UAAWC,IACXC,MAAO,QAKKlB,EAAAA,EAAAA,IAAOmB,EAAAA,EAAPnB,EAAeE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CACnD,2BAA4B,CACxBkB,QAASjB,EAAMC,QAAQ,IAE3B,2BAA4B,CACxBgB,QAASjB,EAAMC,QAAQ,IAE3B,mBAAoB,CAChBiB,OAAQ,SAEf,IAmCD,MAAMC,GAAe,CACjBC,GAAI,EACJC,KAAM,GACNC,YAAa,GACbC,gBAAiB,GACjBC,YAAa,KACbC,YAAa,EACbC,YAAY,EACZC,eAAe,EACfC,eAAe,EACfC,wBAAwB,EACxBC,oBAAoB,EACpBC,aAAc,KACdC,UAAW,KACXC,WAAY,KACZC,0BAA2B,MA+1E/B,GA51E2BC,KACvB,MAAMC,EAAO,CACTlB,OAAQ,OACRD,QAAS,OACToB,UAAW,8EACXC,aAAc,MACdC,aAAc,QAIZC,GAAWC,EAAAA,EAAAA,MACXzC,GAAQ0C,EAAAA,EAAAA,MACPC,EAAMC,KAAWC,EAAAA,EAAAA,UAAiB,IAClCC,GAAOC,KAAYF,EAAAA,EAAAA,UAAiB,KACpCG,GAAKC,KAAUJ,EAAAA,EAAAA,UAAiB,KAChCK,GAAIC,IAASC,EAAAA,SAAoBjC,IACxC,IAAKkC,GAAwBC,KAA6BT,EAAAA,EAAAA,UAAS,KAC9DU,GAAgBC,KAAqBX,EAAAA,EAAAA,UAAc,KAEnDY,GAA2BC,KAAgCb,EAAAA,EAAAA,UAAS,KACpEc,GAAmBC,KAAwBf,EAAAA,EAAAA,UAAc,IAE9D,MAAOgB,GAAQC,IAAaV,EAAAA,UAAe,IACpCW,GAAWC,KAAgBnB,EAAAA,EAAAA,WAAS,IACpCoB,GAASC,KAAcrB,EAAAA,EAAAA,WAAS,GACvC,IAAKsB,GAAQC,KAAavB,EAAAA,EAAAA,UAAS,IACnC,MAAOwB,GAAOC,KAAYzB,EAAAA,EAAAA,WAAS,IAG5B0B,GAAcC,IAAmBpB,EAAAA,SAAsB,KACvDqB,GAAWC,KAAgB7B,EAAAA,EAAAA,UAAc,KAEzC8B,GAAaC,KAAkB/B,EAAAA,EAAAA,WAAS,IACxCgC,GAAcC,KAAmBjC,EAAAA,EAAAA,UAAS,KAC1CkC,GAAoBC,KAAyBnC,EAAAA,EAAAA,WAAS,IACtDoC,GAAqBC,KAA0BrC,EAAAA,EAAAA,UAAS,KACxDsC,GAAwBC,KAA6BvC,EAAAA,EAAAA,WAAS,IAC9DwC,GAAyBC,KAA8BzC,EAAAA,EAAAA,UAAS,KAChE0C,GAAoBC,KAAyB3C,EAAAA,EAAAA,WAAS,IACtD4C,GAAqBC,KAA0B7C,EAAAA,EAAAA,UAAS,KACxD8C,GAAkBC,KAAuB/C,EAAAA,EAAAA,WAAS,IAClDgD,GAAmBC,KAAwBjD,EAAAA,EAAAA,UAAS,KACpDkD,GAAqBC,KAA0BnD,EAAAA,EAAAA,WAAS,IACxDoD,GAAsBC,KAA2BrD,EAAAA,EAAAA,UAAS,KAC1DsD,GAAkBC,KAAuBvD,EAAAA,EAAAA,WAAS,IAClDwD,GAAmBC,KAAwBzD,EAAAA,EAAAA,UAAS,KACpD0D,GAAmBC,KAAwB3D,EAAAA,EAAAA,WAAS,IACpD4D,GAAoBC,KAAyB7D,EAAAA,EAAAA,UAAS,KACtD8D,GAAgBC,KAAqB/D,EAAAA,EAAAA,WAAS,IAC9CgE,GAAiBC,KAAsBjE,EAAAA,EAAAA,UAAS,KAEhDkE,GAAOC,IAAY5D,EAAAA,SAAe,IACzC,IAAK6D,GAAYC,KAAiBrE,EAAAA,EAAAA,YAElC,MAAOsE,GAAkBC,KAAuBvE,EAAAA,EAAAA,WAAS,IAClDwE,GAAmBC,KAAwBzE,EAAAA,EAAAA,WAAS,IACpD0E,GAAkBC,KAAuB3E,EAAAA,EAAAA,WAAS,IAClD4E,GAAoBC,KAAyB7E,EAAAA,EAAAA,WAAS,IAc7D8E,EAAAA,EAAAA,YAAU,KACN,IAAIC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,gBAE3C,GADAd,GAAcU,GACVA,EACA,GAAmB,GAAfA,EAAKK,OAAa,CAClB,IAAIC,EAAMN,EAAKO,gBAAgBC,WAAWC,GAAuB,gBAAZA,EAAE5H,QACnDyH,GAAO,IACPd,GAAoBQ,EAAKO,gBAAgBD,GAAKf,kBAC9CG,GAAqBM,EAAKO,gBAAgBD,GAAKI,iBAC/Cd,GAAoBI,EAAKO,gBAAgBD,GAAKX,kBAC9CG,GAAsBE,EAAKO,gBAAgBD,GAAKT,oBAE5CG,EAAKO,gBAAgBD,GAAKf,kBAC1BoB,KAEZ,MACIA,IAER,GAED,IAEH,MAAMA,GAAWC,gBACPC,GAAQ9F,EAAMG,UACd4F,IAAc,EAGlBD,GAAUD,MAAOG,EAAoBC,KACvC,IACI,GAAIzE,GAAQ,CACR,MAAM0E,EAAQd,aAAaC,QAAQ,gBAC7Bc,EAAef,aAAaC,QAAQ,gBAE1C,IAAIe,EAAM,CACNJ,WAAYA,EACZC,YAAaA,EACbI,SAAU,KACVC,aAAc9E,IAAkB,IAEpC,MAAM+E,QAAYC,EAAAA,EAAWC,SACzB,gDACAL,EACAF,EACAC,GAEJtE,GAAgB0E,EAAIG,YACpBpG,GAAOiG,EAAII,cACX,IAAK,IAAIC,EAAI,EAAGA,EAAIhF,GAAaiF,OAAQD,IACrChF,GAAagF,GAAGvH,UAAYuC,GAAagF,GAAGvH,UAAUyH,KAAK,KAInE,KAAO,CACHzF,IAAa,GACb,MAAM6E,EAAQd,aAAaC,QAAQ,gBAC7Bc,EAAef,aAAaC,QAAQ,gBAC1C,IAAIe,EAAM,CACNJ,WAAYA,EACZC,YAAaA,EACbI,SAAU,MAEd,MAAME,QAAYC,EAAAA,EAAWC,SACzB,gDACAL,EACAF,EACAC,GAEJtE,GAAgB0E,EAAIG,YACpB,IAAK,IAAIE,EAAI,EAAGA,EAAIhF,GAAaiF,OAAQD,IACrChF,GAAagF,GAAGvH,UAAYuC,GAAagF,GAAGvH,UAAUyH,KAAK,MAI/DxG,GAAOiG,EAAII,cACPJ,GAAqB,KAAdA,EAAIQ,OACX5F,IAAU,GACW,KAAdoF,EAAIQ,QACXlH,EAAS,UACTuF,aAAa4B,UACQ,KAAdT,EAAIQ,QAYU,KAAdR,EAAIQ,QAYU,KAAdR,EAAIQ,QAYU,KAAdR,EAAIQ,UAnCX5F,IAAU,GACV8F,EAAAA,GAAMC,MAAMX,EAAIY,QAAS,CACrBC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVrK,MAAO,UACPsK,SAAUV,EAAAA,GAAMW,SAASC,aAuCjCxG,IAAa,EACjB,CACJ,CAAE,MAAO6F,GACL7F,IAAa,GACbF,IAAU,GACV8F,EAAAA,GAAMC,MAAMA,EAAO,CACfE,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVrK,MAAO,UACPsK,SAAUV,EAAAA,GAAMW,SAASC,WAEjC,GAGE9B,GAAeF,UACjBxE,IAAa,GACb,IACI,MAAM6E,EAAQd,aAAaC,QAAQ,gBAC7Bc,EAAef,aAAaC,QAAQ,gBACpCkB,QAAYC,EAAAA,EAAWC,SACzB,wDACA,CAAC,EACDP,EACAC,GAEJpE,GAAawE,EAAIG,YACbH,GAAsB,MAAfA,EAAIQ,QACJR,GAAsB,MAAfA,EAAIQ,SAClB3B,aAAa4B,QACbnH,EAAS,UAEjB,CAAE,MAAOqH,GACLY,QAAQC,IAAIb,GACZ7F,IAAa,EACjB,CACAA,IAAa,EAAM,EAGjB2G,GAAM,IAAIC,OAAO,mBAsEjBC,GAAqBrC,UACvBrF,GAAMhC,IACN2C,IAAU,GACVc,IAAe,GACfE,GAAgB,IAChBE,IAAsB,GACtBE,GAAuB,IACvBE,IAA0B,GAC1BE,GAA2B,IAC3BE,IAAsB,GACtBE,GAAuB,IACvBE,IAAoB,GACpBE,GAAqB,IACrBE,IAAuB,GACvBE,GAAwB,IACxBE,IAAoB,GACpBE,GAAqB,IACrBE,IAAqB,GACrBE,GAAsB,IACtBlD,GAAkB,IAClBF,GAA0B,IAC1BM,GAAqB,IACrBF,GAA6B,GAAG,EA4B9BoH,GAAcA,KAChB5G,IAAW,GACXI,IAAS,EAAM,EAiDbyG,GAAsCA,KACxCjH,IAAU,EAAM,EAGdkH,GAAqBC,IACvB,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OAC5BhI,GAAM,IAAKD,GAAI,CAAC7B,GAAO6J,IACvBpH,IAAU,EAAK,EAuDbsH,GAAc,IAAIR,OAAO,mBAgTzBS,GAAkB7C,MAAO8C,EAAQC,KAC/B5H,IAAqB6H,MAAMC,QAAQ9H,KAAwC,IAAlBT,GAAGzB,cAC5DkC,GAAoBA,GAAkB8F,KAAK,KAC3CvG,GAAGnB,aAAe4B,IAEtBT,GAAGnB,aAAemB,GAAGnB,aAAemB,GAAGnB,aAAe,KACtDmB,GAAGlB,UAAYuB,IAAkC,KACjD,IAAImI,EAlKcJ,KAClBA,EAAEK,iBACF,IAAID,GAAO,EA+FX,OA9FKxI,GAAG7B,MAKJuD,IAAe,GACfE,GAAgB,MALhBF,IAAe,GACfE,GAAgB,iCAChB4G,GAAO,GAKNxI,GAAG5B,aAKJ0D,IAAsB,GACtBE,GAAuB,MALvBF,IAAsB,GACtBE,GAAuB,yCACvBwG,GAAO,GAKNxI,GAAG3B,iBAKJ6D,IAA0B,GAC1BE,GAA2B,MAL3BF,IAA0B,GAC1BE,GAA2B,iCAC3BoG,GAAO,GAcNxI,GAAGzB,aAKJmE,IAAoB,GACpBE,GAAqB,IACC,GAAlB5C,GAAGzB,YACEyB,GAAGjB,YAKJuE,IAAqB,GACrBE,GAAsB,MALtBF,IAAqB,GACrBE,GAAsB,2BACtBgF,GAAO,GAMc,GAAlBxI,GAAGzB,aAAsC,IAAlByB,GAAGzB,cAC7ByB,GAAGlB,WAAoC,GAAvBkB,GAAGlB,UAAUwH,QAC7BpD,IAAoB,GACpBE,GAAqB,0BACrBoF,GAAO,IAEPtF,IAAoB,GACpBE,GAAqB,QAvB7BV,IAAoB,GACpBE,GAAqB,iCACrB4F,GAAO,GAuCsB,GAA7BxI,GAAGrB,yBACEqB,GAAGhB,2BAKJ0E,IAAkB,GAClBE,GAAmB,MALnBF,IAAkB,GAClBE,GAAmB,wBACnB4E,GAAO,IAeRA,CAAI,EAiEAE,CAAaN,GACxB,GAAII,EACA,IAOI,GAAIxI,GAAG9B,GAAI,CACP,MAAMyH,EAAQd,aAAaC,QAAQ,gBAC7Bc,EAAef,aAAaC,QAAQ,gBAC1C,IAAI6D,EAAM3I,GACVA,GAAGxB,WAA8B,GAAjBwB,GAAGxB,WACnBwB,GAAGvB,cAAoC,GAApBuB,GAAGvB,cACtBuB,GAAGtB,cAAoC,GAApBsB,GAAGtB,cACtBsB,GAAGrB,uBAAsD,GAA7BqB,GAAGrB,uBAC/BqB,GAAGpB,mBAA8C,GAAzBoB,GAAGpB,mBAC3BoB,GAAG8F,SAA0B,GAAf9F,GAAG8F,SACjB9F,GAAG4I,SAA0B,GAAf5I,GAAG4I,SACjB,MAAM5C,QAAYC,EAAAA,EAAWC,SACzB,wDACAyC,EACAhD,EACAC,GAEAI,GAAqB,KAAdA,EAAIQ,QACX5F,IAAU,GACV2E,GAAQ9F,EAAOG,GAAOA,KACD,KAAdoG,EAAIQ,QACXlH,EAAS,UACTuF,aAAa4B,SACQ,KAAdT,EAAIQ,QAYU,KAAdR,EAAIQ,QAXX5F,IAAU,GACV8F,EAAAA,GAAMC,MAAMX,EAAIY,QAAS,CACrBC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVrK,MAAO,UACPsK,SAAUV,EAAAA,GAAMW,SAASC,aAcR,KAAdtB,EAAIQ,QACXtE,IAA0B,GAC1BE,GAA2B,2BACN,KAAd4D,EAAIQ,QAYU,KAAdR,EAAIQ,UAXX5F,IAAU,GACV8F,EAAAA,GAAMC,MAAMX,EAAIY,QAAS,CACrBC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVrK,MAAO,UACPsK,SAAUV,EAAAA,GAAMW,SAASC,YAerC,KAAO,CACH,MAAM3B,EAAQd,aAAaC,QAAQ,gBAC7Bc,EAAef,aAAaC,QAAQ,gBAE1C,IAAI6D,EAAM3I,GAOV,MAAMgG,QAAYC,EAAAA,EAAWC,SACzB,wDACAyC,EACAhD,EACAC,GAEAI,GAAqB,KAAdA,EAAIQ,QACX9G,GAAQ,GACRkB,IAAU,GACV2E,GAAQ,EAAG3F,KACU,KAAdoG,EAAIQ,QACXlH,EAAS,UACTuF,aAAa4B,SACQ,KAAdT,EAAIQ,QACXtE,IAA0B,GAC1BE,GAA2B,2BACN,KAAd4D,EAAIQ,QAYU,KAAdR,EAAIQ,QAYU,KAAdR,EAAIQ,QAYU,KAAdR,EAAIQ,UAnCX5F,IAAU,GACV8F,EAAAA,GAAMC,MAAMX,EAAIY,QAAS,CACrBC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVrK,MAAO,UACPsK,SAAUV,EAAAA,GAAMW,SAASC,YAuCrC,CACAxG,IAAa,EACjB,CAAE,MAAO6F,GACL7F,IAAa,GACbF,IAAU,GACV8F,EAAAA,GAAMC,MAAMA,EAAO,CACfE,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVrK,MAAO,UACPsK,SAAUV,EAAAA,GAAMW,SAASC,WAEjC,CAGJrH,GAAM,IACCD,GACH,UAAaK,KAEjBkH,QAAQC,IAAIxH,GAAG,EAgBnB,OACI6I,EAAAA,GAAAA,MAAA,OAAA5L,SAAA,EACIC,EAAAA,GAAAA,KAAC4L,EAAAA,GAAc,CACXpL,MAAO,CAAEqL,IAAK,OAAQC,MAAO,MAE7BnC,UAAW,IACXC,iBAAiB,EACjBmC,aAAa,EACblC,cAAY,EACZmC,KAAK,EACLC,kBAAgB,EAChBlC,WAAS,EACTD,cAAY,KAEhB9J,EAAAA,GAAAA,KAACkM,EAAAA,GAAM,CAAAnM,UACHC,EAAAA,GAAAA,KAAA,SAAAD,SAAO,2BAEXC,EAAAA,GAAAA,KAACmM,EAAAA,EAAgB,CAAApM,UACbC,EAAAA,GAAAA,KAACN,EAAAA,EAAG,CAAC0M,EAAG,EAAErM,UACN4L,EAAAA,GAAAA,MAACU,EAAAA,GAAI,CAACC,WAAS,EAACC,eAAe,gBAAgBC,WAAW,SAAQzM,SAAA,EAC9DC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAAA1M,UACNC,EAAAA,GAAAA,KAAC0M,EAAAA,EAAK,CAACF,WAAW,OAAOD,eAAe,gBAAexM,UACnD4L,EAAAA,GAAAA,MAACgB,EAAAA,EAAW,CAAC,aAAW,aAAY5M,SAAA,EAChCC,EAAAA,GAAAA,KAAC4M,EAAAA,GAAI,CAACC,GAAG,SAASrM,MAAO,CAAEsM,QAAS,OAAQC,MAAO,SAAUhN,UACzDC,EAAAA,GAAAA,KAACgN,EAAAA,EAAQ,OAEbhN,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPC,QAAQ,YACRH,MAAM,UACNI,WAAW,OAAMpN,SACpB,iCAMbC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAAA1M,UACNC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACC,WAAS,EAACzM,QAAS,IAAIE,SACxBkH,IAAoB0E,EAAAA,GAAAA,MAAAyB,GAAAA,SAAA,CAAArN,SAAA,EACjB4L,EAAAA,GAAAA,MAACU,EAAAA,GAAI,CAACI,MAAI,EAAA1M,SAAA,EACN4L,EAAAA,GAAAA,MAAC0B,EAAAA,EAAM,CACHpN,UAAU,cACVqN,GAAI,CACAC,GAAI,CACAC,GAAI,EACJC,GAAI,EACJX,QAAS,OACTN,WAAY,SACZ3L,QAAS,QACTgL,IAAK,QAGbqB,QAAQ,YACRQ,QAASjD,GACTkD,KAAK,QAAO5N,SAAA,EAEZC,EAAAA,GAAAA,KAAC4N,EAAAA,EAAc,CAACC,SAAS,UAAU,0BAGvC7N,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CACHpN,UAAU,SACVqN,GAAI,CACAC,GAAI,CACAC,GAAI,EACJC,GAAI,EACJX,QAAS,OACTN,WAAY,SACZ3L,QAAS,QACTgL,IAAK,QAGbqB,QAAQ,YACRQ,QAASjD,GACTkD,KAAK,QAAO5N,UAEZC,EAAAA,GAAAA,KAAC4N,EAAAA,EAAc,CAACC,SAAS,gBAGjC7N,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAAA1M,UACNC,EAAAA,GAAAA,KAAC8N,EAAAA,EAAW,CACRR,GAAI,CAAEC,GAAI,CAAEC,GAAI,GAAKC,GAAI,GAAKM,GAAI,GAAKC,GAAI,KAAQjO,UAEnDC,EAAAA,GAAAA,KAACiO,EAAAA,EACG,CACAjN,GAAG,iBACHkN,MAAM,SACNhB,QAAQ,WACRjM,KAAK,eACL6J,MAAO/G,GACPoK,SAAWjD,GA1wBnCA,KAChBlH,GAAUkH,EAAEH,OAAOD,OACnB/G,GAASmH,EAAEH,OAAOD,MAClBzC,GAAQ9F,EAAMG,GAAM,EAuwBqC0L,CAAWlD,GAC5ByC,KAAK,QACLU,WAAY,CACRC,gBACItO,EAAAA,GAAAA,KAACuO,EAAAA,EAAc,CAACrE,SAAS,QAAOnK,UAC5BC,EAAAA,GAAAA,KAACwO,EAAAA,EAAU,iBAOjCxO,EAAAA,GAAAA,KAAAoN,GAAAA,SAAA,gBAO1BpN,EAAAA,GAAAA,KAACE,EAAAA,EAAS,CAACC,SAAS,KAAIJ,UACpBC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CACDC,WAAS,EACTmC,UAAU,MACVlC,eAAe,SACfC,WAAW,UACX3M,QAAS,EAAEE,UAEXC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,GAAGzN,UACdC,EAAAA,GAAAA,KAAAoN,GAAAA,SAAA,CAAArN,UACIC,EAAAA,GAAAA,KAAC0O,EAAAA,EAAI,CAACzO,UAAU,eAAcF,UAC1BC,EAAAA,GAAAA,KAAA,OAAAD,SACK4D,IACG3D,EAAAA,GAAAA,KAAC2O,EAAAA,EAAO,CAACtO,MAAM,gBAEfsL,EAAAA,GAAAA,MAAAyB,GAAAA,SAAA,CAAArN,SAAA,EACIC,EAAAA,GAAAA,KAAC4O,EAAAA,EAAO,IACPzK,IAAgBA,GAAaiF,OAAS,GACnCuC,EAAAA,GAAAA,MAAAyB,GAAAA,SAAA,CAAArN,SAAA,EACIC,EAAAA,GAAAA,KAAC6O,EAAAA,EAAc,CAAC5O,UAAU,yBAAwBF,UAC9C4L,EAAAA,GAAAA,MAACmD,EAAAA,EAAK,CAACC,cAAY,EAAAhP,SAAA,EACfC,EAAAA,GAAAA,KAACgP,EAAAA,EAAS,CAAAjP,UACN4L,EAAAA,GAAAA,MAACsD,EAAAA,EAAQ,CAAAlP,SAAA,EACLC,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPmC,QAAM,EACN5O,MAAO,CACHqN,SAAU,OACVV,WAAY,OACZhL,aAAc,QAChBpC,SACL,cAILC,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPmC,QAAM,EACN5O,MAAO,CACHqN,SAAU,OACVV,WAAY,OACZhL,aAAc,QAChBpC,SACL,YAILC,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPmC,QAAM,EACN5O,MAAO,CACHqN,SAAU,OACVV,WAAY,OACZhL,aAAc,QAChBpC,SACL,mBAILC,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPmC,QAAM,EACN5O,MAAO,CACHqN,SAAU,OACVV,WAAY,OACZhL,aAAc,QAChBpC,SACL,yBAILC,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPmC,QAAM,EACN5O,MAAO,CACHqN,SAAU,OACVV,WAAY,OACZhL,aAAc,QAElBlC,UAAU,cAAaF,SAC1B,mBAqGLC,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACG,MAAM,QAAQF,QAAS,EAAEpP,UAChCC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPmC,QAAM,EACN5O,MAAO,CACHqN,SAAU,OACVV,WAAY,OACZhL,aAAc,QAChBpC,SACL,oBAMbC,EAAAA,GAAAA,KAACsP,EAAAA,EAAS,CAAAvP,SACLoE,GAAaoL,KAAI,CAAC1E,EAAU2E,KAErB7D,EAAAA,GAAAA,MAACsD,EAAAA,EAAQ,CAACQ,OAAK,EAAA1P,SAAA,EACXC,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPC,QAAQ,QACRC,WAAW,OACXJ,MAAM,eACN2C,cAAY,EACZN,QAAM,EAAArP,SAELwC,EAAOG,GAAQ8M,EAAQ,OAGhCxP,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPC,QAAQ,QACRC,WAAW,OACXJ,MAAM,eACN2C,cAAY,EACZN,QAAM,EACN9B,GAAI,CAAEqC,cAAe,cAAe5P,SAEnC8K,EAAI5J,UAGbjB,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPC,QAAQ,QACRC,WAAW,OACXJ,MAAM,eACN2C,cAAY,EACZN,QAAM,EACN9B,GAAI,CAAEqC,cAAe,cAAe5P,SAEnC8K,EAAI3J,iBAGblB,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPC,QAAQ,QACRC,WAAW,OACXJ,MAAM,eACN2C,cAAY,EACZN,QAAM,EACN9B,GAAI,CAAEqC,cAAe,cAAe5P,SAEnC8K,EAAI1J,qBAGbnB,EAAAA,GAAAA,KAACkP,EAAAA,EAAS,CAACC,QAAS,EAAEpP,UAClBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CACPC,QAAQ,QACRC,WAAW,OACXJ,MAAM,eACN2C,cAAY,EACZN,QAAM,EACN9B,GAAI,CAAEqC,cAAe,aAAchP,MAAO,SAAUZ,SAEnD8K,EAAIzJ,YAAcyJ,EAAIzJ,YAAc,SAuG7CuK,EAAAA,GAAAA,MAACuD,EAAAA,EAAS,CAACC,QAAS,EAChBE,MAAM,QAAQ7O,MAAO,CAAEoP,WAAY,UAAW7P,SAAA,EAE9CC,EAAAA,GAAAA,KAAC6P,EAAAA,EAAO,CAACxP,MAAM,OAAOyP,OAAK,EAAA/P,UACvBC,EAAAA,GAAAA,KAAC+P,EAAAA,EAAU,CACPzC,GAAI,CACA,UAAW,CACP0C,WACIpQ,EAAMqQ,OAAOxG,MAAMyG,SAE3BnD,MAAOnN,EAAMuQ,QAAQC,QAAQC,MAEjCtD,MAAM,UACNY,KAAK,QACLD,QAAUxC,IA7elEoF,KACxB,IAAItP,EAAY,OAAPsP,QAAO,IAAPA,OAAO,EAAPA,EAAStP,GAClBoB,EAAS,oCAAoCpB,IAAK,EA4ekCuP,CAAmB1F,EAAI,EACzB9K,UAEFC,EAAAA,GAAAA,KAACwQ,EAAAA,EAAc,QAGtBrJ,IACGwE,EAAAA,GAAAA,MAAAyB,GAAAA,SAAA,CAAArN,SAAA,EAEIC,EAAAA,GAAAA,KAAC6P,EAAAA,EAAO,CACJxP,MACqB,IAAjBwK,EAAIjC,SACE,WACA,SAEVkH,OAAK,EAAA/P,UAELC,EAAAA,GAAAA,KAACyQ,EAAAA,EAAM,CACHC,SAAgC,oBAAZ,OAAV7J,SAAU,IAAVA,QAAU,EAAVA,GAAY8J,OACtBC,QACqB,IAAjB/F,EAAIjC,SAER8E,QAAUxC,GA9nCjF9C,OAAOpH,EAAYsI,KAKpCvG,GAJU,CACN/B,GAAIA,EACJsI,OAAQA,IAGZxF,IAAW,EAAK,EAynC4E+M,CAAahG,EAAI7J,GAAI6J,EAAIjC,UAE7BkI,WAAY,CACR,aAAc,mBAI1B9Q,EAAAA,GAAAA,KAAC6P,EAAAA,EAAO,CAACxP,MAAM,OAAOyP,OAAK,EAAA/P,UACvBC,EAAAA,GAAAA,KAAC+P,EAAAA,EAAU,CACPW,SAAgC,oBAAZ,OAAV7J,SAAU,IAAVA,QAAU,EAAVA,GAAY8J,OACtBrD,GAAI,CACA,UAAW,CACP0C,WACIpQ,EAAMqQ,OAAOG,QAAQF,SAE7BnD,MAAOnN,EAAMuQ,QAAQC,QAAQC,MAEjCtD,MAAM,UACNY,KAAK,QACLD,QAAUxC,GAzmCzEvC,KAIzB,GAAIA,EAAI/G,WAAsC,kBAAlB+G,EAAI/G,UAAwB,CACpD,MAAMmP,EAAuBpI,EAAI/G,UAAUoP,SAAS,KAAOrI,EAAI/G,UAAUqP,MAAM,KAAO,CAACtI,EAAI/G,WAC3F+G,EAAI/G,UAAYmP,CACpB,CAGA,GAFA3N,GAAkBuF,EAAI/G,WAElB+G,EAAIhH,cAA4C,kBAArBgH,EAAIhH,cAAiD,KAApBgH,EAAItH,YAAoB,CACpF,MAAM6P,EAA8BvI,EAAIhH,aAAaqP,SAAS,KAAOrI,EAAIhH,aAAasP,MAAM,KAAO,CAACtI,EAAIhH,cACxGgH,EAAIhH,aAAeuP,CACvB,CACA1N,GAAqBmF,EAAIhH,cAEzBoB,GAAM4F,GACN0B,QAAQC,IAAIxH,IACZY,IAAU,GACVc,IAAe,GACfE,GAAgB,IAChBE,IAAsB,GACtBE,GAAuB,IACvBE,IAA0B,GAC1BE,GAA2B,IAC3BE,IAAsB,GACtBE,GAAuB,IACvBE,IAAoB,GACpBE,GAAqB,IACrBE,IAAuB,GACvBE,GAAwB,IACxBE,IAAoB,GACpBE,GAAqB,GAAG,EA0kCoEiL,CAAoBtG,GAExB,cAAY,QACZ,cAAY,gBAAe9K,UAE3BC,EAAAA,GAAAA,KAACoR,EAAAA,EAAe,CAACvD,SAAS,kBAIhC7N,EAAAA,GAAAA,KAAAoN,GAAAA,SAAA,IACT/F,IACGrH,EAAAA,GAAAA,KAAC6P,EAAAA,EAAO,CAACxP,MAAM,SAASyP,OAAK,EAAA/P,UACzBC,EAAAA,GAAAA,KAAC+P,EAAAA,EAAU,CACPW,SAAgC,oBAAZ,OAAV7J,SAAU,IAAVA,QAAU,EAAVA,GAAY8J,OACtBrD,GAAI,CACA,UAAW,CAAE0C,WAAYpQ,EAAMqQ,OAAOxG,MAAMyG,SAC5CnD,MAAOnN,EAAMuQ,QAAQC,QAAQC,MAEjCtD,MAAM,UAAUY,KAAK,QACrBD,QAAUxC,GAxoCnEmG,EAACxG,EAAUyG,KAKtCvO,GAJU,CACN/B,GAAI6J,EACJ0G,kBAAmBD,IAGvBpN,IAAS,EAAK,EAkoCsFmN,CAAuBxG,EAAI7J,GAAI6J,EAAI1J,iBAAiBpB,UACpEC,EAAAA,GAAAA,KAACwR,GAAAA,EAAU,CAAC3D,SAAS,eAG3B7N,EAAAA,GAAAA,KAAAoN,GAAAA,SAAA,SAjPOvC,EAAI7J,cA0P7ChB,EAAAA,GAAAA,KAACN,EAAAA,EAAG,CAAC0M,EAAG,EAAErM,UACNC,EAAAA,GAAAA,KAACyR,EAAAA,EAAe,CACZC,UAAU,MACVC,MAAO/O,GACPgP,aA3tC/BC,CAACC,EAAYC,KAClCvP,GAAQuP,GACR1J,GAAQ0J,EAAUrP,GAAOA,GAAM,EA0tCqBsP,oBAvtC7BF,IACvBnP,GAASsP,SAASH,EAAM/G,OAAOD,QAC/BtI,GAAQ,GACR6F,GAAQ,EAAG4J,SAASH,EAAM/G,OAAOD,OAAO,EAqtCYvI,KAAMA,EACN2P,YAAaxP,GACbyP,mBAAoB,CAAC,GAAI,GAAI,GAAI,YAK7CnS,EAAAA,GAAAA,KAACoS,EAAAA,EAAK,CACF9E,GAAI,CACAR,QAAS,OACTP,eAAgB,SAChBC,WAAY,SACZ6F,UAAW,SACXC,cAAe,SACfrQ,UAAW,QAEfhC,UAAU,eAAcF,UAExBC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,KAAKqF,WAAS,EAAAxS,SAAC,sBAK3CC,EAAAA,GAAAA,KAAA,OAAAD,UACI4L,EAAAA,GAAAA,MAAC/K,EAAAA,EAAM,CACH4R,KAAM3O,GACN4O,QAAS/H,GACTgI,WAAS,EACTvS,SAAS,KAAIJ,SAAA,EAEbC,EAAAA,GAAAA,KAAC2S,EAAAA,EAAW,CACRrF,GAAI,CACAsF,EAAG,EACHxG,EAAG,EACHyB,SAAU,OACVV,WAAY,UACdpN,SAEa,IAAd+C,GAAGwG,OAAe,WAAa,YAEpCtJ,EAAAA,GAAAA,KAAC6S,EAAAA,EAAa,CAAA9S,UACV4L,EAAAA,GAAAA,MAACmH,EAAAA,EAAiB,CACdtS,MAAO,CACHqN,SAAU,OACVkF,cAAe,aACjBhT,SAAA,CAEa,IAAd+C,GAAGwG,OACE,mCACA,sCACNtJ,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACK,GAAI,CAAEO,SAAU,OAAQV,WAAY,OAAQJ,MAAO,UAAWiG,WAAY,QAASjT,SAChC,oHAKvE4L,EAAAA,GAAAA,MAACsH,EAAAA,EAAa,CAAAlT,SAAA,EACVC,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CAACK,QAAShD,GAAawC,QAAQ,WAAW1M,MAAO,CAAE0S,YAAa,QAASnT,SAAC,YACjFC,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CAACqD,SAAgC,oBAAZ,OAAV7J,SAAU,IAAVA,QAAU,EAAVA,GAAY8J,OAA4BjD,QA1uCpFtF,UACtB,MAAMK,EAAQd,aAAaC,QAAQ,gBAC7Bc,EAAef,aAAaC,QAAQ,gBAC1C,IAAIe,EAAM,CACN3H,GAAI8B,GAAG9B,UAEO+H,EAAAA,EAAWC,SACzB,wDACAL,EACAF,EACAC,GAEJ5E,IAAW,GACXuE,GAAQ9F,EAAOG,GAAOA,GAAM,EA6tC0GwK,QAAQ,WAAW1M,MAAO,CAAE0S,YAAa,QAASnT,SAAC,iBAKrJC,EAAAA,GAAAA,KAAA,OAAAD,UACI4L,EAAAA,GAAAA,MAAC/K,EAAAA,EAAM,CAAC4R,KAAM/O,GAAQgP,QAAS/H,GAAagI,WAAS,EAACvS,SAAS,KAAIJ,SAAA,EAC/D4L,EAAAA,GAAAA,MAACgH,EAAAA,EAAW,CACRrF,GAAI,CAAEsF,EAAG,EAAGxG,EAAG,EAAGyB,SAAU,OAAQV,WAAY,QAASpN,SAAA,CAExD+C,GAAG9B,GAAK,oBAAsB,oBAC/BhB,EAAAA,GAAAA,KAAC+P,EAAAA,EAAU,CACP,aAAW,QACXrC,QAAS/C,GACT2C,GAAI,CACApD,SAAU,WACV4B,MAAO,GACPD,IAAK,GACLkB,MAAQnN,GAAUA,EAAMuQ,QAAQgD,KAAK,MACvCpT,UAEFC,EAAAA,GAAAA,KAACoT,EAAAA,EAAS,UAIlBzH,EAAAA,GAAAA,MAACkH,EAAAA,EAAa,CAACQ,UAAQ,EAAAtT,SAAA,EACnB4L,EAAAA,GAAAA,MAAC2H,EAAAA,EAAG,CAAAvT,SAAA,EACA4L,EAAAA,GAAAA,MAAC4H,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,SAAA,EACfC,EAAAA,GAAAA,KAACiO,EAAAA,EAAS,CACNuF,WAAS,EACTC,OAAO,QACPzS,GAAG,OACHkN,MAAM,oBACNwF,KAAK,OACLhB,WAAS,EACTxF,QAAQ,WACRjM,KAAK,OACL6J,MAAOhI,GAAG7B,KACVkN,SAAWtD,IAnsC5CA,KAC3B,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OAC5B,IAAI5J,EAAkB2J,EAAM6I,QAAQ,OAAQ,KAC5CxS,EAAkBA,EAAgByS,OAAO,GAAGC,cAAgB1S,EAAgB2S,MAAM,GAClF/Q,GAAM,IACCD,GACH,CAAC7B,GAAO6J,EACR3J,gBAAiBA,IAErBuC,IAAU,EAAK,EA2rCiDqQ,CAAsBlJ,GArqCpEA,KAClB,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OACxBD,GACAtG,IAAe,GACfE,GAAgB,MAEhBF,IAAe,GACfE,GAAgB,iCACpB,EA8pCgEsP,CAAanJ,EAAI,EAErBoJ,UAAU,EACVvD,WAAU5N,GAAG9B,MAEjBhB,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CACX1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SAEvCwE,IAAeE,SAKxBkH,EAAAA,GAAAA,MAAC4H,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,SAAA,EACfC,EAAAA,GAAAA,KAACiO,EAAAA,EAAS,CACNuF,WAAS,EACTC,OAAO,QACPzS,GAAG,cACHkN,MAAM,2BACNwF,KAAK,OACLhB,WAAS,EACTxF,QAAQ,WACRjM,KAAK,cACL6J,MAAOhI,GAAG5B,YACViN,SAAWtD,IACPD,GAAkBC,GArrCzDA,KACzB,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OACxBD,GACAlG,IAAsB,GACtBE,GAAuB,MAEvBF,IAAsB,GACtBE,GAAuB,4BAC3B,EA8qCgEqP,CAAoBtJ,EAAI,EAE5BoJ,UAAU,KAEdjU,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CACX1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SAEvC4E,IAAsBE,YAMnC7E,EAAAA,GAAAA,KAACiO,EAAAA,EAAS,CACNjN,GAAG,4BACHkN,MAAM,cACNkG,WAAS,EACT1B,WAAS,EACT2B,KAAM,EACN1S,aAAa,GACbmJ,MAAOhI,GAAG1B,YACVH,KAAK,cACLkN,SAAWtD,IACPD,GAAkBC,GA/qCjDA,KACbA,GAERzF,IAAsB,GACtBE,GAAuB,MAEvBF,IAAsB,GACtBE,GAAuB,2BAC3B,EAwqCwDgP,CAAoBzJ,EAAI,EAE5BoJ,UAAU,KAEdjU,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CACX1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SAEvCoF,IAAsBE,MAE3BsG,EAAAA,GAAAA,MAAC2H,EAAAA,EAAG,CAAAvT,SAAA,EACA4L,EAAAA,GAAAA,MAAC4H,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,SAAA,EACfC,EAAAA,GAAAA,KAACiO,EAAAA,EAAS,CACNuF,WAAS,EACTC,OAAO,QACPzS,GAAG,kBACHkN,MAAM,oBACNwF,KAAK,OACLhB,WAAS,EACTxF,QAAQ,WACRjM,KAAK,kBACL6J,MAAOhI,GAAG3B,gBACVgN,SAAWtD,IAhwCtCA,KACjC,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OAC5B,IAAI5J,EAAkB2J,EAAM6I,QAAQ,OAAQ,KAC5CxS,EAAkBA,EAAgByS,OAAO,GAAGC,cAAgB1S,EAAgB2S,MAAM,GAClF/Q,GAAM,IAAKD,GAAI,CAAC7B,GAAOE,IACvBuC,IAAU,EAAK,EA4vCiD6Q,CAA4B1J,GAxtC/DA,KAC7B,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OAExBD,EACIE,GAAYwJ,KAAK3J,EAAIE,OAAOD,QAC5B9F,IAA0B,GAC1BE,GAA2B,MAE3BF,IAA0B,GAC1BE,GAA2B,wCAI/BF,IAA0B,GAC1BE,GAA2B,iCAC/B,EA0sCgEuP,CAAwB5J,EAAI,EAEhCoJ,UAAU,EACVvD,WAAU5N,GAAG9B,MAEjBhB,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CACX1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SAEvCgF,IAA0BE,SAGnC0G,EAAAA,GAAAA,MAAC4H,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,SAAA,EACf4L,EAAAA,GAAAA,MAACmC,EAAAA,EAAW,CACRR,GAAI,CAAE3M,MAAO,CAAEoN,GAAI,IAAKN,GAAI,IAAKO,GAAI,IAAKR,GAAI,MAAQzN,SAAA,EAEtDC,EAAAA,GAAAA,KAAC0U,EAAAA,EAAU,CAAC1T,GAAG,2BAA0BjB,SAAC,gBAG1CC,EAAAA,GAAAA,KAAC2U,EAAAA,EAAM,CACHC,QAAQ,2BACR5T,GAAG,qBACH6T,UAAU,EACV5T,KAAK,cACL6J,MAAOhI,GAAGzB,aAAe,GACzB8M,SAAWtD,IACPD,GAAkBC,GArtC/DA,KACXA,GAERrF,IAAoB,GACpBE,GAAqB,MAErBF,IAAoB,GACpBE,GAAqB,0BACzB,EA8sCoEoP,CAAkBjK,EAAI,EAE1BqD,MAAM,aACN5N,UAAWA,GACX2T,UAAU,EACVvD,WAAU5N,GAAG9B,GAAkBjB,SAE9BsE,GAAUkL,KAAK1E,IACZ7K,EAAAA,GAAAA,KAAC+U,EAAAA,EAAQ,CAAcjK,MAAOD,EAAI7J,GAAGjB,SAChC8K,EAAImK,eADMnK,EAAI7J,YAM/BhB,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CAAC1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SACnDwF,IAAoBE,YA+BjCzF,EAAAA,GAAAA,KAACsT,EAAAA,EAAG,KAkFJ3H,EAAAA,GAAAA,MAAC2H,EAAAA,EAAG,CAAAvT,SAAA,EACAC,EAAAA,GAAAA,KAACuT,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,SACM,KAAnB+C,GAAGzB,aACDsK,EAAAA,GAAAA,MAAAyB,GAAAA,SAAA,CAAArN,SAAA,EAEIC,EAAAA,GAAAA,KAACiO,EAAAA,EAAS,CACNuF,WAAS,EACTC,OAAO,QACPzS,GAAG,eACHkN,MAAM,gBACNwF,KAAK,OACLhB,WAAS,EACTxF,QAAQ,WACRjM,KAAK,eACL6J,MAAOhI,GAAGnB,aACVwM,SAAWtD,IACPD,GAAkBC,GAp0ChEA,KAEdA,GAERjF,IAAuB,GACvBE,GAAwB,MAGxBF,IAAuB,GACvBE,GAAwB,6BAC5B,EA2zCwEmP,CAAqBpK,EAAI,EAE7BoJ,UAAU,KAEdjU,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CACX1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SAEvC4F,IAAuBE,SAIhC8F,EAAAA,GAAAA,MAAAyB,GAAAA,SAAA,CAAArN,SAAA,EAEI4L,EAAAA,GAAAA,MAAC2H,EAAAA,EAAG,CAAAvT,SAAA,EACA4L,EAAAA,GAAAA,MAACuJ,GAAAA,EAAS,CAAC1U,MAAO,CAAEsM,QAAS,QAAS/M,SAAA,EAClCC,EAAAA,GAAAA,KAACiO,EAAAA,EAAS,CACNuF,WAAS,EACTC,OAAO,QACPzS,GAAG,gBACHkN,MAAM,gBACNwF,KAAK,OACLhB,WAAS,EACTxF,QAAQ,WACRjM,KAAK,4BACL6J,MAAOzH,GACP8K,SAAWtD,IACPA,EAAIE,OAAOD,MAA6B,KAArBD,EAAIE,OAAOD,MAAe,KAAOD,EAAIE,OAAOD,MA17C5GD,KACnC,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OAC5BzH,GAA6BwH,GAC7BpH,IAAU,EAAK,EAw7CiEyR,CAA8BtK,GAn1ChFA,KAE9B,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OACxBD,GACAlF,IAAuB,GACvBE,GAAwB,MAExBF,IAAuB,GACvBE,GAAwB,0BAC5B,EA40CgFsP,CAAyBvK,EAAI,KAEnC7K,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CACLC,GAAI,CAAEC,GAAI,IACVL,QAAQ,WACRQ,QAvnDlD2H,KACtB9K,GAAIiK,KAAKnR,IAEgC,KAArCA,GAA0BiS,SAC1B/R,GAAoBA,GAAoB,IAAIA,IAAqB,GACjEA,GAAkBgS,KAAKlS,IACvBG,GAAqBD,IACrBD,GAA6B,IAC7B+G,QAAQC,IAAI/G,MAIhBqC,IAAuB,GACvBE,GAAwB,6BAE5B,EAymD4EtF,MAAO,CAAEgV,OAAQ,MAAOC,WAAY,oBAAqBvT,aAAc,MAAOuR,OAAQ,sBAAuB1T,SAAC,YAItHC,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CACX1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SAEvC4F,IAAuBE,QAiB9BtC,IAAqBA,GAAkB6F,OAAS,IAAMpJ,EAAAA,GAAAA,KAAC0O,EAAAA,EAAI,CAAClO,MAAOwB,EAAKjC,UACtEC,EAAAA,GAAAA,KAACsT,EAAAA,EAAG,CAAAvT,SAECwD,GAAkBgM,KAAI,CAACzE,EAAO0E,KAC3BxP,EAAAA,GAAAA,KAACuT,EAAAA,EAAG,CACAxF,GAAI,EACJN,GAAI,EACJO,GAAI,EACJR,GAAI,GAEJU,MAAOpD,EACPtK,MAAO,CAGHkV,cAAe,QACjB3V,UAEFC,EAAAA,GAAAA,KAAC2V,EAAAA,EAAI,CAEDzH,MAAOpD,EACP8K,SAAW1K,IAhpDjE2K,QAipDmFrG,EAhpDjHjM,GAAoBA,GAAkBuS,QAAO,CAACC,EAAGvG,IAAUA,IAAUqG,IACrErS,GAAqBD,GA+oDkG,EACjCxD,SAED+K,GANI0E,IATJA,eA4Bb,GAAlB1M,GAAGzB,aAAsC,IAAlByB,GAAGzB,eACxBrB,EAAAA,GAAAA,KAAAoN,GAAAA,SAAA,CAAArN,UACI4L,EAAAA,GAAAA,MAAC4H,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,SAAA,EAGf4L,EAAAA,GAAAA,MAAC2H,EAAAA,EAAG,CAAAvT,SAAA,EAMA4L,EAAAA,GAAAA,MAACuJ,GAAAA,EAAS,CAAC1U,MAAO,CAAEsM,QAAS,QAAS/M,SAAA,EAClCC,EAAAA,GAAAA,KAACiO,EAAAA,EAAS,CACNuF,WAAS,EACTC,OAAO,QACPzS,GAAG,aACHkN,MAAM,aACNwF,KAAK,OACLhB,WAAS,EACTxF,QAAQ,WACRjM,KAAK,yBACL6J,MAAO7H,GACPkL,SAAWtD,IA3hDvDA,KAChC,MAAM,KAAE5J,EAAI,MAAE6J,GAAUD,EAAIE,OAC5B7H,GAA0B4H,GAC1BpH,IAAU,EAAK,EAyhDiEsS,CAA2BnL,GAn6CpFA,KACXA,GAER7E,IAAoB,GACpBE,GAAqB,MAErBF,IAAoB,GACpBE,GAAqB,0BACzB,EA45CgF+P,CAAkBpL,EAAI,KAE5B7K,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CACLC,GAAI,CAAEC,GAAI,IACVL,QAAQ,WACRQ,QAzuDrDwI,KACnB3L,GAAIiK,KAAKvR,IAC6B,KAAlCA,GAAuBqS,SACvBnS,GAAiBA,GAAiB,IAAIA,IAAkB,GACxDA,GAAeoS,KAAKtS,IACpBG,GAAkBD,IAClBD,GAA0B,IAC1BmH,QAAQC,IAAInH,MAIhB6C,IAAoB,GACpBE,GAAqB,qBACzB,EA6tD4E1F,MAAO,CAAEgV,OAAQ,MAAOC,WAAY,oBAAqBvT,aAAc,MAAOuR,OAAQ,sBAAuB1T,SAAC,YAItHC,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CACX1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SAEvCgG,IAAoBE,QAkB3B9C,IAAkBA,GAAeiG,OAAS,IAAMpJ,EAAAA,GAAAA,KAAC0O,EAAAA,EAAI,CAAClO,MAAOwB,EAAKjC,UAChEC,EAAAA,GAAAA,KAACsT,EAAAA,EAAG,CAAAvT,SAECoD,GAAeoM,KAAI,CAACzE,EAAO0E,KACxBxP,EAAAA,GAAAA,KAACuT,EAAAA,EAAG,CACAxF,GAAI,EACJN,GAAI,EACJO,GAAI,EACJR,GAAI,GAEJU,MAAOpD,EACPtK,MAAO,CAGHkV,cAAe,QACjB3V,UAEFC,EAAAA,GAAAA,KAAC2V,EAAAA,EAAI,CAEDzH,MAAOpD,EACP8K,SAAW1K,IAtwDpE2K,QAuwDmFrG,EAtwD9GrM,GAAiBA,GAAe2S,QAAO,CAACC,EAAGvG,IAAUA,IAAUqG,IAC/DzS,GAAkBD,GAqwDkG,EAC9BpD,SAED+K,GANI0E,IATJA,SAqBN,SAMP,GAAlB1M,GAAGzB,cACDsK,EAAAA,GAAAA,MAAC4H,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,SAAA,EACfC,EAAAA,GAAAA,KAACiO,EAAAA,EAAS,CACNuF,WAAS,EACTC,OAAO,QACPzS,GAAG,aACHkN,MAAM,cACNwF,KAAK,SACLhB,WAAS,EACTxF,QAAQ,WACRjM,KAAK,aACL6J,MAAOhI,GAAGjB,WACVsM,SAAWtD,IACP,MAAMsL,EAAalE,SAASpH,EAAIE,OAAOD,OACvCF,GAAkBC,GAriD9DA,KACZA,EACA,SADAA,EACmB,KAC3BzE,IAAqB,GACrBE,GAAsB,MAEtBF,IAAqB,GACrBE,GAAsB,oCAC1B,EA8hDoE8P,CAAmBD,EAAW,EAIlCrF,WAAY,CAAEuF,UAAW,GACzB3F,WAAU5N,GAAG9B,MAEjBhB,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CACX1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SAEvCoG,IAAqBE,YAItCsF,EAAAA,GAAAA,MAAC2H,EAAAA,EAAG,CAAAvT,SAAA,EACAC,EAAAA,GAAAA,KAACuT,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,UACfC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACyC,cAAY,EAACxC,QAAQ,KAAInN,UACjC4L,EAAAA,GAAAA,MAACU,EAAAA,GAAI,CAACC,WAAS,EAAAvM,SAAA,EACXC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAACoN,QAAQ,OAAON,WAAW,aAAYzM,SAAA,CAAC,eAC3B,UAGrBC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAAAK,SAAA,EACAC,EAAAA,GAAAA,KAACyQ,EAAAA,EAAM,CACHG,UACK9N,GAAGxB,WAERoM,QAAUxC,GAvgD1DA,KAC5B,MAAM,KAAEjK,EAAI,QAAE2P,GAAY1F,EAAEH,OAE5BhI,GAAM,IACCD,GACH,WAAc8N,GAChB,EAkgD8E0F,CAAuBpL,GAE3B4F,WAAY,CACR,aAAc,gBAEpB,mFAgBtB9Q,EAAAA,GAAAA,KAACuT,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,UACfC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACyC,cAAY,EAACxC,QAAQ,KAAInN,UACjC4L,EAAAA,GAAAA,MAACU,EAAAA,GAAI,CAACC,WAAS,EAAAvM,SAAA,EACXC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAACoN,QAAQ,OAAON,WAAW,aAAYzM,SAAA,CAAC,mBACvB,UAGzBC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAAAK,SAAA,EACAC,EAAAA,GAAAA,KAACyQ,EAAAA,EAAM,CACHG,UACK9N,GAAGvB,cAERmM,QAAUxC,GAliDvDA,KAC/B,MAAM,KAAEjK,EAAI,QAAE2P,GAAY1F,EAAEH,OAE5BhI,GAAM,IACCD,GACH,cAAiB8N,GACnB,EA6hD8E2F,CAA0BrL,GAE9B4F,WAAY,CACR,aAAc,gBAEpB,mFAiBtB9Q,EAAAA,GAAAA,KAACuT,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,UAEfC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACyC,cAAY,EAACxC,QAAQ,KAAInN,UACjC4L,EAAAA,GAAAA,MAACU,EAAAA,GAAI,CAACC,WAAS,EAAAvM,SAAA,EACXC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAACoN,QAAQ,OAAON,WAAW,aAAYzM,SAAA,CAAC,mBACvB,UAGzBC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAAAK,SAAA,EACAC,EAAAA,GAAAA,KAACyQ,EAAAA,EAAM,CACHG,UACK9N,GAAGtB,cAERkM,QAAUxC,GA/jDvDA,KAC/B,MAAM,KAAEjK,EAAI,QAAE2P,GAAY1F,EAAEH,OAE5BhI,GAAM,IACCD,GACH,cAAiB8N,GACnB,EA0jD8E4F,CAA0BtL,GAE9B4F,WAAY,CACR,aAAc,gBAEpB,oFAiBtB9Q,EAAAA,GAAAA,KAACuT,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,UAEfC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACyC,cAAY,EAACxC,QAAQ,KAAInN,UACjC4L,EAAAA,GAAAA,MAACU,EAAAA,GAAI,CAACC,WAAS,EAAAvM,SAAA,EACXC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAACoN,QAAQ,OAAON,WAAW,aAAYzM,SAAA,CAAC,wBAClB,UAG9BC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAAAK,SAAA,EACAC,EAAAA,GAAAA,KAACyQ,EAAAA,EAAM,CACHG,UACK9N,GAAGpB,mBAERgM,QAAUxC,GAllDlDA,KACpC,MAAM,KAAEjK,EAAI,QAAE2P,GAAY1F,EAAEH,OAE5BhI,GAAM,IACCD,GACH,mBAAsB8N,GACxB,EA6kD8E6F,CAA+BvL,GAEnC4F,WAAY,CACR,aAAc,gBAEpB,qFAgBtB9Q,EAAAA,GAAAA,KAACuT,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,UAGfC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACyC,cAAY,EAACxC,QAAQ,KAAInN,UACjC4L,EAAAA,GAAAA,MAACU,EAAAA,GAAI,CAACC,WAAS,EAAAvM,SAAA,EACXC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAACoN,QAAQ,OAAON,WAAW,aAAYzM,SAAA,CAAC,2BACf,UAGjCC,EAAAA,GAAAA,KAACqM,EAAAA,GAAI,CAACI,MAAI,EAACe,GAAI,EAAGQ,GAAI,EAAGP,GAAI,EAAE1N,UAC3B4L,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CAAAK,SAAA,EACAC,EAAAA,GAAAA,KAACyQ,EAAAA,EAAM,CACHG,UACK9N,GAAGrB,uBAERiM,QAAUxC,GAloD9CA,KACxC,MAAM,KAAEjK,EAAI,QAAE2P,GAAY1F,EAAEH,OAE5BhI,GAAM,IACCD,GACHrB,uBAAwBmP,GAC1B,EA6nD8E8F,CAAmCxL,GAEvC4F,WAAY,CACR,aAAc,gBAEpB,8FAuBK,GAA7BhO,GAAGrB,yBACDzB,EAAAA,GAAAA,KAACsT,EAAAA,EAAG,CAAC9S,MAAO,CAAEmW,UAAW,OAAQ5W,UAC7B4L,EAAAA,GAAAA,MAAC4H,EAAAA,EAAG,CAAC/F,GAAI,GAAIC,GAAI,EAAE1N,SAAA,EACf4L,EAAAA,GAAAA,MAACmC,EAAAA,EAAW,CACRR,GAAI,CAAE3M,MAAO,CAAEoN,GAAI,IAAKN,GAAI,IAAKO,GAAI,IAAKR,GAAI,MAAQzN,SAAA,EAEtDC,EAAAA,GAAAA,KAAC0U,EAAAA,EAAU,CAAC1T,GAAG,2BAA0BjB,SAAC,aAG1CC,EAAAA,GAAAA,KAAC2U,EAAAA,EAAM,CACHC,QAAQ,2BACR5T,GAAG,qBACH6T,UAAU,EACV5T,KAAK,4BACL6J,MAAOhI,GAAGhB,2BAA6B,GACvCqM,SAAWtD,IACPD,GAAkBC,GA3vDrEA,KACTA,GAERrE,IAAkB,GAClBE,GAAmB,MAEnBF,IAAkB,GAClBE,GAAmB,6BACvB,EAovDwEkQ,CAAgB/L,EAAI,EAExBqD,MAAM,aACN5N,UAAWA,GACX2T,UAAU,EAAKlU,SAptEhE,CAEnB,CAAE+K,MAAO,gBAAiBoD,MAAO,iBACjC,CAAEpD,MAAO,mBAAoBoD,MAAO,oBACpC,CAAEpD,MAAO,oBAAqBoD,MAAO,qBACrC,CAAEpD,MAAO,kBAAmBoD,MAAO,mBACnC,CAAEpD,MAAO,6BAA8BoD,MAAO,8BAC9C,CAAEpD,MAAO,gBAAiBoD,MAAO,iBACjC,CAAEpD,MAAO,WAAYoD,MAAO,YAC5B,CAAEpD,MAAO,eAAgBoD,MAAO,iBA6sEoDqB,KAAK1E,IACjB7K,EAAAA,GAAAA,KAAC+U,EAAAA,EAAQ,CAAiBjK,MAAOD,EAAIC,MAAM/K,SACtC8K,EAAIC,OADMD,EAAIC,eAM/B9K,EAAAA,GAAAA,KAACkU,EAAAA,EAAc,CAAC1T,MAAO,CAAEuM,MAAO,MAAOjM,OAAQ,QAASf,SACnDwG,IAAkBE,cAKvCkF,EAAAA,GAAAA,MAACjM,EAAAA,EAAG,CACA4N,GAAI,CACAR,QAAS,OACTP,eAAgB,gBAChBH,EAAG,OACLrM,SAAA,EAWFC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACK,GAAI,CAAEO,SAAU,OAAQV,WAAY,OAAQJ,MAAO,UAAWlM,QAAS,QAASd,SAC7B,+GAG/D4L,EAAAA,GAAAA,MAAA,OAAA5L,SAAA,EACIC,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CAACK,QAAS/C,GAAqCuC,QAAQ,WAAW1M,MAAO,CAAE0S,YAAa,QAASnT,SAAC,YACzGC,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CAACqD,SAAgC,oBAAZ,OAAV7J,SAAU,IAAVA,QAAU,EAAVA,GAAY8J,OAA4BjD,QAAUxC,IAAQD,GAAgBC,EAAS,EAAIgC,QAAQ,WAAW1M,MAAO,CAAE0S,YAAa,QAASnT,SAAC,qBAK5KC,EAAAA,GAAAA,KAAA,OAAAD,UACI4L,EAAAA,GAAAA,MAAC/K,EAAAA,EAAM,CAAC4R,KAAMvO,GAAOwO,QAAS/H,GAAagI,WAAS,EAACvS,SAAS,KAAIJ,SAAA,EAC9DC,EAAAA,GAAAA,KAAC2S,EAAAA,EAAW,CACRrF,GAAI,CAAEsF,EAAG,EAAGxG,EAAG,EAAGyB,SAAU,OAAQV,WAAY,UAAWpN,SAC9D,YAGDC,EAAAA,GAAAA,KAAC6S,EAAAA,EAAa,CAAA9S,UACV4L,EAAAA,GAAAA,MAACmH,EAAAA,EAAiB,CACdtS,MAAO,CAAEqN,SAAU,OAAQkF,cAAe,aAAchT,SAAA,CAC3D,oCAEGC,EAAAA,GAAAA,KAACiN,EAAAA,EAAU,CAACK,GAAI,CAAEO,SAAU,OAAQV,WAAY,OAAQJ,MAAO,UAAWiG,WAAY,QAASjT,SAChC,oHAKvE4L,EAAAA,GAAAA,MAACsH,EAAAA,EAAa,CAAAlT,SAAA,EACVC,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CAACK,QAAShD,GAAawC,QAAQ,WAAW1M,MAAO,CAAE0S,YAAa,QAASnT,SAAC,YACjFC,EAAAA,GAAAA,KAACqN,EAAAA,EAAM,CAACqD,SAAgC,oBAAZ,OAAV7J,SAAU,IAAVA,QAAU,EAAVA,GAAY8J,OAA4BjD,QA9lDjFtF,UACzB,MAAMK,EAAQd,aAAaC,QAAQ,gBAC7Bc,EAAef,aAAaC,QAAQ,gBAC1C,IAAIe,EAAM,CACN3H,GAAI8B,GAAG9B,GACPG,gBAAiB2B,GAAG3B,iBAExB,MAAM2H,QAAYC,EAAAA,EAAWC,SACzB,mDACAL,EACAF,EACAC,GAEAI,GAAsB,MAAfA,EAAIQ,QACXE,EAAAA,GAAMC,MAAMX,EAAIG,WAAY,CACxBU,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVrK,MAAO,YAGfsE,IAAS,GACTmE,GAAQ9F,EAAOG,GAAOA,GAAM,EAqkD6GwK,QAAQ,WAAW1M,MAAO,CAAE0S,YAAa,QAASnT,SAAC,iCAYtL,C,sBC19EV8W,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,wCACD,cACJN,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,kFACD,UACJN,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,+OACD,UACJN,EAAQ,EAAUG,C,qJCXX,SAASI,EAAyBC,GACvC,OAAOC,EAAAA,EAAAA,IAAqB,eAAgBD,EAC9C,EACyBE,EAAAA,EAAAA,GAAuB,eAAgB,CAAC,S,eCDjE,MAAMC,EAAY,CAAC,YAAa,aAmB1BC,GAAgBlY,EAAAA,EAAAA,IAAO,QAAS,CACpCwB,KAAM,eACNsW,KAAM,OACNK,kBAAmBA,CAACxX,EAAOyX,IAAWA,EAAOC,MAHzBrY,CAInB,CACDqN,QAAS,uBAELiL,EAAY,CAChB7K,QAAS,QAEL8K,EAAmB,QAqDzB,EApD+BhV,EAAAA,YAAiB,SAAmBiV,EAASC,GAC1E,MAAM9X,GAAQ+X,EAAAA,EAAAA,GAAgB,CAC5B/X,MAAO6X,EACPhX,KAAM,kBAEF,UACFhB,EAAS,UACTyR,EAAYsG,GACV5X,EACJgY,GAAQC,EAAAA,EAAAA,GAA8BjY,EAAOsX,GACzCY,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGnY,EAAO,CACrCsR,cAEI8G,EAjCkBF,KACxB,MAAM,QACJE,GACEF,EAIJ,OAAOG,EAAAA,EAAAA,GAHO,CACZX,KAAM,CAAC,SAEoBR,EAA0BkB,EAAQ,EA0B/CE,CAAkBJ,GAClC,OAAoBtY,EAAAA,EAAAA,KAAK2Y,EAAAA,EAAiBC,SAAU,CAClD9N,MAAOiN,EACPhY,UAAuBC,EAAAA,EAAAA,KAAK2X,GAAeY,EAAAA,EAAAA,GAAS,CAClDM,GAAInH,EACJzR,WAAW6Y,EAAAA,EAAAA,GAAKN,EAAQV,KAAM7X,GAC9BiY,IAAKA,EACLa,KAAMrH,IAAcsG,EAAmB,KAAO,WAC9CM,WAAYA,GACXF,KAEP,G,qJCxDO,SAASY,EAAqBzB,GACnC,OAAOC,EAAAA,EAAAA,IAAqB,WAAYD,EAC1C,EACqBE,EAAAA,EAAAA,GAAuB,WAAY,CAAC,OAAQ,iB,eCDjE,MAAMC,EAAY,CAAC,YAAa,YAAa,UAAW,OAAQ,gBAoB1DuB,GAAYxZ,EAAAA,EAAAA,IAAO,QAAS,CAChCwB,KAAM,WACNsW,KAAM,OACNK,kBAAmBA,CAACxX,EAAOyX,KACzB,MAAM,WACJS,GACElY,EACJ,MAAO,CAACyX,EAAOC,KAAMQ,EAAWvJ,cAAgB8I,EAAO9I,aAAa,GAPtDtP,EASfE,IAAA,IAAC,MACFC,EAAK,WACL0Y,GACD3Y,EAAA,OAAK4Y,EAAAA,EAAAA,GAAS,CACbzL,QAAS,QACTnM,MAAO,OACPuY,eAAgB,WAChBC,cAAe,EACf,aAAaZ,EAAAA,EAAAA,GAAS,CAAC,EAAG3Y,EAAMwZ,WAAWC,MAAO,CAChDxY,QAASjB,EAAMC,QAAQ,GACvBkN,OAAQnN,EAAM0Z,MAAQ1Z,GAAOuQ,QAAQoJ,KAAKC,UAC1CnH,UAAW,OACXoH,YAAa,YAEdnB,EAAWvJ,cAAgB,CAC5BmK,eAAgB,YAChB,IACIlB,EAAmB,QAiFzB,EAhF2BhV,EAAAA,YAAiB,SAAeiV,EAASC,GAClE,MAAM9X,GAAQ+X,EAAAA,EAAAA,GAAgB,CAC5B/X,MAAO6X,EACPhX,KAAM,cAEF,UACFhB,EAAS,UACTyR,EAAYsG,EAAgB,QAC5BnX,EAAU,SAAQ,KAClB8M,EAAO,SAAQ,aACfoB,GAAe,GACb3O,EACJgY,GAAQC,EAAAA,EAAAA,GAA8BjY,EAAOsX,GACzCY,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGnY,EAAO,CACrCsR,YACA7Q,UACA8M,OACAoB,iBAEIyJ,EAxDkBF,KACxB,MAAM,QACJE,EAAO,aACPzJ,GACEuJ,EACEoB,EAAQ,CACZ5B,KAAM,CAAC,OAAQ/I,GAAgB,iBAEjC,OAAO0J,EAAAA,EAAAA,GAAeiB,EAAOV,EAAsBR,EAAQ,EAgD3CE,CAAkBJ,GAC5BqB,EAAQ3W,EAAAA,SAAc,KAAM,CAChCnC,UACA8M,OACAoB,kBACE,CAAClO,EAAS8M,EAAMoB,IACpB,OAAoB/O,EAAAA,EAAAA,KAAK4Z,EAAAA,EAAahB,SAAU,CAC9C9N,MAAO6O,EACP5Z,UAAuBC,EAAAA,EAAAA,KAAKiZ,GAAWV,EAAAA,EAAAA,GAAS,CAC9CM,GAAInH,EACJqH,KAAMrH,IAAcsG,EAAmB,KAAO,QAC9CE,IAAKA,EACLjY,WAAW6Y,EAAAA,EAAAA,GAAKN,EAAQV,KAAM7X,GAC9BqY,WAAYA,GACXF,KAEP,G","sources":["components/PageTitleWrapper/index.tsx","content/Loader.tsx","content/ManageCustomFields/manageCustomFields.tsx","../node_modules/@mui/icons-material/AddTwoTone.js","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/icons-material/Search.js","../node_modules/@mui/material/TableHead/tableHeadClasses.js","../node_modules/@mui/material/TableHead/TableHead.js","../node_modules/@mui/material/Table/tableClasses.js","../node_modules/@mui/material/Table/Table.js"],"sourcesContent":["import { FC, ReactNode } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Container, styled } from '@mui/material';\r\n\r\nconst PageTitle = styled(Box)(\r\n  ({ theme }) => `\r\n        padding: ${theme.spacing(1)};\r\n`\r\n);\r\n\r\ninterface PageTitleWrapperProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nconst PageTitleWrapper: FC<PageTitleWrapperProps> = ({ children }) => {\r\n  return (\r\n    <PageTitle className=\"MuiPageTitle-wrapper\">\r\n      <Container maxWidth=\"lg\">{children}</Container>\r\n    </PageTitle>\r\n  );\r\n};\r\n\r\nPageTitleWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default PageTitleWrapper;\r\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst Loader1 = (props: Props) => {\r\n  const { title } = props;\r\n  return (\r\n    // <div className=\"loader\">\r\n    //     <img className=\"img\" src={loader} alt=\"\" />\r\n    //     <span>{title}</span>\r\n    // </div>\r\n    <div className=\"spinner-container\">\r\n      <div className=\"loading-spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader1;\r\n","import { Helmet } from 'react-helmet-async';\r\nimport PageTitleWrapper from '../../components/PageTitleWrapper';\r\nimport {\r\n    Grid,\r\n    Container,\r\n    Box,\r\n    Breadcrumbs,\r\n    Button,\r\n    Card,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Divider,\r\n    FormHelperText,\r\n    IconButton,\r\n    Stack,\r\n    Switch,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n    TextField,\r\n    Tooltip,\r\n    Typography,\r\n    useTheme,\r\n    styled,\r\n    FormControl,\r\n    InputAdornment,\r\n    Paper,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Chip\r\n} from '@mui/material';\r\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\r\nimport AddTwoToneIcon from '@mui/icons-material/AddTwoTone';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport React, { useState, ChangeEvent, useEffect } from 'react';\r\nimport Loader1 from '../Loader';\r\nimport APIservice from 'src/utils/APIservice';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../content/smallScreen.css';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { CardHeader, Col, FormGroup, Row } from 'react-bootstrap';\r\nimport ForwardToInboxIcon from '@mui/icons-material/ForwardToInbox';\r\nimport './manageCustomFields.css'\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { object } from 'prop-types';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2)\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1)\r\n    },\r\n    '& .MuiPaper-root': {\r\n        height: '700px'\r\n    },\r\n}));\r\n\r\nexport interface DialogTitleProps {\r\n    id: string;\r\n    children?: React.ReactNode;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction BootstrapDialogTitle(props: DialogTitleProps) {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle\r\n            sx={{ m: 0, p: 2, fontSize: '18px', fontWeight: 'bold' }}\r\n            {...other}\r\n        >\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 13,\r\n                        top: 13,\r\n                        color: (theme) => theme.palette.grey[500]\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    );\r\n}\r\n\r\nconst initialState = {\r\n    id: 0,\r\n    name: '',\r\n    displayName: '',\r\n    mappedFieldName: '',\r\n    description: null,\r\n    valueTypeId: 0,\r\n    isRequired: false,\r\n    allowInSearch: false,\r\n    allowInFilter: false,\r\n    allowIncompleteProfile: false,\r\n    allowInPreferences: false,\r\n    defaultValue: null,\r\n    valueList: null,\r\n    textLength: null,\r\n    completeprofilesectioname: null\r\n};\r\n\r\nconst ManageCustomFields = () => {\r\n    const card = {\r\n        height: 'auto',\r\n        padding: '10px',\r\n        boxShadow: '0px 0px 4px rgba(159, 162, 191, .18), 0px 0px 2px rgba(159, 162, 191, 0.32)',\r\n        borderRadius: '5px',\r\n        marginBottom: '30px'\r\n    };\r\n\r\n\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n    const [page, setPage] = useState<number>(0);\r\n    const [limit, setLimit] = useState<number>(10);\r\n    const [row, setRow] = useState<number>(10);\r\n    const [v1, setV1] = React.useState<any>(initialState);\r\n    let [singleValueOfValueList, setSingleValueOfValueList] = useState('')\r\n    let [arrayValueList, setArrayValueList] = useState<any>([]);\r\n\r\n    let [singleValueOfDefaultValue, setSingleValueOfDefaultValue] = useState('')\r\n    let [arrayDefaultValue, setArrayDefaultValue] = useState<any>([]);\r\n\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const [isloading, setIsLoading] = useState(false);\r\n    const [ischeck, setIsCheck] = useState(false);\r\n    let [search, setSearch] = useState('');\r\n    const [isDel, setIsDel] = useState(false);\r\n\r\n    // const [customNotifications, setCustomNotifications] = React.useState<any[]>([]);\r\n    const [customFields, setCustomFields] = React.useState<any[]>([]);\r\n    const [valueType, setValueType] = useState<any>([]);\r\n    // const [customFields, setCustomFields] = React.useState<any>(initialState);\r\n    const [isNameError, setIsNameError] = useState(false);\r\n    const [NameErrorMsg, setNameErrorMsg] = useState('');\r\n    const [isDisplayNameError, setIsDisplayNameError] = useState(false);\r\n    const [DisplayNameErrorMsg, setDisplayNameErrorMsg] = useState('');\r\n    const [isMappedFieldNameError, setIsMappedFieldNameError] = useState(false);\r\n    const [MappedFieldNameErrorMsg, setMappedFieldNameErrorMsg] = useState('');\r\n    const [isDescriptionError, setIsDescriptionError] = useState(false);\r\n    const [DescriptionErrorMsg, setDescriptionErrorMsg] = useState('');\r\n    const [isValueTypeError, setIsValueTypeError] = useState(false);\r\n    const [ValueTypeErrorMsg, setValueTypeErrorMsg] = useState('');\r\n    const [isDefaultValueError, setIsDefaultValueError] = useState(false);\r\n    const [DefaultValueErrorMsg, setDefaultValueErrorMsg] = useState('');\r\n    const [isValueListError, setIsValueListError] = useState(false);\r\n    const [ValueListErrorMsg, setValueListErrorMsg] = useState('');\r\n    const [isTextLengthError, setIsTextLengthError] = useState(false);\r\n    const [TextLengthErrorMsg, setTextLengthErrorMsg] = useState('');\r\n    const [isSectionError, setIsSectionError] = useState(false);\r\n    const [SectionErrorMsg, setSectionErrorMsg] = useState('');\r\n\r\n    const [image, setImage] = React.useState('');\r\n    let [credentail, setCredentail] = useState<any>();\r\n\r\n    const [isReadPermission, setIsReadPermission] = useState(true);\r\n    const [isWritePermission, setIsWritePermission] = useState(true);\r\n    const [isEditPermission, setIsEditPermission] = useState(true);\r\n    const [isDeletePermission, setIsDeletePermission] = useState(true);\r\n    const profileSection = [\r\n        // { value: 'Profile For', label: 'Profile For' },\r\n        { value: 'Basic Details', label: 'Basic Details' },\r\n        { value: 'Personal Details', label: 'Personal Details' },\r\n        { value: 'Community Details', label: 'Community Details' },\r\n        { value: 'Address Details', label: 'Address Details' },\r\n        { value: 'Education & Career Details', label: 'Education & Career Details' },\r\n        { value: 'Other Details', label: 'Other Details' },\r\n        { value: 'About Me', label: 'About Me' },\r\n        { value: 'Expectations', label: 'Expectations' },\r\n\r\n    ];\r\n\r\n    useEffect(() => {\r\n        let cred = JSON.parse(localStorage.getItem('Credentials'));\r\n        setCredentail(cred);\r\n        if (cred) {\r\n            if (cred.roleId != 1) {\r\n                let ind = cred.pagePermissions.findIndex((c: any) => c.title === \"Block Users\");\r\n                if (ind >= 0) {\r\n                    setIsReadPermission(cred.pagePermissions[ind].isReadPermission);\r\n                    setIsWritePermission(cred.pagePermissions[ind].isAddPermission)\r\n                    setIsEditPermission(cred.pagePermissions[ind].isEditPermission);\r\n                    setIsDeletePermission(cred.pagePermissions[ind].isDeletePermission);\r\n\r\n                    if (cred.pagePermissions[ind].isReadPermission)\r\n                        loadData();\r\n                }\r\n            } else {\r\n                loadData();\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n    const loadData = async () => {\r\n        await getdata(page, limit);\r\n        await getValueType();\r\n    }\r\n\r\n    const getdata = async (startIndex: number, fetchRecord: number) => {\r\n        try {\r\n            if (search) {\r\n                const token = localStorage.getItem('SessionToken');\r\n                const refreshToken = localStorage.getItem('RefreshToken');\r\n\r\n                let obj = {\r\n                    startIndex: startIndex,\r\n                    fetchRecord: fetchRecord,\r\n                    isActive: null,\r\n                    searchString: search ? search : '',\r\n                };\r\n                const res = await APIservice.httpPost(\r\n                    '/api/admin/manageCustomFields/getCustomfields',\r\n                    obj,\r\n                    token,\r\n                    refreshToken\r\n                );\r\n                setCustomFields(res.recordList);\r\n                setRow(res.totalRecords);\r\n                for (let i = 0; i < customFields.length; i++) {\r\n                    customFields[i].valueList = customFields[i].valueList.join('; ')\r\n                }\r\n\r\n\r\n            } else {\r\n                setIsLoading(true);\r\n                const token = localStorage.getItem('SessionToken');\r\n                const refreshToken = localStorage.getItem('RefreshToken');\r\n                let obj = {\r\n                    startIndex: startIndex,\r\n                    fetchRecord: fetchRecord,\r\n                    isActive: null,\r\n                };\r\n                const res = await APIservice.httpPost(\r\n                    '/api/admin/manageCustomFields/getCustomfields',\r\n                    obj,\r\n                    token,\r\n                    refreshToken\r\n                );\r\n                setCustomFields(res.recordList);\r\n                for (let i = 0; i < customFields.length; i++) {\r\n                    customFields[i].valueList = customFields[i].valueList.join('; ')\r\n                }\r\n\r\n\r\n                setRow(res.totalRecords);\r\n                if (res && res.status == 200) {\r\n                    setIsOpen(false);\r\n                } else if (res.status == 401) {\r\n                    navigate('/admin');\r\n                    localStorage.clear();\r\n                } else if (res.status == 500) {\r\n                    setIsOpen(false);\r\n                    toast.error(res.message, {\r\n                        autoClose: 6000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'colored',\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                } else if (res.status == 300) {\r\n                    setIsOpen(false);\r\n                    toast.error(res.message, {\r\n                        autoClose: 6000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'colored',\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                } else if (res.status == 400) {\r\n                    setIsOpen(false);\r\n                    toast.error(res.message, {\r\n                        autoClose: 6000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'colored',\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                } else if (res.status == 404) {\r\n                    setIsOpen(false);\r\n                    toast.error(res.message, {\r\n                        autoClose: 6000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'colored',\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                }\r\n                setIsLoading(false);\r\n            }\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n            setIsOpen(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const getValueType = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            const res = await APIservice.httpPost(\r\n                '/api/admin/manageCustomFields/getCustomfieldValueType',\r\n                {},\r\n                token,\r\n                refreshToken\r\n            );\r\n            setValueType(res.recordList);\r\n            if (res && res.status === 200) {\r\n            } else if (res && res.status === 401) {\r\n                localStorage.clear();\r\n                navigate('/admin');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            setIsLoading(false);\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const reg = new RegExp('^[a-zA-Z0-9 ]+$');\r\n\r\n    const handleAddValueList = () => {\r\n        if (reg.test(singleValueOfValueList)) {\r\n            if (singleValueOfValueList.trim() !== '') {\r\n                arrayValueList = arrayValueList ? [...arrayValueList] : []\r\n                arrayValueList.push(singleValueOfValueList);\r\n                setArrayValueList(arrayValueList);\r\n                setSingleValueOfValueList('');\r\n                console.log(arrayValueList)\r\n            }\r\n        }\r\n        else {\r\n            setIsValueListError(true);\r\n            setValueListErrorMsg('Value is invalid.');\r\n        }\r\n\r\n    };\r\n\r\n    const handleDeleteValueList = (indexToRemove) => {\r\n        arrayValueList = arrayValueList.filter((_, index) => index !== indexToRemove);\r\n        setArrayValueList(arrayValueList);\r\n        // v1.valueList = arrayValueList\r\n    };\r\n\r\n    const handleAddDefaultValue = () => {\r\n        if (reg.test(singleValueOfDefaultValue)) {\r\n\r\n            if (singleValueOfDefaultValue.trim() !== '') { \r\n                arrayDefaultValue = arrayDefaultValue ? [...arrayDefaultValue] : []\r\n                arrayDefaultValue.push(singleValueOfDefaultValue);\r\n                setArrayDefaultValue(arrayDefaultValue);\r\n                setSingleValueOfDefaultValue('');\r\n                console.log(arrayDefaultValue)\r\n            }\r\n\r\n        } else {\r\n            setIsDefaultValueError(true);\r\n            setDefaultValueErrorMsg('Default value is invalid.');\r\n\r\n        }\r\n\r\n\r\n    };\r\n\r\n    const handleDeleteDefaultValue = (indexToRemove) => {\r\n        arrayDefaultValue = arrayDefaultValue.filter((_, index) => index !== indexToRemove);\r\n        setArrayDefaultValue(arrayDefaultValue)\r\n        // setArrayDefaultValue(updatedDefaultValueChips);\r\n        // arrayDefaultValue = updatedDefultValueChips\r\n        // v1.defaultValue = arrayDefaultValue\r\n    };\r\n\r\n    const searchData = (e) => {\r\n        setSearch(e.target.value);\r\n        search = e.target.value;\r\n        getdata(page, limit);\r\n    };\r\n\r\n    const handlePageChange = (event: any, newPage: number): void => {\r\n        setPage(newPage);\r\n        getdata(newPage * limit, limit);\r\n    };\r\n\r\n    const handleLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setLimit(parseInt(event.target.value));\r\n        setPage(0);\r\n        getdata(0, parseInt(event.target.value));\r\n    };\r\n\r\n    const handleClickOpenAdd = async () => {\r\n        setV1(initialState);\r\n        setIsOpen(true);\r\n        setIsNameError(false);\r\n        setNameErrorMsg('');\r\n        setIsDisplayNameError(false);\r\n        setDisplayNameErrorMsg('');\r\n        setIsMappedFieldNameError(false);\r\n        setMappedFieldNameErrorMsg('');\r\n        setIsDescriptionError(false);\r\n        setDescriptionErrorMsg('');\r\n        setIsValueTypeError(false);\r\n        setValueTypeErrorMsg('');\r\n        setIsDefaultValueError(false);\r\n        setDefaultValueErrorMsg('');\r\n        setIsValueListError(false);\r\n        setValueListErrorMsg('');\r\n        setIsTextLengthError(false);\r\n        setTextLengthErrorMsg('');\r\n        setArrayValueList([]);\r\n        setSingleValueOfValueList('')\r\n        setArrayDefaultValue([]);\r\n        setSingleValueOfDefaultValue('')\r\n    };\r\n\r\n    const handleSwitch = async (id: number, status: number) => {\r\n        let obj = {\r\n            id: id,\r\n            status: status\r\n        };\r\n        setV1(obj);\r\n        setIsCheck(true);\r\n    };\r\n\r\n    const handleSwitchCheck = async () => {\r\n        const token = localStorage.getItem('SessionToken');\r\n        const refreshToken = localStorage.getItem('RefreshToken');\r\n        let obj = {\r\n            id: v1.id\r\n        };\r\n        const res = await APIservice.httpPost(\r\n            '/api/admin/manageCustomFields/toggleActiveCustomField',\r\n            obj,\r\n            token,\r\n            refreshToken\r\n        );\r\n        setIsCheck(false);\r\n        getdata(page * limit, limit);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setIsCheck(false);\r\n        setIsDel(false)\r\n    };\r\n\r\n    const handleOpenDeleteDialog = (arr: any, arr1: any) => {\r\n        let obj = {\r\n            id: arr,\r\n            packageDurationId: arr1\r\n        };\r\n        setV1(obj);\r\n        setIsDel(true);\r\n    };\r\n\r\n\r\n\r\n    const handleClickOpenEdit = (obj: any) => {\r\n        debugger\r\n        // if (obj.imageUrl) setImage(process.env.REACT_APP_BASEURL + '/'+ + obj.imageUrl);\r\n        // else setImage('');\r\n        if (obj.valueList && typeof obj.valueList === 'string') {\r\n            const valueArray: string[] = obj.valueList.includes(';') ? obj.valueList.split(';') : [obj.valueList];\r\n            obj.valueList = valueArray;\r\n        }\r\n        setArrayValueList(obj.valueList)\r\n\r\n        if (obj.defaultValue && typeof obj.defaultValue === 'string' && obj.valueTypeId === 10) {\r\n            const defaultValueArray: string[] = obj.defaultValue.includes(';') ? obj.defaultValue.split(';') : [obj.defaultValue];\r\n            obj.defaultValue = defaultValueArray;\r\n        }\r\n        setArrayDefaultValue(obj.defaultValue)\r\n\r\n        setV1(obj);\r\n        console.log(v1)\r\n        setIsOpen(true);\r\n        setIsNameError(false);\r\n        setNameErrorMsg('');\r\n        setIsDisplayNameError(false);\r\n        setDisplayNameErrorMsg('');\r\n        setIsMappedFieldNameError(false);\r\n        setMappedFieldNameErrorMsg('');\r\n        setIsDescriptionError(false);\r\n        setDescriptionErrorMsg('');\r\n        setIsValueTypeError(false);\r\n        setValueTypeErrorMsg('');\r\n        setIsDefaultValueError(false);\r\n        setDefaultValueErrorMsg('');\r\n        setIsValueListError(false);\r\n        setValueListErrorMsg('');\r\n    }\r\n\r\n    const handleCloseCustomNotificationDialog = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        setV1({ ...v1, [name]: value });\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const handleFieldNameChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        let mappedFieldName = value.replace(/\\s+/g, '_');\r\n        mappedFieldName = mappedFieldName.charAt(0).toLowerCase() + mappedFieldName.slice(1);\r\n        setV1({\r\n            ...v1,\r\n            [name]: value,\r\n            mappedFieldName: mappedFieldName\r\n        });\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const handleMappedFieldNameChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        let mappedFieldName = value.replace(/\\s+/g, '_');\r\n        mappedFieldName = mappedFieldName.charAt(0).toLowerCase() + mappedFieldName.slice(1);\r\n        setV1({ ...v1, [name]: mappedFieldName });\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const handleValueListInputChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        setSingleValueOfValueList(value);\r\n        setIsOpen(true);\r\n    };\r\n    const handleDefaultValueInputChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        setSingleValueOfDefaultValue(value);\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const validateName = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsNameError(false);\r\n            setNameErrorMsg('');\r\n        } else {\r\n            setIsNameError(true);\r\n            setNameErrorMsg('Custom Field Name is required');\r\n        }\r\n    };\r\n    const validateDisplayName = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsDisplayNameError(false);\r\n            setDisplayNameErrorMsg('');\r\n        } else {\r\n            setIsDisplayNameError(true);\r\n            setDisplayNameErrorMsg('Custom field is required');\r\n        }\r\n    };\r\n\r\n    const mediumRegex = new RegExp('^[a-zA-Z0-9_]*$');\r\n    const validateMappedFieldName = (arr) => {\r\n        const { name, value } = arr.target;\r\n      \r\n        if (value) {\r\n            if (mediumRegex.test(arr.target.value)) {\r\n                setIsMappedFieldNameError(false);\r\n                setMappedFieldNameErrorMsg('');\r\n            } else {\r\n                setIsMappedFieldNameError(true);\r\n                setMappedFieldNameErrorMsg('Special characters are not allowed');\r\n            }\r\n\r\n        } else {\r\n            setIsMappedFieldNameError(true);\r\n            setMappedFieldNameErrorMsg('Mapped field name is required');\r\n        }\r\n    };\r\n\r\n    const validateDescription = (arr) => {\r\n        let value = arr;\r\n        if (value) {\r\n            setIsDescriptionError(false);\r\n            setDescriptionErrorMsg('');\r\n        } else {\r\n            setIsDescriptionError(true);\r\n            setDescriptionErrorMsg('Description is required');\r\n        }\r\n    };\r\n\r\n    const validateValueType = (arr) => {\r\n        let value = arr;\r\n        if (value) {\r\n            setIsValueTypeError(false);\r\n            setValueTypeErrorMsg('');\r\n        } else {\r\n            setIsValueTypeError(true);\r\n            setValueTypeErrorMsg('Value type is required');\r\n        }\r\n    };\r\n\r\n    const validateTextLength = (arr) => {\r\n        let value = arr\r\n        if (value < \"65535\" && value > \"0\") {\r\n            setIsTextLengthError(false);\r\n            setTextLengthErrorMsg('');\r\n        } else {\r\n            setIsTextLengthError(true);\r\n            setTextLengthErrorMsg('Length must be between 0 - 65535');\r\n        }\r\n    }\r\n\r\n    const validateSection = (arr) => {\r\n        let value = arr;\r\n        if (value) {\r\n            setIsSectionError(false);\r\n            setSectionErrorMsg('');\r\n        } else {\r\n            setIsSectionError(true);\r\n            setSectionErrorMsg('Section Value is Required');\r\n        }\r\n    };\r\n\r\n\r\n    const validateDefaultValue = (arr) => {\r\n\r\n        let value = arr;\r\n        if (value) {\r\n            setIsDefaultValueError(false);\r\n            setDefaultValueErrorMsg('');\r\n\r\n        } else {\r\n            setIsDefaultValueError(true);\r\n            setDefaultValueErrorMsg('Default Value is required');\r\n        }\r\n    };\r\n\r\n    const validateDefaultValueList = (arr) => {\r\n        // let value = arr;\r\n        const { name, value } = arr.target\r\n        if (value) {\r\n            setIsDefaultValueError(false);\r\n            setDefaultValueErrorMsg('');\r\n        } else {\r\n            setIsDefaultValueError(true);\r\n            setDefaultValueErrorMsg('Value List is required');\r\n        }\r\n    }\r\n\r\n    const validateValueList = (arr) => {\r\n        let value = arr;\r\n        if (value) {\r\n            setIsValueListError(false);\r\n            setValueListErrorMsg('');\r\n        } else {\r\n            setIsValueListError(true);\r\n            setValueListErrorMsg('Value List is required');\r\n        }\r\n    };\r\n\r\n\r\n    const handleSwitchIsRequired = (e: any) => {\r\n        const { name, checked } = e.target;\r\n\r\n        setV1({\r\n            ...v1,\r\n            \"isRequired\": checked//value === \"on\" ? true : false\r\n        });\r\n    }\r\n\r\n    const handleSwitchAllowInSearch = (e: any) => {\r\n        const { name, checked } = e.target;\r\n\r\n        setV1({\r\n            ...v1,\r\n            \"allowInSearch\": checked//value === \"on\" ? true : false\r\n        });\r\n    }\r\n\r\n    const handleSwitchAllowInFilter = (e: any) => {\r\n        const { name, checked } = e.target;\r\n\r\n        setV1({\r\n            ...v1,\r\n            \"allowInFilter\": checked//value === \"on\" ? true : false\r\n        });\r\n    }\r\n\r\n    const handleSwitchAllowIncompleteProfile = (e: any) => {\r\n        const { name, checked } = e.target;\r\n\r\n        setV1({\r\n            ...v1,\r\n            allowIncompleteProfile: checked//value === \"on\" ? true : false\r\n        });\r\n\r\n    }\r\n\r\n    const handleSwitchAllowInPreferences = (e: any) => {\r\n        const { name, checked } = e.target;\r\n\r\n        setV1({\r\n            ...v1,\r\n            \"allowInPreferences\": checked//value === \"on\" ? true : false\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const validateForm = (e: any) => {\r\n        e.preventDefault();\r\n        var flag = true;\r\n        if (!v1.name) {\r\n            setIsNameError(true);\r\n            setNameErrorMsg('Custom field name is required');\r\n            flag = false;\r\n        } else {\r\n            setIsNameError(false);\r\n            setNameErrorMsg('');\r\n        }\r\n        if (!v1.displayName) {\r\n            setIsDisplayNameError(true);\r\n            setDisplayNameErrorMsg('Custom field display Name is required');\r\n            flag = false;\r\n        } else {\r\n            setIsDisplayNameError(false);\r\n            setDisplayNameErrorMsg('');\r\n        }\r\n        if (!v1.mappedFieldName) {\r\n            setIsMappedFieldNameError(true);\r\n            setMappedFieldNameErrorMsg('Mapped field name is required');\r\n            flag = false;\r\n        } else {\r\n            setIsMappedFieldNameError(false);\r\n            setMappedFieldNameErrorMsg('');\r\n        }\r\n        // if (!v1.description) {\r\n        //     setIsDescriptionError(true);\r\n        //     setDescriptionErrorMsg('Custom Description Title is required');\r\n        //     flag = false;\r\n        // } else {\r\n        //     setIsDescriptionError(false);\r\n        //     setDescriptionErrorMsg('');\r\n        //     flag = true;\r\n        // }\r\n        if (!v1.valueTypeId) {\r\n            setIsValueTypeError(true);\r\n            setValueTypeErrorMsg('Custom value type is required');\r\n            flag = false;\r\n        } else {\r\n            setIsValueTypeError(false);\r\n            setValueTypeErrorMsg('');\r\n            if (v1.valueTypeId == 1) {\r\n                if (!v1.textLength) {\r\n                    setIsTextLengthError(true);\r\n                    setTextLengthErrorMsg('Text length is required');\r\n                    flag = false;\r\n                } else {\r\n                    setIsTextLengthError(false);\r\n                    setTextLengthErrorMsg('');\r\n                }\r\n\r\n            } else if (v1.valueTypeId == 3 || v1.valueTypeId == 10) {\r\n                if (v1.valueList && v1.valueList.length == 0) {\r\n                    setIsValueListError(true);\r\n                    setValueListErrorMsg('Value list is required');\r\n                    flag = false;\r\n                } else {\r\n                    setIsValueListError(false);\r\n                    setValueListErrorMsg('');\r\n                }\r\n            }\r\n            // else {\r\n            //     flag = true;\r\n            // }\r\n            // flag = true;\r\n        }\r\n        // if (!v1.defaultValue) {\r\n        //     setIsDefaultValueError(true);\r\n        //     setDefaultValueErrorMsg('Custom value type is required');\r\n        //     flag = false;\r\n        // } else {\r\n        //     setIsDefaultValueError(false);\r\n        //     setDefaultValueErrorMsg('');\r\n        //     flag = true;\r\n        // }\r\n\r\n        if (v1.allowIncompleteProfile == true) {\r\n            if (!v1.completeprofilesectioname) {\r\n                setIsSectionError(true);\r\n                setSectionErrorMsg(' Section is required');\r\n                flag = false;\r\n            } else {\r\n                setIsSectionError(false);\r\n                setSectionErrorMsg('');\r\n            }\r\n        }\r\n        // if (!v1.valueList) {\r\n        //     setIsValueListError(true);\r\n        //     setValueListErrorMsg('Custom value type is required');\r\n        //     flag = false;\r\n        // } else {\r\n        //     setIsValueListError(false);\r\n        //     setValueListErrorMsg('');\r\n        //     flag = true;\r\n        // }\r\n        return flag;\r\n    };\r\n\r\n    const handleDescriptionChange = (dateVal: string) => {\r\n        setV1({ ...v1, \"description\": dateVal });\r\n    }\r\n\r\n    const onFileChange = (e: any) => {\r\n        const file = e.target.files[0];\r\n        const name = e.target.name;\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = () => {\r\n            setImage(reader.result.toString());\r\n            setV1({\r\n                ...v1,\r\n                [name]: reader.result.toString()\r\n            });\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const onImageChange = (e: any) => {\r\n        const { name, value } = e.target;\r\n        setV1({\r\n            ...v1,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleIsDeleteDialog = async () => {\r\n        const token = localStorage.getItem('SessionToken');\r\n        const refreshToken = localStorage.getItem('RefreshToken');\r\n        let obj = {\r\n            id: v1.id,\r\n            mappedFieldName: v1.mappedFieldName\r\n        };\r\n        const res = await APIservice.httpPost(\r\n            '/api/admin/manageCustomFields/removeCustomfields',\r\n            obj,\r\n            token,\r\n            refreshToken\r\n        );\r\n        if (res && res.status === 200) {\r\n            toast.error(res.recordList, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored'\r\n            });\r\n        }\r\n        setIsDel(false);\r\n        getdata(page * limit, limit);\r\n    };\r\n\r\n    const saveCustomField = async (e: any, isSend: boolean) => {\r\n        if (arrayDefaultValue && Array.isArray(arrayDefaultValue) && v1.valueTypeId == 10) {\r\n            arrayDefaultValue = arrayDefaultValue.join(';');\r\n            v1.defaultValue = arrayDefaultValue;\r\n        }\r\n        v1.defaultValue = v1.defaultValue ? v1.defaultValue : null;\r\n        v1.valueList = arrayValueList ? arrayValueList : null\r\n        var flag = validateForm(e);\r\n        if (flag) {\r\n            try {\r\n                // if (arrayDefaultValue && Array.isArray(arrayDefaultValue) && v1.valueTypeId == 10) {\r\n                //     arrayDefaultValue = arrayDefaultValue.join(';');\r\n                //     v1.defaultValue = arrayDefaultValue;\r\n                // }\r\n                // v1.defaultValue = v1.defaultValue ? v1.defaultValue : null;\r\n                // v1.valueList = arrayValueList ? arrayValueList : null\r\n                if (v1.id) {\r\n                    const token = localStorage.getItem('SessionToken');\r\n                    const refreshToken = localStorage.getItem('RefreshToken');\r\n                    let val = v1;\r\n                    v1.isRequired = v1.isRequired == 1 ? true : false;\r\n                    v1.allowInSearch = v1.allowInSearch == 1 ? true : false;\r\n                    v1.allowInFilter = v1.allowInFilter == 1 ? true : false;\r\n                    v1.allowIncompleteProfile = v1.allowIncompleteProfile == 1 ? true : false;\r\n                    v1.allowInPreferences = v1.allowInPreferences == 1 ? true : false;\r\n                    v1.isActive = v1.isActive == 1 ? true : false;\r\n                    v1.isDelete = v1.isDelete == 1 ? true : false;\r\n                    const res = await APIservice.httpPost(\r\n                        '/api/admin/manageCustomFields/insertUpdateCustomField',\r\n                        val,\r\n                        token,\r\n                        refreshToken\r\n                    );\r\n                    if (res && res.status == 200) {\r\n                        setIsOpen(false);\r\n                        getdata(page * limit, limit);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 203) {\r\n                        setIsMappedFieldNameError(true);\r\n                        setMappedFieldNameErrorMsg('Field already exists!');\r\n                    } else if (res.status == 404) {\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                } else {\r\n                    const token = localStorage.getItem('SessionToken');\r\n                    const refreshToken = localStorage.getItem('RefreshToken');\r\n                    // v1.valueList = arrayValueList\r\n                    let val = v1;\r\n                    // val = {\r\n                    //     startIndex: startIndex,\r\n                    //     fetchRecord: fetchRecord,\r\n                    //     firstName: searchInput ? searchInput : ''\r\n                    //   };\r\n\r\n                    const res = await APIservice.httpPost(\r\n                        '/api/admin/manageCustomFields/insertUpdateCustomField',\r\n                        val,\r\n                        token,\r\n                        refreshToken\r\n                    );\r\n                    if (res && res.status == 200) {\r\n                        setPage(0);\r\n                        setIsOpen(false);\r\n                        getdata(0, limit);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 203) {\r\n                        setIsMappedFieldNameError(true);\r\n                        setMappedFieldNameErrorMsg('Field already exists!');\r\n                    } else if (res.status == 500) {\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        setIsOpen(false);\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                }\r\n                setIsLoading(false);\r\n            } catch (error: any) {\r\n                setIsLoading(false);\r\n                setIsOpen(false);\r\n                toast.error(error, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }\r\n\r\n        setV1({\r\n            ...v1,\r\n            \"valueList\": arrayValueList\r\n        });\r\n        console.log(v1)\r\n    };\r\n\r\n    const handleClickVisible = (element: any) => {\r\n        let id = element?.id;\r\n        navigate(`/admin/manage-custom-fields/view/${id}`);\r\n    };\r\n\r\n    // const truncateDescription = (description) => {\r\n    //     debugger\r\n    //     if (!description) return '-';\r\n    //     const words = description.split(' ');\r\n    //     if (words.length <= 4) return description;\r\n    //     return words.slice(0, 4).join(' ') + '...';\r\n    //   };\r\n\r\n    return (\r\n        <div>\r\n            <ToastContainer\r\n                style={{ top: '8.5%', right: '0%' }}\r\n                // position=\"top-right\"\r\n                autoClose={6000}\r\n                hideProgressBar={true}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n            <Helmet>\r\n                <title>Manage Custom Field</title>\r\n            </Helmet>\r\n            <PageTitleWrapper>\r\n                <Box p={1}>\r\n                    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                        <Grid item>\r\n                            <Stack alignItems=\"left\" justifyContent=\"space-between\">\r\n                                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                                    <Link to=\"/admin\" style={{ display: 'flex', color: 'black' }}>\r\n                                        <HomeIcon />\r\n                                    </Link>\r\n                                    <Typography\r\n                                        variant=\"subtitle2\"\r\n                                        color=\"inherit\"\r\n                                        fontWeight=\"bold\"\r\n                                    >\r\n                                        Manage Custom Fields\r\n                                    </Typography>\r\n                                </Breadcrumbs>\r\n                            </Stack>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Grid container spacing={1.5}>\r\n                                {isWritePermission ? <>\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            className=\"buttonLarge\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickOpenAdd}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <AddTwoToneIcon fontSize=\"small\" />\r\n                                            Create Custom Field\r\n                                        </Button>\r\n                                        <Button\r\n                                            className=\"button\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickOpenAdd}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <AddTwoToneIcon fontSize=\"small\" />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <FormControl\r\n                                            sx={{ mt: { xs: 0.3, md: 0.3, lg: 0.3, sm: 0.3 } }}\r\n                                        >\r\n                                            <TextField\r\n                                                // size=\"small\"\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Search\"\r\n                                                variant=\"outlined\"\r\n                                                name=\"searchString\"\r\n                                                value={search}\r\n                                                onChange={(e) => searchData(e)}\r\n                                                size=\"small\"\r\n                                                InputProps={{\r\n                                                    startAdornment: (\r\n                                                        <InputAdornment position=\"start\">\r\n                                                            <SearchIcon />\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </> : <></>}\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </PageTitleWrapper>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"stretch\"\r\n                    spacing={3}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <>\r\n                            <Card className=\"religioncard\">\r\n                                <div>\r\n                                    {isloading ? (\r\n                                        <Loader1 title=\"Loading...\" />\r\n                                    ) : (\r\n                                        <>\r\n                                            <Divider />\r\n                                            {customFields && customFields.length > 0 ? (\r\n                                                <>\r\n                                                    <TableContainer className=\"religiontableContainer\">\r\n                                                        <Table stickyHeader>\r\n                                                            <TableHead>\r\n                                                                <TableRow>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Sr. No\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Name\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            DisplayName\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Mapped Field Name\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                            className='description'\r\n                                                                        >\r\n                                                                            Description\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    {/* <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Value Type\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Default Value\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Value List\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            IsRequired\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Allow In Search\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Allow In Filter\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Allow In CompleteProfile\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Allow In Preference\r\n                                                                        </Typography>\r\n                                                                    </TableCell> */}\r\n\r\n                                                                    <TableCell align=\"right\" colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Actions\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            </TableHead>\r\n                                                            <TableBody>\r\n                                                                {customFields.map((arr: any, index: number) => {\r\n                                                                    return (\r\n                                                                        <TableRow hover key={arr.id}>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                >\r\n                                                                                    {page * limit + index + 1}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.name}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.displayName}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.mappedFieldName}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize', width: '250px' }}\r\n                                                                                >\r\n                                                                                    {arr.description ? arr.description : '-'}\r\n                                                                                    {/* {truncateDescription(arr.description)} */}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            {/* <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.valueTypeName}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.defaultValue ? arr.defaultValue : '-'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n\r\n                                                                                    {arr.valueList ? arr.valueList.join(',') : '-'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.isRequired ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.allowInSearch ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.allowInFilter ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {(arr.allowIncompleteProfile == 1) ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.allowInPreferences ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell> */}\r\n\r\n\r\n                                                                            <TableCell colSpan={3}\r\n                                                                                align=\"right\" style={{ whiteSpace: 'nowrap' }}\r\n                                                                            >\r\n                                                                                <Tooltip title=\"View\" arrow>\r\n                                                                                    <IconButton\r\n                                                                                        sx={{\r\n                                                                                            '&:hover': {\r\n                                                                                                background:\r\n                                                                                                    theme.colors.error.lighter\r\n                                                                                            },\r\n                                                                                            color: theme.palette.primary.main\r\n                                                                                        }}\r\n                                                                                        color=\"inherit\"\r\n                                                                                        size=\"small\"\r\n                                                                                        onClick={(e) => {\r\n                                                                                            handleClickVisible(arr);\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <VisibilityIcon />\r\n                                                                                    </IconButton>\r\n                                                                                </Tooltip>\r\n                                                                                {isEditPermission ?\r\n                                                                                    <>\r\n\r\n                                                                                        <Tooltip\r\n                                                                                            title={\r\n                                                                                                arr.isActive === 0\r\n                                                                                                    ? 'Inactive'\r\n                                                                                                    : 'Active'\r\n                                                                                            }\r\n                                                                                            arrow\r\n                                                                                        >\r\n                                                                                            <Switch\r\n                                                                                                disabled={credentail?.email === \"demo@admin.com\"}\r\n                                                                                                checked={\r\n                                                                                                    arr.isActive === 0 ? false : true\r\n                                                                                                }\r\n                                                                                                onClick={(e) =>\r\n                                                                                                    handleSwitch(arr.id, arr.isActive)\r\n                                                                                                }\r\n                                                                                                inputProps={{\r\n                                                                                                    'aria-label': 'controlled'\r\n                                                                                                }}\r\n                                                                                            />\r\n                                                                                        </Tooltip>\r\n                                                                                        <Tooltip title=\"Edit\" arrow>\r\n                                                                                            <IconButton\r\n                                                                                                disabled={credentail?.email === \"demo@admin.com\"}\r\n                                                                                                sx={{\r\n                                                                                                    '&:hover': {\r\n                                                                                                        background:\r\n                                                                                                            theme.colors.primary.lighter\r\n                                                                                                    },\r\n                                                                                                    color: theme.palette.primary.main\r\n                                                                                                }}\r\n                                                                                                color=\"inherit\"\r\n                                                                                                size=\"small\"\r\n                                                                                                onClick={(e) =>\r\n                                                                                                    handleClickOpenEdit(arr)\r\n                                                                                                }\r\n                                                                                                data-toggle=\"modal\"\r\n                                                                                                data-target=\"#exampleModal\"\r\n                                                                                            >\r\n                                                                                                <EditTwoToneIcon fontSize=\"small\" />\r\n                                                                                            </IconButton>\r\n                                                                                        </Tooltip>\r\n\r\n                                                                                    </> : <></>}\r\n                                                                                {isDeletePermission ?\r\n                                                                                    <Tooltip title=\"Delete\" arrow>\r\n                                                                                        <IconButton\r\n                                                                                            disabled={credentail?.email === \"demo@admin.com\"}\r\n                                                                                            sx={{\r\n                                                                                                '&:hover': { background: theme.colors.error.lighter },\r\n                                                                                                color: theme.palette.primary.main\r\n                                                                                            }}\r\n                                                                                            color=\"inherit\" size=\"small\"\r\n                                                                                            onClick={(e) => handleOpenDeleteDialog(arr.id, arr.mappedFieldName)}>\r\n                                                                                            <DeleteIcon fontSize=\"small\" />\r\n                                                                                        </IconButton>\r\n                                                                                    </Tooltip>\r\n                                                                                    : <></>}\r\n\r\n                                                                            </TableCell>\r\n                                                                        </TableRow>\r\n                                                                    );\r\n                                                                })}\r\n                                                            </TableBody>\r\n                                                        </Table>\r\n                                                    </TableContainer>\r\n                                                    <Box p={2}>\r\n                                                        <TablePagination\r\n                                                            component=\"div\"\r\n                                                            count={row}\r\n                                                            onPageChange={handlePageChange}\r\n                                                            onRowsPerPageChange={handleLimitChange}\r\n                                                            page={page}\r\n                                                            rowsPerPage={limit}\r\n                                                            rowsPerPageOptions={[10, 20, 30, 40]}\r\n                                                        />\r\n                                                    </Box>\r\n                                                </>\r\n                                            ) : (\r\n                                                <Paper\r\n                                                    sx={{\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'center',\r\n                                                        alignItems: 'center',\r\n                                                        textAlign: 'center',\r\n                                                        verticalAlign: 'middle',\r\n                                                        boxShadow: 'none'\r\n                                                    }}\r\n                                                    className=\"religioncard\"\r\n                                                >\r\n                                                    <Typography variant=\"h5\" paragraph>\r\n                                                        Data not Found\r\n                                                    </Typography>\r\n                                                </Paper>\r\n                                            )}\r\n                                            <div>\r\n                                                <Dialog\r\n                                                    open={ischeck}\r\n                                                    onClose={handleClose}\r\n                                                    fullWidth\r\n                                                    maxWidth=\"xs\"\r\n                                                >\r\n                                                    <DialogTitle\r\n                                                        sx={{\r\n                                                            m: 0,\r\n                                                            p: 2,\r\n                                                            fontSize: '20px',\r\n                                                            fontWeight: 'bolder'\r\n                                                        }}\r\n                                                    >\r\n                                                        {v1.status === 0 ? 'Inactive' : 'Active'}\r\n                                                    </DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText\r\n                                                            style={{\r\n                                                                fontSize: '1rem',\r\n                                                                letterSpacing: '0.00938em'\r\n                                                            }}\r\n                                                        >\r\n                                                            {v1.status === 0\r\n                                                                ? 'Are you sure you want to Active?'\r\n                                                                : 'Are you sure you want to Inactive?'}\r\n                                                            <Typography sx={{ fontSize: '12px', fontWeight: 'bold', color: '#ff0000', paddingTop: '12px' }}>\r\n                                                                {/* Note: Changes will reflect to app after restart it. */}\r\n                                                                Note: The changes will be visible in the app once restart it. Please restart the App  to see the updates.\r\n                                                            </Typography>\r\n                                                        </DialogContentText>\r\n                                                    </DialogContent>\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={handleClose} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                                        <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={handleSwitchCheck} variant=\"outlined\" style={{ marginRight: '10px' }}>Yes</Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </div>\r\n\r\n                                            <div>\r\n                                                <Dialog open={isOpen} onClose={handleClose} fullWidth maxWidth=\"md\">\r\n                                                    <DialogTitle\r\n                                                        sx={{ m: 0, p: 2, fontSize: '18px', fontWeight: 'bold' }}\r\n                                                    >\r\n                                                        {v1.id ? 'Edit Custom Field' : 'Add Custom Field'}\r\n                                                        <IconButton\r\n                                                            aria-label=\"close\"\r\n                                                            onClick={handleCloseCustomNotificationDialog}\r\n                                                            sx={{\r\n                                                                position: 'absolute',\r\n                                                                right: 13,\r\n                                                                top: 13,\r\n                                                                color: (theme) => theme.palette.grey[500]\r\n                                                            }}\r\n                                                        >\r\n                                                            <CloseIcon />\r\n                                                        </IconButton>\r\n                                                    </DialogTitle>\r\n\r\n                                                    <DialogContent dividers>\r\n                                                        <Row>\r\n                                                            <Col xs={12} md={6}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"name\"\r\n                                                                    label=\"Custom Field Name\"\r\n                                                                    type=\"text\"\r\n                                                                    fullWidth\r\n                                                                    variant=\"outlined\"\r\n                                                                    name=\"name\"\r\n                                                                    value={v1.name}\r\n                                                                    onChange={(arr) => {\r\n                                                                        handleFieldNameChange(arr);\r\n                                                                        validateName(arr);\r\n                                                                    }}\r\n                                                                    required={true}\r\n                                                                    disabled={v1.id ? true : false}\r\n                                                                />\r\n                                                                <FormHelperText\r\n                                                                    style={{ color: 'red', height: '22px' }}\r\n                                                                >\r\n                                                                    {isNameError && NameErrorMsg}\r\n                                                                </FormHelperText>\r\n\r\n\r\n                                                            </Col>\r\n                                                            <Col xs={12} md={6}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"displayName\"\r\n                                                                    label=\"Custom Field Disply Name\"\r\n                                                                    type=\"text\"\r\n                                                                    fullWidth\r\n                                                                    variant=\"outlined\"\r\n                                                                    name=\"displayName\"\r\n                                                                    value={v1.displayName}\r\n                                                                    onChange={(arr) => {\r\n                                                                        handleInputChange(arr);\r\n                                                                        validateDisplayName(arr);\r\n                                                                    }}\r\n                                                                    required={true}\r\n                                                                />\r\n                                                                <FormHelperText\r\n                                                                    style={{ color: 'red', height: '22px' }}\r\n                                                                >\r\n                                                                    {isDisplayNameError && DisplayNameErrorMsg}\r\n                                                                </FormHelperText>\r\n\r\n                                                            </Col>\r\n\r\n                                                        </Row>\r\n                                                        <TextField\r\n                                                            id=\"outlined-multiline-static\"\r\n                                                            label=\"Description\"\r\n                                                            multiline\r\n                                                            fullWidth\r\n                                                            rows={4}\r\n                                                            defaultValue=\"\"\r\n                                                            value={v1.description}\r\n                                                            name=\"description\"\r\n                                                            onChange={(arr) => {\r\n                                                                handleInputChange(arr);\r\n                                                                validateDescription(arr);\r\n                                                            }}\r\n                                                            required={true}\r\n                                                        />\r\n                                                        <FormHelperText\r\n                                                            style={{ color: 'red', height: '22px' }}\r\n                                                        >\r\n                                                            {isDescriptionError && DescriptionErrorMsg}\r\n                                                        </FormHelperText>\r\n                                                        <Row>\r\n                                                            <Col xs={12} md={6}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"mappedFieldName\"\r\n                                                                    label=\"Mapped Field Name\"\r\n                                                                    type=\"text\"\r\n                                                                    fullWidth\r\n                                                                    variant=\"outlined\"\r\n                                                                    name=\"mappedFieldName\"\r\n                                                                    value={v1.mappedFieldName}\r\n                                                                    onChange={(arr) => {\r\n                                                                        handleMappedFieldNameChange(arr);\r\n                                                                        validateMappedFieldName(arr);\r\n                                                                    }}\r\n                                                                    required={true}\r\n                                                                    disabled={v1.id ? true : false}\r\n                                                                />\r\n                                                                <FormHelperText\r\n                                                                    style={{ color: 'red', height: '22px' }}\r\n                                                                >\r\n                                                                    {isMappedFieldNameError && MappedFieldNameErrorMsg}\r\n                                                                </FormHelperText>\r\n                                                            </Col>\r\n                                                            <Col xs={12} md={6}>\r\n                                                                <FormControl\r\n                                                                    sx={{ width: { lg: 265, md: 265, sm: 265, xs: 200 } }}\r\n                                                                >\r\n                                                                    <InputLabel id=\"demo-multiple-name-label\">\r\n                                                                        Value Type\r\n                                                                    </InputLabel>\r\n                                                                    <Select\r\n                                                                        labelId=\"demo-multiple-name-label\"\r\n                                                                        id=\"demo-multiple-name\"\r\n                                                                        multiple={false}\r\n                                                                        name=\"valueTypeId\"\r\n                                                                        value={v1.valueTypeId || []}\r\n                                                                        onChange={(arr) => {\r\n                                                                            handleInputChange(arr);\r\n                                                                            validateValueType(arr);\r\n                                                                        }}\r\n                                                                        label=\"Value Type\"\r\n                                                                        MenuProps={MenuProps}\r\n                                                                        required={true}\r\n                                                                        disabled={v1.id ? true : false}\r\n                                                                    >\r\n                                                                        {valueType.map((arr: any) => (\r\n                                                                            <MenuItem key={arr.id} value={arr.id}>\r\n                                                                                {arr.valueTypeName}\r\n                                                                            </MenuItem>\r\n                                                                        ))}\r\n                                                                    </Select>\r\n                                                                </FormControl>\r\n                                                                <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                                                    {isValueTypeError && ValueTypeErrorMsg}\r\n                                                                </FormHelperText>\r\n                                                            </Col>\r\n\r\n\r\n\r\n\r\n                                                        </Row>\r\n                                                        {/* </Grid> */}\r\n                                                        {/* <Grid item xs={12}> */}\r\n\r\n                                                        {/* <TextField\r\n                                                            id=\"outlined-multiline-static\"\r\n                                                            label=\"Description\"\r\n                                                            multiline\r\n                                                            fullWidth\r\n                                                            rows={4}\r\n                                                            defaultValue=\"\"\r\n                                                            value={v1.description}\r\n                                                            name=\"description\"\r\n                                                            onChange={(arr) => {\r\n                                                                handleInputChange(arr);\r\n                                                                validateDescription(arr);\r\n                                                            }}\r\n                                                            required={true}\r\n                                                        />\r\n                                                        <FormHelperText\r\n                                                            style={{ color: 'red', height: '22px' }}\r\n                                                        >\r\n                                                            {isDescriptionError && DescriptionErrorMsg}\r\n                                                        </FormHelperText> */}\r\n                                                        <Row>\r\n\r\n                                                            {/* <Col xs={12} md={6}>\r\n                                                                <FormControl\r\n                                                                    sx={{ width: { lg: 265, md: 265, sm: 265, xs: 200 } }}\r\n                                                                >\r\n                                                                    <InputLabel id=\"demo-multiple-name-label\">\r\n                                                                        Value Type\r\n                                                                    </InputLabel>\r\n                                                                    <Select\r\n                                                                        labelId=\"demo-multiple-name-label\"\r\n                                                                        id=\"demo-multiple-name\"\r\n                                                                        multiple={false}\r\n                                                                        name=\"valueTypeId\"\r\n                                                                        value={v1.valueTypeId || []}\r\n                                                                        onChange={(arr) => {\r\n                                                                            handleInputChange(arr);\r\n                                                                            validateValueType(arr);\r\n                                                                        }}\r\n                                                                        label=\"Value Type\"\r\n                                                                        MenuProps={MenuProps}\r\n                                                                        required={true}\r\n                                                                        disabled={v1.id ? true : false}\r\n                                                                    >\r\n                                                                        {valueType.map((arr: any) => (\r\n                                                                            <MenuItem key={arr.id} value={arr.id}>\r\n                                                                                {arr.valueTypeName}\r\n                                                                            </MenuItem>\r\n                                                                        ))}\r\n                                                                    </Select>\r\n                                                                </FormControl>\r\n                                                                <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                                                    {isValueTypeError && ValueTypeErrorMsg}\r\n                                                                </FormHelperText>\r\n\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"name\"\r\n                                                                    label=\"Default Value\"\r\n                                                                    type=\"text\"\r\n                                                                    fullWidth\r\n                                                                    variant=\"outlined\"\r\n                                                                    name=\"defaultValue\"\r\n                                                                    value={v1.defaultValue}\r\n                                                                    onChange={(arr) => {\r\n                                                                        handleInputChange(arr);\r\n                                                                        validateDefaultValue(arr);\r\n                                                                    }}\r\n                                                                    required={true}\r\n                                                                />\r\n                                                                <FormHelperText\r\n                                                                    style={{ color: 'red', height: '22px' }}\r\n                                                                >\r\n                                                                    {isDefaultValueError && DefaultValueErrorMsg}\r\n                                                                </FormHelperText>\r\n                                                            </Col> */}\r\n                                                            {/* <Col xs={12} md={6}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"displayName\"\r\n                                                                    label=\"Value List\"\r\n                                                                    type=\"text\"\r\n                                                                    fullWidth\r\n                                                                    variant=\"outlined\"\r\n                                                                    name=\"name\"\r\n                                                                    value={v1.valueList}\r\n                                                                    onChange={(arr) => {\r\n                                                                        handleInputChange(arr);\r\n                                                                        validateValueList(arr);\r\n                                                                    }}\r\n                                                                    required={true}\r\n                                                                />\r\n                                                                <FormHelperText\r\n                                                                    style={{ color: 'red', height: '22px' }}\r\n                                                                >\r\n                                                                    {isValueListError && ValueListErrorMsg}\r\n                                                                </FormHelperText>\r\n                                                            </Col> */}\r\n\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col xs={12} md={6}>\r\n                                                                {(v1.valueTypeId !== 10) ?\r\n                                                                    <>\r\n\r\n                                                                        <TextField\r\n                                                                            autoFocus\r\n                                                                            margin=\"dense\"\r\n                                                                            id=\"defaultValue\"\r\n                                                                            label=\"Default Value\"\r\n                                                                            type=\"text\"\r\n                                                                            fullWidth\r\n                                                                            variant=\"outlined\"\r\n                                                                            name=\"defaultValue\"\r\n                                                                            value={v1.defaultValue}\r\n                                                                            onChange={(arr) => {\r\n                                                                                handleInputChange(arr);\r\n                                                                                validateDefaultValue(arr);\r\n                                                                            }}\r\n                                                                            required={true}\r\n                                                                        />\r\n                                                                        <FormHelperText\r\n                                                                            style={{ color: 'red', height: '22px' }}\r\n                                                                        >\r\n                                                                            {isDefaultValueError && DefaultValueErrorMsg}\r\n                                                                        </FormHelperText>\r\n\r\n                                                                    </> :\r\n                                                                    <>\r\n\r\n                                                                        <Row>\r\n                                                                            <FormGroup style={{ display: \"flex\" }}>\r\n                                                                                <TextField\r\n                                                                                    autoFocus\r\n                                                                                    margin=\"dense\"\r\n                                                                                    id=\"defaultValuet\"\r\n                                                                                    label=\"Default Value\"\r\n                                                                                    type=\"text\"\r\n                                                                                    fullWidth\r\n                                                                                    variant=\"outlined\"\r\n                                                                                    name=\"singleValueOfDefaultValue\"\r\n                                                                                    value={singleValueOfDefaultValue}\r\n                                                                                    onChange={(arr) => {\r\n                                                                                        arr.target.value = arr.target.value === \"\" ? null : arr.target.value\r\n                                                                                        handleDefaultValueInputChange(arr);\r\n                                                                                        // handleInputChange(arr);\r\n                                                                                        validateDefaultValueList(arr);\r\n                                                                                    }}\r\n                                                                                /><Button\r\n                                                                                    sx={{ mt: 0.5 }}\r\n                                                                                    variant=\"outlined\"\r\n                                                                                    onClick={handleAddDefaultValue}\r\n                                                                                    style={{ border: \"0px\", borderLeft: '1px solid #ced4da', borderRadius: '0px', margin: '13px 0px 8px -68px' }}>\r\n                                                                                    Add\r\n                                                                                </Button>\r\n                                                                            </FormGroup>\r\n                                                                            <FormHelperText\r\n                                                                                style={{ color: 'red', height: '22px' }}\r\n                                                                            >\r\n                                                                                {isDefaultValueError && DefaultValueErrorMsg}\r\n                                                                            </FormHelperText>\r\n                                                                        </Row>\r\n                                                                        {/* <Col lg={1}\r\n                                                                        md={1}\r\n                                                                        sm={1}\r\n                                                                        xs={1}>\r\n                                                                        <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '8px' }}>\r\n                                                                            <Button\r\n                                                                                sx={{ mt: 0.5 }}\r\n                                                                                variant=\"outlined\"\r\n                                                                                onClick={handleAddValueList}\r\n                                                                            >\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </div>\r\n                                                                    </Col> */}\r\n                                                                        {(arrayDefaultValue && arrayDefaultValue.length > 0) && <Card style={card}>\r\n                                                                            <Row>\r\n\r\n                                                                                {arrayDefaultValue.map((value, index) => (\r\n                                                                                    <Col\r\n                                                                                        lg={3}\r\n                                                                                        md={4}\r\n                                                                                        sm={6}\r\n                                                                                        xs={12}\r\n                                                                                        key={index}\r\n                                                                                        label={value}\r\n                                                                                        style={{\r\n                                                                                            // paddingLeft: '4%',\r\n                                                                                            // paddingTop: '1.4%',\r\n                                                                                            paddingBottom: '1.4%'\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <Chip\r\n                                                                                            key={index}\r\n                                                                                            label={value}\r\n                                                                                            onDelete={(e) => {\r\n                                                                                                handleDeleteDefaultValue(index);\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            {value}\r\n                                                                                        </Chip>\r\n                                                                                    </Col>\r\n                                                                                ))}\r\n                                                                            </Row></Card>}\r\n\r\n                                                                        {/* <Divider /> */}\r\n                                                                        {/* </Card> */}\r\n                                                                    </>\r\n                                                                }\r\n                                                            </Col>\r\n\r\n\r\n                                                            {(v1.valueTypeId == 3 || v1.valueTypeId == 10) &&\r\n                                                                <>\r\n                                                                    <Col xs={12} md={6}>\r\n                                                                        {/* <Card sx={{ my: 1 }} style={{ height: 'auto' }}>\r\n                                                                <CardHeader title=\"Value List\" /> */}\r\n                                                                        <Row >\r\n                                                                            {/* <InputLabel id=\"value List\" style={{ color: '#223354', fontWeight: '700', fontSize: '15px', margin: '13px 0px' }}>\r\n                                                                        Value List\r\n                                                                    </InputLabel> */}\r\n\r\n\r\n                                                                            <FormGroup style={{ display: \"flex\" }}>\r\n                                                                                <TextField\r\n                                                                                    autoFocus\r\n                                                                                    margin=\"dense\"\r\n                                                                                    id=\"value List\"\r\n                                                                                    label=\"Value List\"\r\n                                                                                    type=\"text\"\r\n                                                                                    fullWidth\r\n                                                                                    variant=\"outlined\"\r\n                                                                                    name=\"singleValueOfValueList\"\r\n                                                                                    value={singleValueOfValueList}\r\n                                                                                    onChange={(arr) => {\r\n                                                                                        handleValueListInputChange(arr);\r\n                                                                                        validateValueList(arr);\r\n                                                                                    }}\r\n                                                                                /><Button\r\n                                                                                    sx={{ mt: 0.5 }}\r\n                                                                                    variant=\"outlined\"\r\n                                                                                    onClick={handleAddValueList}\r\n                                                                                    style={{ border: \"0px\", borderLeft: '1px solid #ced4da', borderRadius: '0px', margin: '13px 0px 8px -68px' }}>\r\n                                                                                    Add\r\n                                                                                </Button>\r\n                                                                            </FormGroup>\r\n                                                                            <FormHelperText\r\n                                                                                style={{ color: 'red', height: '22px' }}\r\n                                                                            >\r\n                                                                                {isValueListError && ValueListErrorMsg}\r\n                                                                            </FormHelperText>\r\n\r\n                                                                            {/* <Col lg={2}\r\n                                                                        md={2}\r\n                                                                        sm={2}\r\n                                                                        xs={2}>\r\n                                                                        <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '8px' }}>\r\n                                                                            <Button\r\n                                                                                sx={{ mt: 0.5 }}\r\n                                                                                variant=\"outlined\"\r\n                                                                                onClick={handleAddValueList}\r\n                                                                            >\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </div>\r\n                                                                    </Col> */}\r\n                                                                        </Row>\r\n                                                                        {(arrayValueList && arrayValueList.length > 0) && <Card style={card}>\r\n                                                                            <Row>\r\n\r\n                                                                                {arrayValueList.map((value, index) => (\r\n                                                                                    <Col\r\n                                                                                        lg={3}\r\n                                                                                        md={4}\r\n                                                                                        sm={6}\r\n                                                                                        xs={12}\r\n                                                                                        key={index}\r\n                                                                                        label={value}\r\n                                                                                        style={{\r\n                                                                                            // paddingLeft: '4%',\r\n                                                                                            // paddingTop: '1.4%',\r\n                                                                                            paddingBottom: '1.4%'\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        <Chip\r\n                                                                                            key={index}\r\n                                                                                            label={value}\r\n                                                                                            onDelete={(e) => {\r\n                                                                                                handleDeleteValueList(index);\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            {value}\r\n                                                                                        </Chip>\r\n                                                                                    </Col>\r\n                                                                                ))}\r\n                                                                            </Row></Card>}\r\n                                                                        {/* <Divider /> */}\r\n                                                                        {/* </Card> */} </Col>\r\n                                                                </>\r\n                                                            }\r\n\r\n\r\n\r\n                                                            {(v1.valueTypeId == 1) &&\r\n                                                                <Col xs={12} md={6}>\r\n                                                                    <TextField\r\n                                                                        autoFocus\r\n                                                                        margin=\"dense\"\r\n                                                                        id=\"textLength\"\r\n                                                                        label=\"Text length\"\r\n                                                                        type=\"number\"\r\n                                                                        fullWidth\r\n                                                                        variant=\"outlined\"\r\n                                                                        name=\"textLength\"\r\n                                                                        value={v1.textLength}\r\n                                                                        onChange={(arr) => {\r\n                                                                            const inputValue = parseInt(arr.target.value);\r\n                                                                            handleInputChange(arr);\r\n                                                                            validateTextLength(inputValue);\r\n\r\n\r\n                                                                        }}\r\n                                                                        inputProps={{ maxLength: 3 }}\r\n                                                                        disabled={v1.id ? true : false}\r\n                                                                    />\r\n                                                                    <FormHelperText\r\n                                                                        style={{ color: 'red', height: '22px' }}\r\n                                                                    >\r\n                                                                        {isTextLengthError && TextLengthErrorMsg}\r\n                                                                    </FormHelperText>\r\n                                                                </Col>}\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col xs={12} md={6}>\r\n                                                                <Typography gutterBottom variant=\"h6\">\r\n                                                                    <Grid container>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box display=\"flex\" alignItems=\"flex-start\">\r\n                                                                                Is Required {' '}\r\n                                                                            </Box>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box>\r\n                                                                                <Switch\r\n                                                                                    checked={\r\n                                                                                        (v1.isRequired) ? true : false\r\n                                                                                    }\r\n                                                                                    onClick={(e) =>\r\n                                                                                        handleSwitchIsRequired(e)\r\n                                                                                    }\r\n                                                                                    inputProps={{\r\n                                                                                        'aria-label': 'controlled'\r\n                                                                                    }}\r\n                                                                                />                                                                   </Box>\r\n                                                                        </Grid>\r\n                                                                    </Grid>\r\n                                                                </Typography>\r\n                                                                {/* Is Required <Switch\r\n                                                                    checked={\r\n                                                                        (v1.isRequired) ? true : false\r\n                                                                    }\r\n                                                                    onClick={(e) =>\r\n                                                                        handleSwitchIsRequired(e)\r\n                                                                    }\r\n                                                                    inputProps={{\r\n                                                                        'aria-label': 'controlled'\r\n                                                                    }}\r\n                                                                /> */}\r\n                                                            </Col>\r\n                                                            <Col xs={12} md={6}>\r\n                                                                <Typography gutterBottom variant=\"h6\">\r\n                                                                    <Grid container>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box display=\"flex\" alignItems=\"flex-start\">\r\n                                                                                Allow In Search {' '}\r\n                                                                            </Box>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box>\r\n                                                                                <Switch\r\n                                                                                    checked={\r\n                                                                                        (v1.allowInSearch) ? true : false\r\n                                                                                    }\r\n                                                                                    onClick={(e) =>\r\n                                                                                        handleSwitchAllowInSearch(e)\r\n                                                                                    }\r\n                                                                                    inputProps={{\r\n                                                                                        'aria-label': 'controlled'\r\n                                                                                    }}\r\n                                                                                />                                                                   </Box>\r\n                                                                        </Grid>\r\n                                                                    </Grid>\r\n                                                                </Typography>\r\n                                                                {/* Allow In Search <Switch\r\n                                                                    checked={\r\n                                                                        (v1.allowInSearch) ? true : false\r\n                                                                    }\r\n                                                                    onClick={(e) =>\r\n                                                                        handleSwitchAllowInSearch(e)\r\n                                                                    }\r\n                                                                    inputProps={{\r\n                                                                        'aria-label': 'controlled'\r\n                                                                    }}\r\n                                                                /> */}\r\n\r\n                                                            </Col>\r\n                                                            <Col xs={12} md={6}>\r\n\r\n                                                                <Typography gutterBottom variant=\"h6\">\r\n                                                                    <Grid container>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box display=\"flex\" alignItems=\"flex-start\">\r\n                                                                                Allow In Filter {' '}\r\n                                                                            </Box>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box>\r\n                                                                                <Switch\r\n                                                                                    checked={\r\n                                                                                        (v1.allowInFilter) ? true : false\r\n                                                                                    }\r\n                                                                                    onClick={(e) =>\r\n                                                                                        handleSwitchAllowInFilter(e)\r\n                                                                                    }\r\n                                                                                    inputProps={{\r\n                                                                                        'aria-label': 'controlled'\r\n                                                                                    }}\r\n                                                                                />                                                                    </Box>\r\n                                                                        </Grid>\r\n                                                                    </Grid>\r\n                                                                </Typography>\r\n                                                                {/* Allow In Filter <Switch\r\n                                                                    checked={\r\n                                                                        (v1.allowInFilter) ? true : false\r\n                                                                    }\r\n                                                                    onClick={(e) =>\r\n                                                                        handleSwitchAllowInFilter(e)\r\n                                                                    }\r\n                                                                    inputProps={{\r\n                                                                        'aria-label': 'controlled'\r\n                                                                    }}\r\n                                                                /> */}\r\n                                                            </Col>\r\n\r\n                                                            <Col xs={12} md={6}>\r\n\r\n                                                                <Typography gutterBottom variant=\"h6\">\r\n                                                                    <Grid container>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box display=\"flex\" alignItems=\"flex-start\">\r\n                                                                                Allow In Preferences {' '}\r\n                                                                            </Box>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box>\r\n                                                                                <Switch\r\n                                                                                    checked={\r\n                                                                                        (v1.allowInPreferences) ? true : false\r\n                                                                                    }\r\n                                                                                    onClick={(e) =>\r\n                                                                                        handleSwitchAllowInPreferences(e)\r\n                                                                                    }\r\n                                                                                    inputProps={{\r\n                                                                                        'aria-label': 'controlled'\r\n                                                                                    }}\r\n                                                                                />                                                                     </Box>\r\n                                                                        </Grid>\r\n                                                                    </Grid>\r\n                                                                </Typography>\r\n                                                                {/* Allow In Preferences <Switch\r\n                                                                    checked={\r\n                                                                        (v1.allowInPreferences) ? true : false\r\n                                                                    }\r\n                                                                    onClick={(e) =>\r\n                                                                        handleSwitchAllowInPreferences(e)\r\n                                                                    }\r\n                                                                    inputProps={{\r\n                                                                        'aria-label': 'controlled'\r\n                                                                    }}\r\n                                                                /> */}\r\n                                                            </Col>\r\n                                                            <Col xs={12} md={6}>\r\n\r\n\r\n                                                                <Typography gutterBottom variant=\"h6\">\r\n                                                                    <Grid container>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box display=\"flex\" alignItems=\"flex-start\">\r\n                                                                                Allow In CompleteProfile{' '}\r\n                                                                            </Box>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={6} sm={6} md={6}>\r\n                                                                            <Box>\r\n                                                                                <Switch\r\n                                                                                    checked={\r\n                                                                                        (v1.allowIncompleteProfile) ? true : false\r\n                                                                                    }\r\n                                                                                    onClick={(e) =>\r\n                                                                                        handleSwitchAllowIncompleteProfile(e)\r\n                                                                                    }\r\n                                                                                    inputProps={{\r\n                                                                                        'aria-label': 'controlled'\r\n                                                                                    }}\r\n                                                                                />                                                                            </Box>\r\n                                                                        </Grid>\r\n                                                                    </Grid>\r\n                                                                </Typography>\r\n                                                                {/* Allow In CompleteProfile <Switch\r\n                                                                        checked={\r\n                                                                            (v1.allowIncompleteProfile) ? true : false\r\n                                                                        }\r\n                                                                        onClick={(e) =>\r\n                                                                            handleSwitchAllowIncompleteProfile(e)\r\n                                                                        }\r\n                                                                        inputProps={{\r\n                                                                            'aria-label': 'controlled'\r\n                                                                        }}\r\n                                                                    /> */}\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        {/* <Row style={{ marginTop: \"20px\" }}>\r\n\r\n\r\n\r\n                                                        </Row> */}\r\n                                                        {(v1.allowIncompleteProfile == true) &&\r\n                                                            <Row style={{ marginTop: \"5px\" }}>\r\n                                                                <Col xs={12} md={6}>\r\n                                                                    <FormControl\r\n                                                                        sx={{ width: { lg: 265, md: 265, sm: 265, xs: 200 } }}\r\n                                                                    >\r\n                                                                        <InputLabel id=\"demo-multiple-name-label\">\r\n                                                                            Section\r\n                                                                        </InputLabel>\r\n                                                                        <Select\r\n                                                                            labelId=\"demo-multiple-name-label\"\r\n                                                                            id=\"demo-multiple-name\"\r\n                                                                            multiple={false}\r\n                                                                            name=\"completeprofilesectioname\"\r\n                                                                            value={v1.completeprofilesectioname || []}\r\n                                                                            onChange={(arr) => {\r\n                                                                                handleInputChange(arr);\r\n                                                                                validateSection(arr);\r\n                                                                            }}\r\n                                                                            label=\"Value Type\"\r\n                                                                            MenuProps={MenuProps}\r\n                                                                            required={true}\r\n                                                                        >\r\n                                                                            {profileSection.map((arr: any) => (\r\n                                                                                <MenuItem key={arr.value} value={arr.value}>\r\n                                                                                    {arr.value}\r\n                                                                                </MenuItem>\r\n                                                                            ))}\r\n                                                                        </Select>\r\n                                                                    </FormControl>\r\n                                                                    <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                                                        {isSectionError && SectionErrorMsg}\r\n                                                                    </FormHelperText>\r\n                                                                </Col>\r\n                                                            </Row>}\r\n                                                    </DialogContent>\r\n                                                    <Box\r\n                                                        sx={{\r\n                                                            display: 'flex',\r\n                                                            justifyContent: 'space-between',\r\n                                                            p: '8px'\r\n                                                        }}\r\n                                                    >\r\n                                                        {/* <FormHelperText\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                                height: '22px',\r\n                                                                margin: 'none',\r\n                                                                padding: '8px'\r\n                                                            }}\r\n                                                        >\r\n                                                        </FormHelperText>  */}\r\n                                                        <Typography sx={{ fontSize: '14px', fontWeight: 'bold', color: '#ff0000', padding: '10px' }}>\r\n                                                            {/* Note: Changes will reflect to app after restart it. */}\r\n                                                            Note: The changes will be visible in the app once restart it. Please restart the App  to see the updates.\r\n                                                        </Typography>\r\n                                                        <div>\r\n                                                            <Button onClick={handleCloseCustomNotificationDialog} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                                            <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => { saveCustomField(e, false) }} variant=\"outlined\" style={{ marginRight: '10px' }}>Save</Button>\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                </Dialog>\r\n                                            </div>\r\n                                            <div>\r\n                                                <Dialog open={isDel} onClose={handleClose} fullWidth maxWidth=\"xs\">\r\n                                                    <DialogTitle\r\n                                                        sx={{ m: 0, p: 2, fontSize: '20px', fontWeight: 'bolder' }}\r\n                                                    >\r\n                                                        Delete\r\n                                                    </DialogTitle>\r\n                                                    <DialogContent>\r\n                                                        <DialogContentText\r\n                                                            style={{ fontSize: '1rem', letterSpacing: '0.00938em' }}\r\n                                                        >\r\n                                                            Are you sure you want to Delete?\r\n                                                            <Typography sx={{ fontSize: '12px', fontWeight: 'bold', color: '#ff0000', paddingTop: '12px' }}>\r\n                                                                {/* Note: Changes will reflect to app after restart it. */}\r\n                                                                Note: The changes will be visible in the app once restart it. Please restart the App  to see the updates.\r\n                                                            </Typography>\r\n                                                        </DialogContentText>\r\n                                                    </DialogContent>\r\n                                                    <DialogActions>\r\n                                                        <Button onClick={handleClose} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                                        <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={handleIsDeleteDialog} variant=\"outlined\" style={{ marginRight: '10px' }}>Yes</Button>\r\n                                                    </DialogActions>\r\n                                                </Dialog>\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                        </>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ManageCustomFields;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'AddTwoTone');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\n}), 'Search');\nexports.default = _default;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableHeadUtilityClass(slot) {\n  return generateUtilityClass('MuiTableHead', slot);\n}\nconst tableHeadClasses = generateUtilityClasses('MuiTableHead', ['root']);\nexport default tableHeadClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableHeadUtilityClass } from './tableHeadClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableHeadUtilityClass, classes);\n};\nconst TableHeadRoot = styled('thead', {\n  name: 'MuiTableHead',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-header-group'\n});\nconst tablelvl2 = {\n  variant: 'head'\n};\nconst defaultComponent = 'thead';\nconst TableHead = /*#__PURE__*/React.forwardRef(function TableHead(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableHead'\n  });\n  const {\n      className,\n      component = defaultComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableHeadRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableHead;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableUtilityClass(slot) {\n  return generateUtilityClass('MuiTable', slot);\n}\nconst tableClasses = generateUtilityClasses('MuiTable', ['root', 'stickyHeader']);\nexport default tableClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"padding\", \"size\", \"stickyHeader\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport TableContext from './TableContext';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableUtilityClass } from './tableClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    stickyHeader\n  } = ownerState;\n  const slots = {\n    root: ['root', stickyHeader && 'stickyHeader']\n  };\n  return composeClasses(slots, getTableUtilityClass, classes);\n};\nconst TableRoot = styled('table', {\n  name: 'MuiTable',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.stickyHeader && styles.stickyHeader];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'table',\n  width: '100%',\n  borderCollapse: 'collapse',\n  borderSpacing: 0,\n  '& caption': _extends({}, theme.typography.body2, {\n    padding: theme.spacing(2),\n    color: (theme.vars || theme).palette.text.secondary,\n    textAlign: 'left',\n    captionSide: 'bottom'\n  })\n}, ownerState.stickyHeader && {\n  borderCollapse: 'separate'\n}));\nconst defaultComponent = 'table';\nconst Table = /*#__PURE__*/React.forwardRef(function Table(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTable'\n  });\n  const {\n      className,\n      component = defaultComponent,\n      padding = 'normal',\n      size = 'medium',\n      stickyHeader = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component,\n    padding,\n    size,\n    stickyHeader\n  });\n  const classes = useUtilityClasses(ownerState);\n  const table = React.useMemo(() => ({\n    padding,\n    size,\n    stickyHeader\n  }), [padding, size, stickyHeader]);\n  return /*#__PURE__*/_jsx(TableContext.Provider, {\n    value: table,\n    children: /*#__PURE__*/_jsx(TableRoot, _extends({\n      as: component,\n      role: component === defaultComponent ? null : 'table',\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   * @default 'normal'\n   */\n  padding: PropTypes.oneOf(['checkbox', 'none', 'normal']),\n  /**\n   * Allows TableCells to inherit size of the Table.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * Set the header sticky.\n   *\n   * ⚠️ It doesn't work with IE11.\n   * @default false\n   */\n  stickyHeader: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Table;"],"names":["PageTitle","styled","Box","_ref","theme","spacing","_ref2","children","_jsx","className","Container","maxWidth","props","title","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","Dialog","padding","height","initialState","id","name","displayName","mappedFieldName","description","valueTypeId","isRequired","allowInSearch","allowInFilter","allowIncompleteProfile","allowInPreferences","defaultValue","valueList","textLength","completeprofilesectioname","ManageCustomFields","card","boxShadow","borderRadius","marginBottom","navigate","useNavigate","useTheme","page","setPage","useState","limit","setLimit","row","setRow","v1","setV1","React","singleValueOfValueList","setSingleValueOfValueList","arrayValueList","setArrayValueList","singleValueOfDefaultValue","setSingleValueOfDefaultValue","arrayDefaultValue","setArrayDefaultValue","isOpen","setIsOpen","isloading","setIsLoading","ischeck","setIsCheck","search","setSearch","isDel","setIsDel","customFields","setCustomFields","valueType","setValueType","isNameError","setIsNameError","NameErrorMsg","setNameErrorMsg","isDisplayNameError","setIsDisplayNameError","DisplayNameErrorMsg","setDisplayNameErrorMsg","isMappedFieldNameError","setIsMappedFieldNameError","MappedFieldNameErrorMsg","setMappedFieldNameErrorMsg","isDescriptionError","setIsDescriptionError","DescriptionErrorMsg","setDescriptionErrorMsg","isValueTypeError","setIsValueTypeError","ValueTypeErrorMsg","setValueTypeErrorMsg","isDefaultValueError","setIsDefaultValueError","DefaultValueErrorMsg","setDefaultValueErrorMsg","isValueListError","setIsValueListError","ValueListErrorMsg","setValueListErrorMsg","isTextLengthError","setIsTextLengthError","TextLengthErrorMsg","setTextLengthErrorMsg","isSectionError","setIsSectionError","SectionErrorMsg","setSectionErrorMsg","image","setImage","credentail","setCredentail","isReadPermission","setIsReadPermission","isWritePermission","setIsWritePermission","isEditPermission","setIsEditPermission","isDeletePermission","setIsDeletePermission","useEffect","cred","JSON","parse","localStorage","getItem","roleId","ind","pagePermissions","findIndex","c","isAddPermission","loadData","async","getdata","getValueType","startIndex","fetchRecord","token","refreshToken","obj","isActive","searchString","res","APIservice","httpPost","recordList","totalRecords","i","length","join","status","clear","toast","error","message","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","position","POSITION","TOP_RIGHT","console","log","reg","RegExp","handleClickOpenAdd","handleClose","handleCloseCustomNotificationDialog","handleInputChange","arr","value","target","mediumRegex","saveCustomField","e","isSend","Array","isArray","flag","preventDefault","validateForm","val","isDelete","_jsxs","ToastContainer","top","right","newestOnTop","rtl","pauseOnFocusLoss","Helmet","PageTitleWrapper","p","Grid","container","justifyContent","alignItems","item","Stack","Breadcrumbs","Link","to","display","color","HomeIcon","Typography","variant","fontWeight","_Fragment","Button","sx","mt","xs","md","onClick","size","AddTwoToneIcon","fontSize","FormControl","lg","sm","TextField","label","onChange","searchData","InputProps","startAdornment","InputAdornment","SearchIcon","direction","Card","Loader1","Divider","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","colSpan","noWrap","align","TableBody","map","index","hover","gutterBottom","textTransform","whiteSpace","Tooltip","arrow","IconButton","background","colors","lighter","palette","primary","main","element","handleClickVisible","VisibilityIcon","Switch","disabled","email","checked","handleSwitch","inputProps","valueArray","includes","split","defaultValueArray","handleClickOpenEdit","EditTwoToneIcon","handleOpenDeleteDialog","arr1","packageDurationId","DeleteIcon","TablePagination","component","count","onPageChange","handlePageChange","event","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","Paper","textAlign","verticalAlign","paragraph","open","onClose","fullWidth","DialogTitle","m","DialogContent","DialogContentText","letterSpacing","paddingTop","DialogActions","marginRight","grey","CloseIcon","dividers","Row","Col","autoFocus","margin","type","replace","charAt","toLowerCase","slice","handleFieldNameChange","validateName","required","FormHelperText","validateDisplayName","multiline","rows","validateDescription","handleMappedFieldNameChange","test","validateMappedFieldName","InputLabel","Select","labelId","multiple","validateValueType","MenuItem","valueTypeName","validateDefaultValue","FormGroup","handleDefaultValueInputChange","validateDefaultValueList","handleAddDefaultValue","trim","push","border","borderLeft","paddingBottom","Chip","onDelete","indexToRemove","filter","_","handleValueListInputChange","validateValueList","handleAddValueList","inputValue","validateTextLength","maxLength","handleSwitchIsRequired","handleSwitchAllowInSearch","handleSwitchAllowInFilter","handleSwitchAllowInPreferences","handleSwitchAllowIncompleteProfile","marginTop","validateSection","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getTableHeadUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableHeadRoot","overridesResolver","styles","root","tablelvl2","defaultComponent","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","Tablelvl2Context","Provider","as","clsx","role","getTableUtilityClass","TableRoot","borderCollapse","borderSpacing","typography","body2","vars","text","secondary","captionSide","slots","table","TableContext"],"sourceRoot":""}