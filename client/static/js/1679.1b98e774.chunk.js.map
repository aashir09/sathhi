{"version":3,"file":"static/js/1679.1b98e774.chunk.js","mappings":"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","sources":["components/PageTitleWrapper/index.tsx","content/region/regionLoader.tsx","models/country.ts","models/state.ts","models/districts.ts","models/cities.ts","content/region/Region.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/CloudDownload.js","../node_modules/@mui/icons-material/CloudUpload.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js"],"sourcesContent":["import { FC, ReactNode } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Container, styled } from '@mui/material';\r\n\r\nconst PageTitle = styled(Box)(\r\n  ({ theme }) => `\r\n        padding: ${theme.spacing(1)};\r\n`\r\n);\r\n\r\ninterface PageTitleWrapperProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nconst PageTitleWrapper: FC<PageTitleWrapperProps> = ({ children }) => {\r\n  return (\r\n    <PageTitle className=\"MuiPageTitle-wrapper\">\r\n      <Container maxWidth=\"lg\">{children}</Container>\r\n    </PageTitle>\r\n  );\r\n};\r\n\r\nPageTitleWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default PageTitleWrapper;\r\n","import React from 'react';\r\nimport './regionLoader.css';\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst RegionLoader = (props: Props) => {\r\n  const { title } = props;\r\n  return (\r\n    // <div className=\"loader\">\r\n    //     <img className=\"img\" src={loader} alt=\"\" />\r\n    //     <span>{title}</span>\r\n    // </div>\r\n    <div className=\"region-container\">\r\n      <div className=\"loading-region-spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegionLoader;","export class Country {\r\n    id: number\r\n    \r\n    name: string\r\n    \r\n    isoCode: string\r\n    \r\n    isoCode3: string\r\n    \r\n    dialCode: string\r\n\r\n    isDefult: boolean\r\n    \r\n    isActive: boolean\r\n    \r\n    isDelete: boolean\r\n    \r\n    createdDate: Date\r\n    \r\n    modifiedDate: Date\r\n\r\n}","export class States {\r\n    id: number\r\n    \r\n    countryId: number\r\n    \r\n    name: string\r\n    \r\n    code: string\r\n    \r\n    isActive: boolean\r\n    \r\n    isDelete: boolean\r\n    \r\n    createdDate: Date\r\n    \r\n    modifiedDate: Date\r\n    \r\n    countryName: string\r\n}","export class Districts {\r\n    id: number\r\n\r\n    stateId: number\r\n\r\n    name: string\r\n\r\n    isActive: boolean\r\n\r\n    isDelete: boolean\r\n\r\n    createdDate: Date\r\n\r\n    modifiedDate: Date\r\n    \r\n    countryId: number\r\n    \r\n    countryName: string\r\n    \r\n    stateName: string\r\n\r\n}","export class Cities {\r\n    id: number\r\n    \r\n    districtId: number\r\n    \r\n    name: string\r\n    \r\n    pincode: string\r\n    \r\n    isActive: boolean\r\n    \r\n    isDelete: boolean\r\n    \r\n    createdDate: Date\r\n    \r\n    modifiedDate: Date\r\n    \r\n    countryId: number\r\n    \r\n    countryName: string\r\n    \r\n    stateId: number\r\n    \r\n    stateName: string\r\n    \r\n    districtName: string\r\n    \r\n}","import { Helmet } from 'react-helmet-async';\r\nimport PageTitleWrapper from '../../components/PageTitleWrapper';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Box, Breadcrumbs, Button, Card, Checkbox, Container, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormGroup, FormHelperText, Grid, IconButton, InputLabel, MenuItem, Select, Stack, Switch, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, TextField, Tooltip, Typography, styled, useTheme } from '@mui/material';\r\nimport { useNavigate } from 'react-router';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { Link } from 'react-router-dom';\r\nimport { ChangeEvent, useEffect, useRef, useState } from 'react';\r\nimport LoaderSmallCard from '../dashboards/loaderDashboard';\r\nimport RegionLoader from './regionLoader';\r\nimport '../../content/smallScreen.css';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport APIservice from 'src/utils/APIservice';\r\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\r\nimport { Country } from 'src/models/country';\r\nimport { States } from 'src/models/state';\r\nimport { Districts } from 'src/models/districts';\r\nimport { Cities } from 'src/models/cities';\r\nimport CloudDownloadIcon from '@mui/icons-material/CloudDownload';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport { CSVLink } from 'react-csv';\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2)\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1)\r\n    },\r\n    '& .MuiPaper-root': {\r\n        minHeight: '500px'\r\n    },\r\n}));\r\n\r\nexport interface DialogTitleProps {\r\n    id: string;\r\n    children?: React.ReactNode;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction BootstrapDialogTitle(props: DialogTitleProps) {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle\r\n            sx={{ m: 0, p: 2, fontSize: '18px', fontWeight: 'bold' }}\r\n            {...other}\r\n        >\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 13,\r\n                        top: 13,\r\n                        color: (theme) => theme.palette.grey[500]\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    );\r\n}\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nconst initialCountryState = {\r\n    id: 0,\r\n    name: \"\",\r\n    isoCode: \"\",\r\n    isoCode3: \"\",\r\n    dialCode: \"\",\r\n    isActive: true,\r\n    isDelete: false,\r\n    createdDate: null,\r\n    modifiedDate: null,\r\n    isDefult: false\r\n}\r\nconst initialState = {\r\n    id: 0,\r\n    name: \"\",\r\n    countryId: 0,\r\n    code: null,\r\n    isActive: true,\r\n    isDelete: false,\r\n    createdDate: null,\r\n    modifiedDate: null,\r\n    countryName: null\r\n}\r\nconst initialDistrictState = {\r\n    id: 0,\r\n    stateId: 0,\r\n    name: \"\",\r\n    isActive: true,\r\n    isDelete: false,\r\n    createdDate: null,\r\n    modifiedDate: null,\r\n    countryId: 0,\r\n    countryName: null,\r\n    stateName: null\r\n}\r\nconst initialCityState = {\r\n    id: 0,\r\n    districtId: 0,\r\n    name: \"\",\r\n    pincode: '',\r\n    isActive: true,\r\n    isDelete: false,\r\n    createdDate: null,\r\n    modifiedDate: null,\r\n    countryId: 0,\r\n    countryName: null,\r\n    stateId: 0,\r\n    stateName: null,\r\n    districtName: null\r\n}\r\n\r\nconst Region = () => {\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n    const [isLoadingCountry, setIsLoadingCountry] = useState<boolean>(false);\r\n    const [page, setPage] = useState<number>(0);\r\n    const [limit, setLimit] = useState<number>(10);\r\n    const [row, setRow] = useState<number>(10);\r\n    const [countries, setCountries] = useState<Country[]>([]);\r\n    const [allCountries, setAllCountries] = useState<Country[]>([]);\r\n    let [selectCountry, setSelectCountry] = useState<Country>()\r\n    const [country, setCountry] = useState<Country>(initialCountryState);\r\n    const [isOpenCountry, setIsOpenCountry] = useState<boolean>(false);\r\n    const [isNameError, setIsNameError] = useState<boolean>(false);\r\n    const [nameErrorMsg, setNameErrorMsg] = useState<string>(\"\");\r\n    const [isIsoCodeError, setIsoCodeError] = useState<boolean>(false);\r\n    const [isoCodeErrorMsg, setIsoCodeErrorMsg] = useState<string>(\"\");\r\n    const [isIsoCode3Error, setIsoCode3Error] = useState<boolean>(false);\r\n    const [isoCode3ErrorMsg, setIsoCode3ErrorMsg] = useState<string>(\"\");\r\n    const [isCountryDialCodeError, setCountryDialCodeError] = useState<boolean>(false);\r\n    const [CountryDialCodeErrorMsg, setCountryDialCodeErrorMsg] = useState<string>(\"\");\r\n    const [isCheckCountry, setIsCheckCountry] = useState(false);\r\n\r\n    const [isLoadingState, setIsLoadingState] = useState<boolean>(false);\r\n    const [pageState, setPageState] = useState<number>(0);\r\n    const [limitState, setLimitState] = useState<number>(10);\r\n    const [rowState, setRowState] = useState<number>(10);\r\n    const [states, setStates] = useState<States[]>([]);\r\n    const [allStates, setAllStates] = useState<States[]>([]);\r\n    let [selectState, setSelectState] = useState<States>();\r\n    const [state, setState] = useState<States>(initialState);\r\n    const [isOpenState, setIsOpenState] = useState<boolean>(false);\r\n    const [isStateNameError, setIsStateNameError] = useState<boolean>(false);\r\n    const [stateNameErrorMsg, setStateNameErrorMsg] = useState<string>(\"\");\r\n    const [isCountryIdError, setIsCountryIdError] = useState<boolean>(false);\r\n    const [countryIdErrorMsg, setCountryIdErrorMsg] = useState<string>(\"\");\r\n    const [isCheckState, setIsCheckState] = useState(false);\r\n\r\n    const [isLoadingDistrict, setIsLoadingDistrict] = useState<boolean>(false);\r\n    const [pageDistrict, setPageDistrict] = useState<number>(0);\r\n    const [limitDistrict, setLimitDistrict] = useState<number>(10);\r\n    const [rowDistrict, setRowDistrict] = useState<number>(10);\r\n    const [districts, setDistricts] = useState<Districts[]>([]);\r\n    const [allDistricts, setAllDistricts] = useState<Districts[]>([]);\r\n    let [selectDistrict, setSelectDistrict] = useState<Districts>();\r\n    const [district, setDistrict] = useState<Districts>(initialDistrictState);\r\n    const [isOpenDistrict, setIsOpenDistrict] = useState<boolean>(false);\r\n    const [isDistrictNameError, setIsDistrictNameError] = useState<boolean>(false);\r\n    const [districtNameErrorMsg, setDistrictNameErrorMsg] = useState<string>(\"\");\r\n    const [isStateIdError, setIsStateIdError] = useState<boolean>(false);\r\n    const [stateIdErrorMsg, setStateIdErrorMsg] = useState<string>(\"\");\r\n    const [isCheckDistrict, setIsCheckDistrict] = useState(false);\r\n\r\n    const [isLoadingCity, setIsLoadingCity] = useState<boolean>(false);\r\n    const [pageCity, setPageCity] = useState<number>(0);\r\n    const [limitCity, setLimitCity] = useState<number>(10);\r\n    const [rowCity, setRowCity] = useState<number>(10);\r\n    const [cities, setCities] = useState<Cities[]>([]);\r\n    let [selectCity, setSelectCity] = useState<Cities>();\r\n    const [city, setCity] = useState<Cities>(initialCityState);\r\n    const [isOpenCity, setIsOpenCity] = useState<boolean>(false);\r\n    const [isCityNameError, setIsCityNameError] = useState<boolean>(false);\r\n    const [cityNameErrorMsg, setCityNameErrorMsg] = useState<string>(\"\");\r\n    const [isPincodeError, setIsPincodeError] = useState<boolean>(false);\r\n    const [pincodeErrorMsg, setPincodeErrorMsg] = useState<string>(\"\");\r\n    const [isDistrictIdError, setIsDistrictIdError] = useState<boolean>(false);\r\n    const [districtIdErrorMsg, setDistrictIdErrorMsg] = useState<string>(\"\");\r\n    const [isCheckCity, setIsCheckCity] = useState(false);\r\n    let [credentail, setCredentail] = useState<any>();\r\n\r\n    const [downloadSample, setDownloadSample] = useState<any[]>([]);\r\n    const [regionData, setRegionData] = useState<any[]>([]);\r\n\r\n    const inputFile: any = useRef(null);\r\n    const fileReader = new FileReader();\r\n\r\n    const [isReadPermission, setIsReadPermission] = useState(true);\r\n    const [isWritePermission, setIsWritePermission] = useState(true);\r\n    const [isEditPermission, setIsEditPermission] = useState(true);\r\n    const [isDeletePermission, setIsDeletePermission] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let cred = JSON.parse(localStorage.getItem('Credentials'));\r\n        setCredentail(cred);\r\n        if (cred) {\r\n            if (cred.roleId != 1) {\r\n                let ind = cred.pagePermissions.findIndex((c: any) => c.title === \"Block Users\");\r\n                if (ind >= 0) {\r\n                    setIsReadPermission(cred.pagePermissions[ind].isReadPermission);\r\n                    setIsWritePermission(cred.pagePermissions[ind].isAddPermission)\r\n                    setIsEditPermission(cred.pagePermissions[ind].isEditPermission);\r\n                    setIsDeletePermission(cred.pagePermissions[ind].isDeletePermission);\r\n\r\n                    if (cred.pagePermissions[ind].isReadPermission)\r\n                        loadData();\r\n                }\r\n            } else {\r\n                loadData();\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n    const loadData = async () => {\r\n\r\n        setSelectCountry(new Country());\r\n        setSelectState(new States());\r\n        setSelectDistrict(new Districts());\r\n        setSelectCity(new Cities());\r\n\r\n        await getCountry(page, limit);\r\n        await getState(pageState, limitState);\r\n        await getDistrict(pageDistrict, limitDistrict);\r\n        await getCity(pageCity, limitCity);\r\n    }\r\n\r\n    //#region Country\r\n    const getCountry = async (startIndex: number, fetchRecord: number) => {\r\n        try {\r\n            setIsLoadingCountry(true);\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let obj = {\r\n                startIndex: startIndex,\r\n                fetchRecord: fetchRecord\r\n            };\r\n            const res = await APIservice.httpPost(\r\n                '/api/admin/region/getCountries',\r\n                obj,\r\n                token,\r\n                refreshToken\r\n            );\r\n            if (res.recordList && res.recordList.length > 0) {\r\n                for (let i = 0; i < res.recordList.length; i++) {\r\n                    res.recordList[i].isActive = res.recordList[i].isActive ? true : false;\r\n                    res.recordList[i].isDelete = res.recordList[i].isDelete ? true : false;\r\n                }\r\n            }\r\n            setCountries(res.recordList);\r\n            setRow(res.totalRecords);\r\n            const res1 = await APIservice.httpPost(\r\n                '/api/admin/region/getCountries',\r\n                {},\r\n                token,\r\n                refreshToken\r\n            );\r\n            setAllCountries(res1.recordList);\r\n            if (res && res.status == 200) {\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n            setIsLoadingCountry(false);\r\n        } catch (error) {\r\n            setIsLoadingCountry(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePageChange = (event: any, newPage: number): void => {\r\n        setPage(newPage);\r\n        getCountry(newPage * limit, limit);\r\n    };\r\n\r\n    const handleLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setLimit(parseInt(event.target.value));\r\n        setPage(0);\r\n        getCountry(0, parseInt(event.target.value));\r\n    };\r\n\r\n    const handleClickOpenCountryDialog = (e: any) => {\r\n        clearCountryError();\r\n        setCountry(initialCountryState);\r\n        setIsOpenCountry(true);\r\n    }\r\n\r\n    const handleClickCloseCountryDialog = () => {\r\n        clearCountryError();\r\n        setCountry(initialCountryState);\r\n        setIsOpenCountry(false);\r\n    }\r\n\r\n    const clearCountryError = () => {\r\n        setIsNameError(false);\r\n        setNameErrorMsg('');\r\n        setIsoCodeError(false);\r\n        setIsoCodeErrorMsg('');\r\n        setIsoCode3Error(false);\r\n        setIsoCode3ErrorMsg('');\r\n        setCountryDialCodeError(false);\r\n        setCountryDialCodeErrorMsg('');\r\n    }\r\n\r\n    const handleInputChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        setCountry({ ...country, [name]: value });\r\n    };\r\n\r\n    const validateName = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsNameError(false);\r\n            setNameErrorMsg('');\r\n        } else {\r\n            setIsNameError(true);\r\n            setNameErrorMsg('Country Name is required');\r\n        }\r\n    };\r\n\r\n    const validateIsoCode = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsoCodeError(false);\r\n            setIsoCodeErrorMsg('');\r\n        } else {\r\n            setIsoCodeError(true);\r\n            setIsoCodeErrorMsg('Country ISO Code is required');\r\n        }\r\n    };\r\n\r\n    const validateIso3Code = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsoCode3Error(false);\r\n            setIsoCode3ErrorMsg('');\r\n        } else {\r\n            setIsoCode3Error(true);\r\n            setIsoCode3ErrorMsg('Country ISO Code is required');\r\n        }\r\n    };\r\n\r\n    const validateCountryDialCode = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setCountryDialCodeError(false);\r\n            setCountryDialCodeErrorMsg('');\r\n        } else {\r\n            setCountryDialCodeError(true);\r\n            setCountryDialCodeErrorMsg('Country Dial Code is required');\r\n        }\r\n    };\r\n\r\n    const validateCountry = () => {\r\n        let flag = true;\r\n        if (country.name) {\r\n            setIsNameError(false);\r\n            setNameErrorMsg('');\r\n        } else {\r\n            flag = false\r\n            setIsNameError(true);\r\n            setNameErrorMsg('Country Name is required');\r\n        }\r\n        if (country.isoCode) {\r\n            setIsoCodeError(false);\r\n            setIsoCodeErrorMsg('');\r\n        } else {\r\n            flag = false\r\n            setIsoCodeError(true);\r\n            setIsoCodeErrorMsg('Country ISO Code is required');\r\n        }\r\n        if (country.isoCode3) {\r\n            setIsoCode3Error(false);\r\n            setIsoCode3ErrorMsg('');\r\n        } else {\r\n            flag = false\r\n            setIsoCode3Error(true);\r\n            setIsoCode3ErrorMsg('Country ISO Code is required');\r\n        }\r\n        if (country.dialCode) {\r\n            setCountryDialCodeError(false);\r\n            setCountryDialCodeErrorMsg('');\r\n        } else {\r\n            flag = false\r\n            setCountryDialCodeError(true);\r\n            setCountryDialCodeErrorMsg('Country Dial Code is required');\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    const savecountry = async (e: any) => {\r\n        e.preventDefault();\r\n        let flag = validateCountry();\r\n        if (flag) {\r\n            try {\r\n                setIsLoadingCountry(true);\r\n                const token = localStorage.getItem('SessionToken');\r\n                const refreshToken = localStorage.getItem('RefreshToken');\r\n                if (country.id) {\r\n                    let res = await APIservice.httpPost('/api/admin/region/updateCountry', country, token, refreshToken);\r\n                    if (res && res.status == 200) {\r\n                        // await getCountry(page, limit);\r\n                        await getCountry(page, limit);\r\n                        await getState(pageState, limitState);\r\n                        await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCity(pageCity, limitCity);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                    handleClickCloseCountryDialog();\r\n                } else {\r\n                    let res = await APIservice.httpPost('/api/admin/region/insertCountry', country, token, refreshToken);\r\n                    if (res && res.status == 200) {\r\n                        // await getCountry(page, limit);\r\n                        await getCountry(page, limit);\r\n                        await getState(pageState, limitState);\r\n                        await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCity(pageCity, limitCity);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                    handleClickCloseCountryDialog();\r\n                }\r\n                setIsLoadingCountry(false);\r\n            } catch (error) {\r\n                setIsLoadingCountry(false);\r\n                toast.error(error, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSwitchCountry = (item: Country) => {\r\n        setCountry(item);\r\n        setIsCheckCountry(true);\r\n    }\r\n\r\n    const handleCloseSwitchCountry = () => {\r\n        setCountry(initialCountryState);\r\n        setIsCheckCountry(false);\r\n    }\r\n\r\n    const handleSwitchCountryCheck = async (e: any) => {\r\n        e.preventDfault();\r\n        try {\r\n            setIsLoadingCountry(true);\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let res = await APIservice.httpPost('/api/admin/region/insertCountry', country, token, refreshToken);\r\n            if (res && res.status == 200) {\r\n                await getCountry(page, limit);\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n            handleCloseSwitchCountry();\r\n            setIsLoadingCountry(false);\r\n        } catch (error) {\r\n            setIsLoadingCountry(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleClickOpenEditCountryDialog = (item: Country) => {\r\n        debugger\r\n        item.isDefult = item.isDefult ? true : false\r\n        clearCountryError();\r\n        setCountry(item);\r\n        setIsOpenCountry(true);\r\n    }\r\n\r\n    const isSelected = (id: number) => (selectCountry && selectCountry?.id === id) ? true : false;\r\n    const handleLoadState = async (e: any, item: Country) => {\r\n        let country = countries;\r\n        let ind = country.findIndex(c => c.id == item.id);\r\n        let _ind = (selectCountry?.id === country[ind].id);\r\n        setSelectState(new States());\r\n        setSelectDistrict(new Districts());\r\n        setSelectCity(new Cities());\r\n        if (_ind) {\r\n            let obj = new Country();\r\n            setSelectCountry(obj);\r\n            await getState(0, limitState);\r\n            await getDistrict(0, limitDistrict);\r\n            await getCity(0, limitCity);\r\n        } else {\r\n            setSelectCountry(country[ind]);\r\n            await getState(0, limitState, country[ind].id);\r\n            await getDistrict(0, limitDistrict, null, country[ind].id);\r\n            await getCity(0, limitCity, null, null, country[ind].id);\r\n        }\r\n    }\r\n    //#endregion Country\r\n\r\n    //#region State\r\n    const getState = async (startIndex: number, fetchRecord: number, countryId?: number) => {\r\n        try {\r\n            setIsLoadingState(true);\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let obj = {\r\n                startIndex: startIndex,\r\n                fetchRecord: fetchRecord,\r\n                countryId: countryId\r\n            };\r\n            const res = await APIservice.httpPost(\r\n                '/api/admin/region/getStates',\r\n                obj,\r\n                token,\r\n                refreshToken\r\n            );\r\n            if (res.recordList && res.recordList.length > 0) {\r\n                for (let i = 0; i < res.recordList.length; i++) {\r\n                    res.recordList[i].isActive = res.recordList[i].isActive ? true : false;\r\n                    res.recordList[i].isDelete = res.recordList[i].isDelete ? true : false;\r\n                }\r\n            }\r\n            setStates(res.recordList);\r\n            setRowState(res.totalRecords);\r\n            // const res1 = await APIservice.httpPost(\r\n            //     '/api/admin/region/getStates',\r\n            //     {},\r\n            //     token,\r\n            //     refreshToken\r\n            // );\r\n            // setAllStates(res1.recordList);\r\n            if (res && res.status == 200) {\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n            setIsLoadingState(false);\r\n        } catch (error) {\r\n            setIsLoadingState(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleStatePageChange = (event: any, newPage: number): void => {\r\n        setPageState(newPage);\r\n        getState(newPage * limitState, limitState);\r\n    };\r\n\r\n    const handleStateLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setLimitState(parseInt(event.target.value));\r\n        setPageState(0);\r\n        getState(0, parseInt(event.target.value));\r\n    };\r\n\r\n    const handleClickOpenStateDialog = (e: any) => {\r\n        clearStateError();\r\n        setState(initialState);\r\n        setIsOpenState(true);\r\n\r\n    }\r\n\r\n    const handleClickCloseStateDialog = () => {\r\n        clearStateError();\r\n        setState(initialState);\r\n        setIsOpenState(false);\r\n    }\r\n\r\n    const clearStateError = () => {\r\n        setIsStateNameError(false);\r\n        setStateNameErrorMsg('');\r\n        setIsCountryIdError(false);\r\n        setCountryIdErrorMsg('');\r\n    }\r\n\r\n    const handleInputStateChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        setState({ ...state, [name]: value });\r\n    };\r\n\r\n    const validateStateName = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsStateNameError(false);\r\n            setStateNameErrorMsg('');\r\n        } else {\r\n            setIsStateNameError(true);\r\n            setStateNameErrorMsg('State Name is required');\r\n        }\r\n    };\r\n\r\n    const validateStateCountryId = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsCountryIdError(false);\r\n            setCountryIdErrorMsg('');\r\n        } else {\r\n            setIsCountryIdError(true);\r\n            setCountryIdErrorMsg('Country is required');\r\n        }\r\n    };\r\n\r\n    const validateState = () => {\r\n        let flag = true;\r\n        if (state.countryId) {\r\n            setIsCountryIdError(false);\r\n            setCountryIdErrorMsg('');\r\n        } else {\r\n            setIsCountryIdError(true);\r\n            setCountryIdErrorMsg('Country is required');\r\n        }\r\n        if (state.name) {\r\n            setIsStateNameError(false);\r\n            setStateNameErrorMsg('');\r\n        } else {\r\n            setIsStateNameError(true);\r\n            setStateNameErrorMsg('State Name is required');\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    const saveState = async (e: any) => {\r\n        e.preventDefault();\r\n        let flag = validateState();\r\n        if (flag) {\r\n            try {\r\n                setIsLoadingState(true);\r\n                const token = localStorage.getItem('SessionToken');\r\n                const refreshToken = localStorage.getItem('RefreshToken');\r\n                if (state.id) {\r\n                    let res = await APIservice.httpPost('/api/admin/region/updateState', state, token, refreshToken);\r\n                    if (res && res.status == 200) {\r\n                        // await getState(pageState, limitState);\r\n\r\n                        await getCountry(page, limit);\r\n                        await getState(pageState, limitState);\r\n                        await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCity(pageCity, limitCity);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                    handleClickCloseStateDialog();\r\n                } else {\r\n                    let res = await APIservice.httpPost('/api/admin/region/insertState', state, token, refreshToken);\r\n                    if (res && res.status == 200) {\r\n                        // await getState(pageState, limitState);\r\n                        await getCountry(page, limit);\r\n                        await getState(pageState, limitState);\r\n                        await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCity(pageCity, limitCity);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                    handleClickCloseStateDialog();\r\n                }\r\n                setIsLoadingState(false);\r\n            } catch (error) {\r\n                setIsLoadingState(false);\r\n                toast.error(error, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSwitchState = (item: States) => {\r\n        setState(item);\r\n        setIsCheckState(true);\r\n    }\r\n\r\n    const handleCloseSwitchState = () => {\r\n        setCountry(initialCountryState);\r\n        setIsCheckCountry(false);\r\n    }\r\n\r\n    const handleSwitchStateCheck = async (e: any) => {\r\n        e.preventDfault();\r\n        try {\r\n            setIsLoadingState(true);\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let res = await APIservice.httpPost('/api/admin/region/activeInactiveState', state, token, refreshToken);\r\n            setIsLoadingState(false);\r\n            if (res && res.status == 200) {\r\n                await getState(pageState, limitState);\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        } catch (error) {\r\n            setIsLoadingState(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleClickOpenEditStateDialog = (item: States) => {\r\n        clearStateError();\r\n        setState(item);\r\n        setIsOpenState(true);\r\n    }\r\n\r\n    const isSelectedState = (id: number) => (selectState && selectState?.id === id) ? true : false;\r\n    const handleLoadDistrict = async (e: any, item: States) => {\r\n        let state = states;\r\n        let ind = state.findIndex(c => c.id == item.id);\r\n        let _ind = (selectState?.id === state[ind].id);\r\n        setSelectDistrict(new Districts());\r\n        setSelectCity(new Cities());\r\n        if (_ind) {\r\n            let obj = new States();\r\n            setSelectState(obj);\r\n            let countryId = selectCountry.id ? selectCountry.id : null;\r\n            await getDistrict(0, limitDistrict, null, countryId);\r\n            await getCity(0, limitCity, null, null, countryId);\r\n        } else {\r\n            setSelectState(state[ind]);\r\n            await getDistrict(0, limitDistrict, state[ind].id);\r\n            await getCity(0, limitCity, null, state[ind].id, null);\r\n        }\r\n    }\r\n    //#endregion State\r\n\r\n    //#region  District\r\n    const getDistrict = async (startIndex: number, fetchRecord: number, stateId?: number, countryId?: number) => {\r\n        try {\r\n            setIsLoadingDistrict(true);\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let obj = {\r\n                startIndex: startIndex,\r\n                fetchRecord: fetchRecord,\r\n                stateId: stateId,\r\n                countryId: countryId\r\n            };\r\n            const res = await APIservice.httpPost(\r\n                '/api/admin/region/getDistricts',\r\n                obj,\r\n                token,\r\n                refreshToken\r\n            );\r\n            if (res.recordList && res.recordList.length > 0) {\r\n                for (let i = 0; i < res.recordList.length; i++) {\r\n                    res.recordList[i].isActive = res.recordList[i].isActive ? true : false;\r\n                    res.recordList[i].isDelete = res.recordList[i].isDelete ? true : false;\r\n                }\r\n            }\r\n            setDistricts(res.recordList);\r\n            setRowDistrict(res.totalRecords);\r\n            // const res1 = await APIservice.httpPost(\r\n            //     '/api/admin/region/getDistricts',\r\n            //     {},\r\n            //     token,\r\n            //     refreshToken\r\n            // );\r\n            // setAllDistricts(res1.recordList);\r\n            if (res && res.status == 200) {\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n            setIsLoadingDistrict(false);\r\n        } catch (error) {\r\n            setIsLoadingDistrict(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleDistrictPageChange = (event: any, newPage: number): void => {\r\n        setPageDistrict(newPage);\r\n        getDistrict(newPage * limitDistrict, limitDistrict);\r\n    };\r\n\r\n    const handleDistrictLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setLimitDistrict(parseInt(event.target.value));\r\n        setPageDistrict(0);\r\n        getDistrict(0, parseInt(event.target.value));\r\n    };\r\n\r\n    const handleClickOpenDistrictDialog = (e: any) => {\r\n        clearDistrictError();\r\n        setDistrict(initialDistrictState);\r\n        setIsOpenDistrict(true);\r\n    }\r\n\r\n    const handleClickCloseDistrictDialog = () => {\r\n        clearDistrictError();\r\n        setDistrict(initialDistrictState);\r\n        setIsOpenDistrict(false);\r\n    }\r\n\r\n    const clearDistrictError = () => {\r\n        setIsDistrictNameError(false);\r\n        setDistrictNameErrorMsg('');\r\n        setIsCountryIdError(false);\r\n        setCountryIdErrorMsg('');\r\n        setIsStateIdError(false);\r\n        setStateIdErrorMsg('');\r\n    }\r\n\r\n    const handleInputDistrictChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        setDistrict({ ...district, [name]: value });\r\n    };\r\n\r\n    const validateDistrictName = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsDistrictNameError(false);\r\n            setDistrictNameErrorMsg('');\r\n        } else {\r\n            setIsDistrictNameError(true);\r\n            setDistrictNameErrorMsg('District Name is required');\r\n        }\r\n    };\r\n\r\n    const validateDistrictStateId = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsStateIdError(false);\r\n            setStateIdErrorMsg('');\r\n        } else {\r\n            setIsStateIdError(true);\r\n            setStateIdErrorMsg('State is required');\r\n        }\r\n    };\r\n\r\n    const validateDistrictCountryId = async (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsCountryIdError(false);\r\n            setCountryIdErrorMsg('');\r\n        } else {\r\n            setIsCountryIdError(true);\r\n            setCountryIdErrorMsg('Country is required');\r\n        }\r\n        try {\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let obj = {\r\n                countryId: value\r\n            };\r\n            const res1 = await APIservice.httpPost(\r\n                '/api/admin/region/getStates',\r\n                obj,\r\n                token,\r\n                refreshToken\r\n            );\r\n            setAllStates(res1.recordList);\r\n        } catch (error) {\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const validateDistrict = () => {\r\n        let flag = true;\r\n        if (district.countryId) {\r\n            setIsCountryIdError(false);\r\n            setCountryIdErrorMsg('');\r\n        } else {\r\n            flag = false;\r\n            setIsCountryIdError(true);\r\n            setCountryIdErrorMsg('Country is required');\r\n        }\r\n        if (district.stateId) {\r\n            setIsStateIdError(false);\r\n            setStateIdErrorMsg('');\r\n        } else {\r\n            setIsStateIdError(true);\r\n            setStateIdErrorMsg('State is required');\r\n        }\r\n        if (district.name) {\r\n            setIsDistrictNameError(false);\r\n            setDistrictNameErrorMsg('');\r\n        } else {\r\n            setIsDistrictNameError(true);\r\n            setDistrictNameErrorMsg('District Name is required');\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    const saveDistrict = async (e: any) => {\r\n        e.preventDefault();\r\n        let flag = validateDistrict();\r\n        if (flag) {\r\n            try {\r\n                setIsLoadingDistrict(true);\r\n                const token = localStorage.getItem('SessionToken');\r\n                const refreshToken = localStorage.getItem('RefreshToken');\r\n                if (district.id) {\r\n                    let res = await APIservice.httpPost('/api/admin/region/updateDistrict', district, token, refreshToken);\r\n                    if (res && res.status == 200) {\r\n                        // await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCountry(page, limit);\r\n                        await getState(pageState, limitState);\r\n                        await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCity(pageCity, limitCity);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                    handleClickCloseDistrictDialog();\r\n                } else {\r\n                    let res = await APIservice.httpPost('/api/admin/region/insertDistrict', district, token, refreshToken);\r\n                    if (res && res.status == 200) {\r\n                        // await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCountry(page, limit);\r\n                        await getState(pageState, limitState);\r\n                        await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCity(pageCity, limitCity);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                    handleClickCloseDistrictDialog();\r\n                }\r\n                setIsLoadingDistrict(false);\r\n            } catch (error) {\r\n                setIsLoadingDistrict(false);\r\n                toast.error(error, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSwitchDistrict = (item: Districts) => {\r\n        setDistrict(item);\r\n        setIsCheckDistrict(true);\r\n    }\r\n\r\n    const handleCloseSwitchDistrict = () => {\r\n        setDistrict(initialDistrictState);\r\n        setIsCheckDistrict(false);\r\n    }\r\n\r\n    const handleSwitchDistrictCheck = async (e: any) => {\r\n        e.preventDfault();\r\n        try {\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            setIsLoadingDistrict(true);\r\n            let res = await APIservice.httpPost('/api/admin/region/activeInactiveDistrict', district, token, refreshToken);\r\n            setIsLoadingDistrict(false);\r\n            if (res && res.status == 200) {\r\n                await getDistrict(pageDistrict, limitDistrict);\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        } catch (error) {\r\n            setIsLoadingDistrict(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleClickOpenEditDistrictDialog = async (item: Districts) => {\r\n        clearDistrictError();\r\n        const token = localStorage.getItem('SessionToken');\r\n        const refreshToken = localStorage.getItem('RefreshToken');\r\n\r\n        let obj = {\r\n            countryId: item.countryId\r\n        };\r\n        const res1 = await APIservice.httpPost(\r\n            '/api/admin/region/getStates',\r\n            obj,\r\n            token,\r\n            refreshToken\r\n        );\r\n        setAllStates(res1.recordList);\r\n        setDistrict(item);\r\n        setIsOpenDistrict(true);\r\n    }\r\n\r\n    const isSelectedDistrict = (id: number) => (selectDistrict && selectDistrict?.id === id) ? true : false;\r\n    const handleLoadCity = async (e: any, item: Districts) => {\r\n        let district = districts;\r\n        let ind = district.findIndex(c => c.id == item.id);\r\n        let _ind = (selectDistrict?.id === district[ind].id);\r\n        setSelectCity(new Cities());\r\n        if (_ind) {\r\n            let obj = new Districts();\r\n            let countryId = selectCountry.id ? selectCountry.id : null;\r\n            let stateId = selectState.id ? selectState.id : null;\r\n            setSelectDistrict(obj);\r\n            await getCity(0, limitCity, null, stateId, countryId);\r\n        } else {\r\n            setSelectDistrict(district[ind]);\r\n            await getCity(0, limitCity, district[ind].id);\r\n        }\r\n    }\r\n    //#endregion District\r\n\r\n    //#region City\r\n    const getCity = async (startIndex: number, fetchRecord: number, districtId?: number, stateId?: number, countryId?: number) => {\r\n        try {\r\n            setIsLoadingCity(true);\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let obj = {\r\n                startIndex: startIndex,\r\n                fetchRecord: fetchRecord,\r\n                districtId: districtId,\r\n                stateId: stateId,\r\n                countryId: countryId\r\n            };\r\n            const res = await APIservice.httpPost(\r\n                '/api/admin/region/getCities',\r\n                obj,\r\n                token,\r\n                refreshToken\r\n            );\r\n            if (res.recordList && res.recordList.length > 0) {\r\n                for (let i = 0; i < res.recordList.length; i++) {\r\n                    res.recordList[i].isActive = res.recordList[i].isActive ? true : false;\r\n                    res.recordList[i].isDelete = res.recordList[i].isDelete ? true : false;\r\n                }\r\n            }\r\n            setCities(res.recordList);\r\n            setRowCity(res.totalRecords);\r\n            if (res && res.status == 200) {\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n            setIsLoadingCity(false);\r\n        } catch (error) {\r\n            setIsLoadingCity(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleCityPageChange = (event: any, newPage: number): void => {\r\n        setPageCity(newPage);\r\n        getCity(newPage * limitCity, limitCity);\r\n    };\r\n\r\n    const handleCityLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setLimitCity(parseInt(event.target.value));\r\n        setPageCity(0);\r\n        getCity(0, parseInt(event.target.value));\r\n    };\r\n\r\n    const handleClickOpenCityDialog = (e: any) => {\r\n        clearCityError();\r\n        setCity(initialCityState);\r\n        setIsOpenCity(true);\r\n    }\r\n\r\n    const handleClickCloseCityDialog = () => {\r\n        clearCityError();\r\n        setCity(initialCityState);\r\n        setIsOpenCity(false);\r\n    }\r\n\r\n    const clearCityError = () => {\r\n        setIsCityNameError(false);\r\n        setCityNameErrorMsg('');\r\n        setIsCountryIdError(false);\r\n        setCountryIdErrorMsg('');\r\n        setIsStateIdError(false);\r\n        setStateIdErrorMsg('');\r\n        setIsDistrictIdError(false);\r\n        setDistrictIdErrorMsg('');\r\n    }\r\n\r\n    const handleInputCityChange = (arr: any) => {\r\n        const { name, value } = arr.target;\r\n        setCity({ ...city, [name]: value });\r\n    };\r\n\r\n    const validateCityName = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsCityNameError(false);\r\n            setCityNameErrorMsg('');\r\n        } else {\r\n            setIsCityNameError(true);\r\n            setCityNameErrorMsg('City Name is required');\r\n        }\r\n    };\r\n\r\n    const validateCityPincode = (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsPincodeError(false);\r\n            setPincodeErrorMsg('');\r\n        } else {\r\n            setIsPincodeError(true);\r\n            setPincodeErrorMsg('City Pincode is required');\r\n        }\r\n    };\r\n\r\n    const validateDistrictId = async (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsDistrictIdError(false);\r\n            setDistrictIdErrorMsg('');\r\n        } else {\r\n            setIsDistrictIdError(true);\r\n            setDistrictIdErrorMsg('District is required');\r\n        }\r\n    };\r\n\r\n    const validateCityStateId = async (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsStateIdError(false);\r\n            setStateIdErrorMsg('');\r\n        } else {\r\n            setIsStateIdError(true);\r\n            setStateIdErrorMsg('State is required');\r\n        }\r\n\r\n        try {\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let obj = {\r\n                stateId: value\r\n            };\r\n            const res1 = await APIservice.httpPost(\r\n                '/api/admin/region/getDistricts',\r\n                obj,\r\n                token,\r\n                refreshToken\r\n            );\r\n            setAllDistricts(res1.recordList);\r\n        } catch (error) {\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const validateCityCountryId = async (arr) => {\r\n        const { name, value } = arr.target;\r\n        if (value) {\r\n            setIsCountryIdError(false);\r\n            setCountryIdErrorMsg('');\r\n        } else {\r\n            setIsCountryIdError(true);\r\n            setCountryIdErrorMsg('Country is required');\r\n        }\r\n\r\n        try {\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            let obj = {\r\n                countryId: value\r\n            };\r\n            const res1 = await APIservice.httpPost(\r\n                '/api/admin/region/getStates',\r\n                obj,\r\n                token,\r\n                refreshToken\r\n            );\r\n            setAllStates(res1.recordList);\r\n        } catch (error) {\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    };\r\n\r\n    const validateCity = () => {\r\n        let flag = true;\r\n        if (city.countryId) {\r\n            setIsCountryIdError(false);\r\n            setCountryIdErrorMsg('');\r\n        } else {\r\n            flag = false;\r\n            setIsCountryIdError(true);\r\n            setCountryIdErrorMsg('Country is required');\r\n        }\r\n        if (city.stateId) {\r\n            setIsStateIdError(false);\r\n            setStateIdErrorMsg('');\r\n        } else {\r\n            flag = false;\r\n            setIsStateIdError(true);\r\n            setStateIdErrorMsg('State is required');\r\n        }\r\n        if (city.districtId) {\r\n            setIsDistrictIdError(false);\r\n            setDistrictIdErrorMsg('');\r\n        } else {\r\n            flag = false;\r\n            setIsDistrictIdError(true);\r\n            setDistrictIdErrorMsg('District is required');\r\n        }\r\n        if (city.pincode) {\r\n            setIsPincodeError(false);\r\n            setPincodeErrorMsg('');\r\n        } else {\r\n            flag = false;\r\n            setIsPincodeError(true);\r\n            setPincodeErrorMsg('City Pincode is required');\r\n        }\r\n        if (city.name) {\r\n            setIsCityNameError(false);\r\n            setCityNameErrorMsg('');\r\n        } else {\r\n            flag = false;\r\n            setIsCityNameError(true);\r\n            setCityNameErrorMsg('City Name is required');\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    const saveCity = async (e: any) => {\r\n        e.preventDefault();\r\n        let flag = validateCity();\r\n        if (flag) {\r\n            try {\r\n                setIsLoadingCity(true);\r\n                const token = localStorage.getItem('SessionToken');\r\n                const refreshToken = localStorage.getItem('RefreshToken');\r\n                if (city.id) {\r\n                    let res = await APIservice.httpPost('/api/admin/region/updateCity', city, token, refreshToken);\r\n                    if (res && res.status == 200) {\r\n                        // await getCity(pageCity, limitCity);\r\n\r\n                        await getCountry(page, limit);\r\n                        await getState(pageState, limitState);\r\n                        await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCity(pageCity, limitCity);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                } else {\r\n                    let res = await APIservice.httpPost('/api/admin/region/insertCity', city, token, refreshToken);\r\n                    if (res && res.status == 200) {\r\n                        // await getCity(pageCity, limitCity);\r\n                        await getCountry(page, limit);\r\n                        await getState(pageState, limitState);\r\n                        await getDistrict(pageDistrict, limitDistrict);\r\n                        await getCity(pageCity, limitCity);\r\n                    } else if (res.status == 401) {\r\n                        navigate('/admin');\r\n                        localStorage.clear();\r\n                    } else if (res.status == 500) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 300) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 400) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    } else if (res.status == 404) {\r\n                        toast.error(res.message, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                }\r\n                handleClickCloseCityDialog();\r\n                setIsLoadingCity(false);\r\n            } catch (error) {\r\n                setIsLoadingCity(false);\r\n                toast.error(error, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSwitchCity = (item: Cities) => {\r\n        setCity(item);\r\n        setIsCheckCity(true);\r\n    }\r\n\r\n    const handleCloseSwitchCity = () => {\r\n        setCity(initialCityState);\r\n        setIsCheckCity(false);\r\n    }\r\n\r\n    const handleSwitchCityCheck = async (e: any) => {\r\n        e.preventDfault();\r\n        try {\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            setIsLoadingCity(true);\r\n            let res = await APIservice.httpPost('/api/admin/region/activeInactiveCity', city, token, refreshToken);\r\n            setIsLoadingCity(false);\r\n            if (res && res.status == 200) {\r\n                await getCity(pageCity, limitCity);\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        } catch (error) {\r\n            setIsLoadingCity(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleClickOpenEditCityDialog = async (item: Cities) => {\r\n        const token = localStorage.getItem('SessionToken');\r\n        const refreshToken = localStorage.getItem('RefreshToken');\r\n\r\n        let obj2 = {\r\n            countryId: item.countryId\r\n        };\r\n        const res2 = await APIservice.httpPost(\r\n            '/api/admin/region/getStates',\r\n            obj2,\r\n            token,\r\n            refreshToken\r\n        );\r\n        setAllStates(res2.recordList);\r\n\r\n        let obj = {\r\n            districtId: item.districtId\r\n        };\r\n        const res1 = await APIservice.httpPost(\r\n            '/api/admin/region/getDistricts',\r\n            obj,\r\n            token,\r\n            refreshToken\r\n        );\r\n        setAllDistricts(res1.recordList);\r\n        clearCityError();\r\n        setCity(item);\r\n        setIsOpenCity(true);\r\n    }\r\n    //#endregion City\r\n\r\n    //#region CSV\r\n    const handleClickDownloadSample = () => {\r\n        let data = [{\r\n            countryId: 0,//set 0 if you want to insert new country other wise leave as it is after download actual file\r\n            countryName: \"\",\r\n            isoCode: \"\",\r\n            isoCode3: \"\",\r\n            dialCode: \"\",\r\n            stateId: 0,//set 0 if you want to insert new State other wise leave as it is after download actual file\r\n            stateName: \"\",\r\n            districtId: 0,//set 0 if you want to insert new district other wise leave as it is after download actual file\r\n            districtName: \"\",\r\n            cityId: 0,//set 0 if you want to insert new City other wise leave as it is after download actual file\r\n            cityName: \"\",\r\n            pincode: \"\"\r\n        }, {\r\n            countryId: 0,//set 0 if you want to insert new country other wise leave as it is after download actual file\r\n            countryName: \"\",\r\n            isoCode: \"\",\r\n            isoCode3: \"\",\r\n            dialCode: \"\",\r\n            stateId: 0,//set 0 if you want to insert new State other wise leave as it is after download actual file\r\n            stateName: \"\",\r\n            districtId: 0,//set 0 if you want to insert new district other wise leave as it is after download actual file\r\n            districtName: \"\",\r\n            cityId: 0,//set 0 if you want to insert new City other wise leave as it is after download actual file\r\n            cityName: \"\",\r\n            pincode: \"\"\r\n        }]\r\n        setDownloadSample(data);\r\n\r\n    }\r\n\r\n    const handleClickDownloadRegion = async (e: any) => {\r\n        e.preventDefault();\r\n        try {\r\n            setIsLoadingCity(true);\r\n            setIsLoadingDistrict(true);\r\n            setIsLoadingState(true);\r\n            setIsLoadingCountry(true);\r\n            const token = localStorage.getItem('SessionToken');\r\n            const refreshToken = localStorage.getItem('RefreshToken');\r\n            const res = await APIservice.httpPost(\r\n                '/api/admin/region/getAllRegionData',\r\n                {},\r\n                token,\r\n                refreshToken\r\n            );\r\n            if (res && res.status == 200) {\r\n                let csvData = ConvertToCSV(res.recordList, ['countryId', 'countryName', 'isoCode', 'isoCode3', 'dialCode', 'stateId', 'stateName', 'districtId', 'districtName', 'cityId', 'cityName', 'pincode']);\r\n\r\n                let blob = new Blob(['\\ufeff' + csvData], { type: 'text/csv;charset=utf-8;' });\r\n                let dwldLink = document.createElement(\"a\");\r\n                let url = URL.createObjectURL(blob);\r\n                let isSafariBrowser = navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;\r\n                if (isSafariBrowser) {  //if Safari open in new window to save file with random filename.\r\n                    dwldLink.setAttribute(\"target\", \"_blank\");\r\n                }\r\n                dwldLink.setAttribute(\"href\", url);\r\n                let fileName = 'Region_' + new Date().getDate() + \"-\" + new Date().getMonth() + 1 + \"-\" + new Date().getFullYear() + \"-\" + new Date().getTime();\r\n                dwldLink.setAttribute(\"download\", fileName + \".csv\");\r\n                dwldLink.style.visibility = \"hidden\";\r\n                document.body.appendChild(dwldLink);\r\n                dwldLink.click();\r\n                document.body.removeChild(dwldLink);\r\n            } else if (res.status == 401) {\r\n                navigate('/admin');\r\n                localStorage.clear();\r\n            } else if (res.status == 500) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 300) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 400) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } else if (res.status == 404) {\r\n                toast.error(res.message, {\r\n                    autoClose: 6000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'colored',\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n            setIsLoadingCity(false);\r\n            setIsLoadingDistrict(false);\r\n            setIsLoadingState(false);\r\n            setIsLoadingCountry(false);\r\n        } catch (error) {\r\n            setIsLoadingCity(false);\r\n            setIsLoadingDistrict(false);\r\n            setIsLoadingState(false);\r\n            setIsLoadingCountry(false);\r\n            toast.error(error, {\r\n                autoClose: 6000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'colored',\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }\r\n\r\n    const ConvertToCSV = (data, fields) => {\r\n        let array = typeof data != 'object' ? JSON.parse(data) : data;\r\n        let str = '';\r\n        // str += \"Sale Order On Date \" + this.parameter.dateFrom.getDate() + \"/\" + (this.parameter.dateFrom.getMonth() + 1) + \"/\" + this.parameter.dateFrom.getFullYear() + \" \" + ((new Date(this.parameter.dateFrom)).getHours() < 10 ? '0' : '') + this.parameter.dateFrom.getHours() + \":\" + ((new Date(this.parameter.dateFrom)).getMinutes() < 10 ? '0' : '') + this.parameter.dateFrom.getMinutes() + \" TO \" + (this.parameter.dateFrom.getDate()) + \"/\" + (this.parameter.dateFrom.getMonth() + 1) + \"/\" + this.parameter.dateFrom.getFullYear() + \" \" + ((new Date(this.parameter.dateTo)).getHours() < 10 ? '0' : '') + this.parameter.dateTo.getHours() + \":\" + ((new Date(this.parameter.dateTo)).getMinutes() < 10 ? '0' : '') + this.parameter.dateTo.getMinutes() + '\\r\\n';\r\n        let row = '';\r\n        for (let index in fields) {\r\n            row += fields[index] + ',';\r\n        }\r\n        row = row.slice(0, -1);\r\n        let line = ''\r\n        str += row + '\\r\\n';\r\n        console.log(array.length);\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            line += '\\n' + array[i].countryId + \", \" + array[i].countryName + \", \" + array[i].isoCode + \", \" + array[i].isoCode3 + \", \" + array[i].dialCode + \", \" + array[i].stateId + \", \" + array[i].stateName + \", \" + array[i].districtId + \", \" + array[i].districtName + \", \" + array[i].cityId + \", \" + array[i].cityName + \", \" + array[i].pincode;\r\n        }\r\n        str += line + '\\r\\n';\r\n        return str;\r\n    }\r\n\r\n    const handleClickUploadRegion = () => {\r\n        inputFile.current.click();\r\n    }\r\n\r\n    const handleFile = (e: any) => {\r\n        let file = e.target.files[0];\r\n        if (file) {\r\n            fileReader.onload = async () => {\r\n                const csvOutput = fileReader.result;\r\n                const lines = csvOutput.toString().split(\"\\n\");\r\n                const headers = lines[0].split(\",\");\r\n                const result = [];\r\n\r\n                console.log(lines);\r\n                for (let i = 1; i < lines.length; i++) {\r\n                    if (lines[i]) {\r\n                        const obj = {};\r\n                        const currentLine = lines[i].split(\",\");\r\n\r\n                        for (let j = 0; j < headers.length; j++) {\r\n                            obj[headers[j].trim()] = currentLine[j].trim();\r\n                        }\r\n\r\n                        result.push(obj);\r\n                    }\r\n                }\r\n                if (result && result.length > 0) {\r\n                    try {\r\n                        setIsLoadingCity(true);\r\n                        setIsLoadingDistrict(true);\r\n                        setIsLoadingState(true);\r\n                        setIsLoadingCountry(true);\r\n                        const token = localStorage.getItem('SessionToken');\r\n                        const refreshToken = localStorage.getItem('RefreshToken');\r\n                        const res = await APIservice.httpPost(\r\n                            '/api/admin/region/updateRegionData',\r\n                            { data: result },\r\n                            token,\r\n                            refreshToken\r\n                        );\r\n                        if (res && res.status == 200) {\r\n                            loadData();\r\n                        } else if (res.status == 401) {\r\n                            navigate('/admin');\r\n                            localStorage.clear();\r\n                        } else if (res.status == 500) {\r\n                            toast.error(res.message, {\r\n                                autoClose: 6000,\r\n                                hideProgressBar: true,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                                theme: 'colored',\r\n                                position: toast.POSITION.TOP_RIGHT\r\n                            });\r\n                        } else if (res.status == 300) {\r\n                            toast.error(res.message, {\r\n                                autoClose: 6000,\r\n                                hideProgressBar: true,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                                theme: 'colored',\r\n                                position: toast.POSITION.TOP_RIGHT\r\n                            });\r\n                        } else if (res.status == 400) {\r\n                            toast.error(res.message, {\r\n                                autoClose: 6000,\r\n                                hideProgressBar: true,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                                theme: 'colored',\r\n                                position: toast.POSITION.TOP_RIGHT\r\n                            });\r\n                        } else if (res.status == 404) {\r\n                            toast.error(res.message, {\r\n                                autoClose: 6000,\r\n                                hideProgressBar: true,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                                theme: 'colored',\r\n                                position: toast.POSITION.TOP_RIGHT\r\n                            });\r\n                        }\r\n                        setIsLoadingCity(false);\r\n                        setIsLoadingDistrict(false);\r\n                        setIsLoadingState(false);\r\n                        setIsLoadingCountry(false);\r\n                    } catch (error) {\r\n                        setIsLoadingCity(false);\r\n                        setIsLoadingDistrict(false);\r\n                        setIsLoadingState(false);\r\n                        setIsLoadingCountry(false);\r\n                        toast.error(error, {\r\n                            autoClose: 6000,\r\n                            hideProgressBar: true,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                            theme: 'colored',\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n\r\n            fileReader.readAsText(file);\r\n        }\r\n    }\r\n    //#endregion CSV\r\n\r\n    return (\r\n        <div>\r\n            <ToastContainer\r\n                style={{ top: '8.5%', right: '0%' }}\r\n                // position=\"top-right\"\r\n                autoClose={6000}\r\n                hideProgressBar={true}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n            <Helmet>\r\n                <title>Region</title>\r\n            </Helmet>\r\n            <PageTitleWrapper>\r\n                <Box p={1}>\r\n                    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                        <Grid item>\r\n                            <Stack alignItems=\"left\" justifyContent=\"space-between\">\r\n                                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                                    <Link to=\"/admin\" style={{ display: 'flex', color: 'black' }}>\r\n                                        <HomeIcon />\r\n                                    </Link>\r\n                                    <Typography\r\n                                        variant=\"subtitle2\"\r\n                                        color=\"inherit\"\r\n                                        fontWeight=\"bold\"\r\n                                    >\r\n                                        Region\r\n                                    </Typography>\r\n                                </Breadcrumbs>\r\n                            </Stack>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Grid container spacing={1.5}>\r\n                                {isReadPermission ? <>\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            className=\"buttonLarge\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickDownloadSample}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <CSVLink\r\n                                                data={downloadSample}\r\n                                                filename={'sample.csv'}\r\n                                                style={{\r\n                                                    '&:hover': { background: theme.colors.primary.lighter },\r\n                                                    color: \"white\", textDecoration: \"none\"\r\n                                                }}\r\n                                            >\r\n                                                <CloudDownloadIcon fontSize=\"small\" />&nbsp;\r\n                                                Download Sample\r\n                                            </CSVLink>\r\n                                        </Button>\r\n                                        <Button\r\n                                            className=\"button\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickDownloadSample}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <CSVLink\r\n                                                data={downloadSample}\r\n                                                filename={'sample.csv'}\r\n                                                style={{\r\n                                                    '&:hover': { background: theme.colors.primary.lighter },\r\n                                                    color: \"white\", textDecoration: \"none\"\r\n                                                }}\r\n                                            >\r\n                                                <CloudDownloadIcon fontSize=\"small\" />\r\n                                            </CSVLink>\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            className=\"buttonLarge\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickDownloadRegion}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <CSVLink\r\n                                                data={regionData}\r\n                                                filename={'region.csv'}\r\n                                                style={{\r\n                                                    '&:hover': { background: theme.colors.primary.lighter },\r\n                                                    color: \"white\", textDecoration: \"none\"\r\n                                                }}\r\n                                            >\r\n                                                <CloudDownloadIcon fontSize=\"small\" />&nbsp;\r\n                                                Download\r\n                                            </CSVLink>\r\n                                        </Button>\r\n                                        <Button\r\n                                            className=\"button\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickDownloadRegion}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <CSVLink\r\n                                                data={regionData}\r\n                                                filename={'region.csv'}\r\n                                                style={{\r\n                                                    '&:hover': { background: theme.colors.primary.lighter },\r\n                                                    color: \"white\", textDecoration: \"none\"\r\n                                                }}\r\n                                            >\r\n                                                <CloudDownloadIcon fontSize=\"small\" />\r\n                                            </CSVLink>\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </> : <></>}\r\n                                {isWritePermission ?\r\n                                    <Grid item>\r\n                                        <input style={{ display: 'none', }} ref={inputFile} accept=\".csv\" type=\"file\" onChange={handleFile} />\r\n                                        <Button\r\n                                            className=\"buttonLarge\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickUploadRegion}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <CloudUploadIcon fontSize=\"small\" />&nbsp;\r\n                                            Upload\r\n                                        </Button>\r\n                                        <Button\r\n                                            className=\"button\"\r\n                                            sx={{\r\n                                                mt: {\r\n                                                    xs: 0,\r\n                                                    md: 0,\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    padding: '8.3px',\r\n                                                    top: '3px'\r\n                                                }\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={handleClickUploadRegion}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <CloudUploadIcon fontSize=\"small\" />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    : <></>}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </PageTitleWrapper>\r\n            <Container maxWidth=\"lg\">\r\n                <Card className=\"religioncard\">\r\n                    <Grid container>\r\n                        <Grid item lg={3} md={4} sm={6} xs={12} style={{ borderRight: '1px Solid #9f9f9f' }}>\r\n                            {isLoadingCountry ? <RegionLoader title=\"Loading Country\"></RegionLoader> :\r\n                                <div className='region-div'>\r\n                                    <TableContainer className=\"country-tableContainer-list\" >\r\n                                        <Table stickyHeader aria-label=\"simple table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell sx={{ color: '#212B36' }}>Country</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {isWritePermission ?\r\n                                                            <Button\r\n                                                                variant=\"contained\"\r\n                                                                // sx={{ color: '#1565c0' }}\r\n                                                                color=\"inherit\"\r\n                                                                size=\"small\"\r\n                                                                onClick={handleClickOpenCountryDialog}\r\n                                                            >\r\n                                                                <AddIcon fontSize=\"small\" />\r\n                                                            </Button>\r\n                                                            : <></>}\r\n\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {countries.map((item: Country, index: number) => {\r\n                                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n                                                    const isItemSelected = isSelected(item.id);\r\n                                                    return (\r\n                                                        <TableRow hover key={item.id} role=\"checkbox\" aria-checked tabIndex={-1} sx={{ cursor: \"pointer\" }} selected={isItemSelected}>\r\n                                                            <TableCell style={{ cursor: 'pointer' }} onClick={(e) => handleLoadState(e, item)}>\r\n                                                                <Typography\r\n                                                                    variant=\"subtitle2\"\r\n                                                                    color=\"text.primary\"\r\n                                                                    noWrap\r\n                                                                    sx={{ textTransform: 'capitalize', fontSize: '12px' }}\r\n                                                                >\r\n                                                                    <Checkbox\r\n                                                                        color=\"primary\"\r\n                                                                        checked={isItemSelected}\r\n                                                                        inputProps={{\r\n                                                                            'aria-labelledby': labelId,\r\n                                                                        }}\r\n                                                                        style={{ padding: '0px 10px' }}\r\n                                                                    />\r\n                                                                    {item.name}\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {isEditPermission ? <>\r\n                                                                    <div style={{ display: \"flex\" }}>\r\n                                                                        <Tooltip title={(item.isActive) ? \"Active\" : \"Inactive\"} arrow\r\n                                                                        >\r\n                                                                            <Switch\r\n                                                                                checked={!item.isActive ? false : true}\r\n                                                                                onClick={(e) => { handleSwitchCountry(item) }}\r\n                                                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                                                                sx={{ color: '#1565c0' }}\r\n                                                                            />\r\n                                                                        </Tooltip>\r\n                                                                        <IconButton\r\n                                                                            sx={{ color: '#1565c0' }}\r\n                                                                            color=\"inherit\"\r\n                                                                            size=\"small\"\r\n                                                                            onClick={(e) => handleClickOpenEditCountryDialog(item)}\r\n                                                                        >\r\n                                                                            <EditTwoToneIcon fontSize=\"small\" />\r\n                                                                        </IconButton>\r\n                                                                    </div>\r\n                                                                </> : <></>}\r\n\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                        {/* <Table stickyHeader aria-label=\"simple table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell sx={{ color: '#212B36' }}>Country</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            color=\"inherit\"\r\n                                                            size=\"small\"\r\n                                                            onClick={handleClickOpenCountryDialog}\r\n                                                        >\r\n                                                            <AddIcon fontSize=\"small\" />\r\n                                                        </Button>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {countries.map((item: Country, index: number) => {\r\n                                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n                                                    const isItemSelected = isSelected(item.id);\r\n                                                    return (\r\n                                                        <TableRow\r\n                                                            key={item.name}\r\n                                                            sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                                                            style={{ background: isItemSelected ? '#d0d2d9' : '#fff' }}\r\n                                                        >\r\n                                                            <TableCell style={{ cursor: 'pointer', padding: '0px' }} onClick={(e) => handleLoadState(e, item)} component=\"th\" scope=\"row\">\r\n                                                                {item.name}\r\n                                                            </TableCell>\r\n                                                            <TableCell sx={{ padding: '0px' }}>\r\n                                                                <IconButton\r\n                                                                    sx={{ color: '#1565c0' }}\r\n                                                                    color=\"inherit\"\r\n                                                                    size=\"small\"\r\n                                                                    onClick={(e) => handleClickOpenEditCountryDialog(item)}\r\n                                                                >\r\n                                                                    <EditTwoToneIcon fontSize=\"small\" />\r\n                                                                </IconButton>\r\n                                                                <Tooltip title={(item.isActive) ? \"Active\" : \"Inactive\"} arrow\r\n                                                                >\r\n                                                                    <Switch\r\n                                                                        checked={!item.isActive ? false : true}\r\n                                                                        onClick={(e) => { handleSwitchCountry(item) }}\r\n                                                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                                                        sx={{ color: '#1565c0' }}\r\n                                                                    />\r\n                                                                </Tooltip>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table> */}\r\n                                    </TableContainer>\r\n                                    <TablePagination\r\n                                        component=\"div\"\r\n                                        count={row}\r\n                                        onPageChange={handlePageChange}\r\n                                        onRowsPerPageChange={handleLimitChange}\r\n                                        page={page}\r\n                                        rowsPerPage={limit}\r\n                                        rowsPerPageOptions={[10, 20, 30, 40]}\r\n                                    />\r\n                                </div>\r\n                            }\r\n                        </Grid>\r\n                        <Grid item lg={3} md={4} sm={6} xs={12} style={{ borderRight: '1px Solid #9f9f9f' }}>\r\n                            {/* <Card className=\"religioncard\"> */}\r\n                            {isLoadingState ? <RegionLoader title=\"Loading State\"></RegionLoader> :\r\n                                <>\r\n                                    <TableContainer className=\"country-tableContainer-list\" >\r\n                                        <Table stickyHeader>\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell sx={{ color: '#212B36' }}>State</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {isWritePermission ?\r\n                                                            <Button\r\n                                                                variant=\"contained\"\r\n                                                                color=\"inherit\"\r\n                                                                size=\"small\"\r\n                                                                onClick={handleClickOpenStateDialog}\r\n                                                            >\r\n                                                                <AddIcon fontSize=\"small\" />\r\n                                                            </Button>\r\n                                                            : <></>}\r\n\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {states.map((item: States, index: number) => {\r\n                                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n                                                    const isItemSelected = isSelectedState(item.id);\r\n                                                    return (\r\n                                                        <TableRow hover key={item.id} role=\"checkbox\" aria-checked tabIndex={-1} sx={{ cursor: \"pointer\" }} selected={isItemSelected}>\r\n                                                            <TableCell colSpan={1} style={{ cursor: 'pointer' }} onClick={(e) => handleLoadDistrict(e, item)}>\r\n                                                                <Typography\r\n                                                                    variant=\"subtitle2\"\r\n                                                                    color=\"text.primary\"\r\n                                                                    noWrap\r\n                                                                    sx={{ textTransform: 'capitalize', fontSize: '12px' }}\r\n                                                                >\r\n                                                                    <Checkbox\r\n                                                                        color=\"primary\"\r\n                                                                        checked={isItemSelected}\r\n                                                                        inputProps={{\r\n                                                                            'aria-labelledby': labelId,\r\n                                                                        }}\r\n                                                                        style={{ padding: '0px 10px' }}\r\n                                                                    />\r\n                                                                    {item.name}\r\n                                                                </Typography>\r\n                                                                <Typography sx={{ color: \"grey\", fontSize: \"10px\", marginLeft: \"39px\", marginTop: \"-10px\" }} variant=\"body2\"> ({item.countryName})</Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {isEditPermission ?\r\n                                                                    <div style={{ display: \"flex\" }}>\r\n                                                                        <Tooltip title={(item.isActive) ? \"Active\" : \"Inactive\"} arrow\r\n                                                                        >\r\n                                                                            <Switch\r\n                                                                                checked={!item.isActive ? false : true}\r\n                                                                                onClick={(e) => { handleSwitchState(item) }}\r\n                                                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                                                                sx={{ color: '#1565c0' }}\r\n                                                                            />\r\n                                                                        </Tooltip>\r\n                                                                        <IconButton\r\n                                                                            sx={{ color: '#1565c0' }}\r\n                                                                            color=\"inherit\"\r\n                                                                            size=\"small\"\r\n                                                                            onClick={(e) => handleClickOpenEditStateDialog(item)}\r\n                                                                        >\r\n                                                                            <EditTwoToneIcon fontSize=\"small\" />\r\n                                                                        </IconButton>\r\n                                                                    </div>\r\n                                                                    : <></>}\r\n\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                    <TablePagination\r\n                                        component=\"div\"\r\n                                        count={rowState}\r\n                                        onPageChange={handleStatePageChange}\r\n                                        onRowsPerPageChange={handleStateLimitChange}\r\n                                        page={pageState}\r\n                                        rowsPerPage={limitState}\r\n                                        rowsPerPageOptions={[10, 20, 30, 40]}\r\n                                    />\r\n                                </>\r\n                            }\r\n                            {/* </Card> */}\r\n                        </Grid>\r\n                        <Grid item lg={3} md={4} sm={6} xs={12} style={{ borderRight: '1px Solid #9f9f9f' }}>\r\n                            {/* <Card className=\"religioncard\"> */}\r\n                            {isLoadingDistrict ? <RegionLoader title=\"Loading District\"></RegionLoader> :\r\n                                <>\r\n                                    <TableContainer className=\"country-tableContainer-list\" >\r\n                                        <Table stickyHeader>\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell sx={{ color: '#212B36' }}>District</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {isWritePermission ?\r\n                                                            <Button\r\n                                                                variant=\"contained\"\r\n                                                                // sx={{ color: '#1565c0' }}\r\n                                                                color=\"inherit\"\r\n                                                                size=\"small\"\r\n                                                                onClick={handleClickOpenDistrictDialog}\r\n                                                            >\r\n                                                                <AddIcon fontSize=\"small\" />\r\n                                                            </Button>\r\n                                                            : <></>}\r\n\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {districts.map((item: Districts, index: number) => {\r\n                                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n                                                    const isItemSelected = isSelectedDistrict(item.id);\r\n                                                    return (\r\n                                                        <TableRow hover key={item.id} role=\"checkbox\" aria-checked tabIndex={-1} sx={{ cursor: \"pointer\" }} selected={isItemSelected}>\r\n                                                            <TableCell colSpan={1} style={{ cursor: 'pointer' }} onClick={(e) => handleLoadCity(e, item)}>\r\n                                                                <Typography\r\n                                                                    variant=\"subtitle2\"\r\n                                                                    color=\"text.primary\"\r\n                                                                    noWrap\r\n                                                                    sx={{ textTransform: 'capitalize', fontSize: '12px' }}\r\n                                                                >\r\n                                                                    <Checkbox\r\n                                                                        color=\"primary\"\r\n                                                                        checked={isItemSelected}\r\n                                                                        inputProps={{\r\n                                                                            'aria-labelledby': labelId,\r\n                                                                        }}\r\n                                                                        style={{ padding: '0px 10px' }}\r\n                                                                    />\r\n                                                                    {item.name}\r\n                                                                </Typography>\r\n                                                                <Typography sx={{ color: \"grey\", fontSize: \"10px\", marginLeft: \"39px\", marginTop: \"-10px\" }} variant=\"body2\"> ({item.countryName}-{item.stateName})</Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {isEditPermission ?\r\n                                                                    <div style={{ display: \"flex\" }}>\r\n                                                                        <Tooltip title={(item.isActive) ? \"Active\" : \"Inactive\"} arrow\r\n                                                                        >\r\n                                                                            <Switch\r\n                                                                                checked={!item.isActive ? false : true}\r\n                                                                                onClick={(e) => { handleSwitchDistrict(item) }}\r\n                                                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                                                                sx={{ color: '#1565c0' }}\r\n                                                                            />\r\n                                                                        </Tooltip>\r\n                                                                        <IconButton\r\n                                                                            sx={{ color: '#1565c0' }}\r\n                                                                            color=\"inherit\"\r\n                                                                            size=\"small\"\r\n                                                                            onClick={(e) => handleClickOpenEditDistrictDialog(item)}\r\n                                                                        >\r\n                                                                            <EditTwoToneIcon fontSize=\"small\" />\r\n                                                                        </IconButton>\r\n                                                                    </div>\r\n                                                                    : <></>}\r\n\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                    <TablePagination\r\n                                        component=\"div\"\r\n                                        count={rowDistrict}\r\n                                        onPageChange={handleDistrictPageChange}\r\n                                        onRowsPerPageChange={handleDistrictLimitChange}\r\n                                        page={pageDistrict}\r\n                                        rowsPerPage={limitDistrict}\r\n                                        rowsPerPageOptions={[10, 20, 30, 40]}\r\n                                    />\r\n                                </>\r\n                            }\r\n                            {/* </Card> */}\r\n                        </Grid>\r\n                        <Grid item lg={3} md={4} sm={6} xs={12} style={{ borderRight: '1px Solid #9f9f9f' }}>\r\n                            {/* <Card className=\"religioncard\"> */}\r\n                            {isLoadingCity ? <RegionLoader title=\"Loading City\"></RegionLoader> :\r\n                                <>\r\n                                    <TableContainer className=\"country-tableContainer-list\" >\r\n                                        <Table stickyHeader>\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell sx={{ color: '#212B36' }}>City</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {isWritePermission ?\r\n                                                            <Button\r\n                                                                variant=\"contained\"\r\n                                                                // sx={{ color: '#1565c0' }}\r\n                                                                color=\"inherit\"\r\n                                                                size=\"small\"\r\n                                                                onClick={handleClickOpenCityDialog}\r\n                                                            >\r\n                                                                <AddIcon fontSize=\"small\" />\r\n                                                            </Button>\r\n                                                            : <></>}\r\n\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {cities.map((item: Cities, index: number) => {\r\n                                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n                                                    return (\r\n                                                        <TableRow hover key={item.id} role=\"checkbox\" aria-checked tabIndex={-1} sx={{ cursor: \"pointer\" }}>\r\n                                                            <TableCell colSpan={1} style={{ cursor: 'pointer' }}>\r\n                                                                <Typography\r\n                                                                    variant=\"subtitle2\"\r\n                                                                    color=\"text.primary\"\r\n                                                                    noWrap\r\n                                                                    sx={{ textTransform: 'capitalize', fontSize: '12px' }}\r\n                                                                >\r\n                                                                    {item.name}\r\n                                                                </Typography>\r\n                                                                <Typography sx={{ color: \"grey\", fontSize: \"10px\", marginLeft: \"0px\", marginTop: \"-5px\" }} variant=\"body2\"> ({item.countryName}-{item.stateName}-{item.districtName})</Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {isEditPermission ?\r\n                                                                    <div style={{ display: 'flex' }}>\r\n                                                                        <Tooltip title={(item.isActive) ? \"Active\" : \"Inactive\"} arrow\r\n                                                                        >\r\n                                                                            <Switch\r\n                                                                                checked={!item.isActive ? false : true}\r\n                                                                                onClick={(e) => { handleSwitchCity(item) }}\r\n                                                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                                                                sx={{ color: '#1565c0' }}\r\n                                                                            />\r\n                                                                        </Tooltip>\r\n                                                                        <IconButton\r\n                                                                            sx={{ color: '#1565c0' }}\r\n                                                                            color=\"inherit\"\r\n                                                                            size=\"small\"\r\n                                                                            onClick={(e) => handleClickOpenEditCityDialog(item)}\r\n                                                                        >\r\n                                                                            <EditTwoToneIcon fontSize=\"small\" />\r\n                                                                        </IconButton>\r\n                                                                    </div>\r\n                                                                    : <></>}\r\n\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                    <TablePagination\r\n                                        component=\"div\"\r\n                                        count={rowCity}\r\n                                        onPageChange={handleCityPageChange}\r\n                                        onRowsPerPageChange={handleCityLimitChange}\r\n                                        page={pageCity}\r\n                                        rowsPerPage={limitCity}\r\n                                        rowsPerPageOptions={[10, 20, 30, 40]}\r\n                                    />\r\n                                </>\r\n                            }\r\n                            {/* </Card> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Card>\r\n                <div>\r\n                    <Dialog\r\n                        open={isCheckCountry}\r\n                        onClose={handleCloseSwitchCountry}\r\n                        fullWidth\r\n                        maxWidth=\"xs\"\r\n                    >\r\n                        <DialogTitle\r\n                            sx={{\r\n                                m: 0,\r\n                                p: 2,\r\n                                fontSize: '20px',\r\n                                fontWeight: 'bolder'\r\n                            }}\r\n                        >\r\n                            {country.isActive ? 'Inactive' : 'Active'}\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText\r\n                                style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.00938em'\r\n                                }}\r\n                            >\r\n                                {country.isActive\r\n                                    ? 'Are you sure you want to Active?'\r\n                                    : 'Are you sure you want to Inactive?'}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleCloseSwitchCountry} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                            <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={handleSwitchCountryCheck} variant=\"outlined\" style={{ marginRight: '10px' }}>Yes</Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n                <div>\r\n                    <BootstrapDialog\r\n                        open={isOpenCountry}\r\n                        onClose={handleClickCloseCountryDialog}\r\n                        PaperProps={{ sx: { height: '40%' } }}\r\n                        fullWidth\r\n                        maxWidth=\"xs\"\r\n                    >\r\n                        <BootstrapDialogTitle\r\n                            id=\"customized-dialog-title\"\r\n                            onClose={handleClickCloseCountryDialog}\r\n                        >\r\n                            {country.id ? 'Edit Country' : 'Add Country'}\r\n                        </BootstrapDialogTitle>\r\n                        <DialogContent dividers>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"Country Name\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                name=\"name\"\r\n                                value={country.name}\r\n                                onChange={(arr) => {\r\n                                    handleInputChange(arr);\r\n                                    validateName(arr);\r\n                                }}\r\n                                required={true}\r\n                            />\r\n                            <FormHelperText\r\n                                style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                                {isNameError && nameErrorMsg}\r\n                            </FormHelperText>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"isoCode\"\r\n                                label=\"Country ISO Code\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                name=\"isoCode\"\r\n                                value={country.isoCode}\r\n                                onChange={(arr) => {\r\n                                    handleInputChange(arr);\r\n                                    validateIsoCode(arr);\r\n                                }}\r\n                                required={true}\r\n                            />\r\n                            <FormHelperText\r\n                                style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                                {isIsoCodeError && isoCodeErrorMsg}\r\n                            </FormHelperText>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"isoCode3\"\r\n                                label=\"Country ISO Code3\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                name=\"isoCode3\"\r\n                                value={country.isoCode3}\r\n                                onChange={(arr) => {\r\n                                    handleInputChange(arr);\r\n                                    validateIso3Code(arr);\r\n                                }}\r\n                                required={true}\r\n                            />\r\n                            <FormHelperText\r\n                                style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                                {isIsoCode3Error && isoCode3ErrorMsg}\r\n                            </FormHelperText>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"dialCode\"\r\n                                label=\"Country Dial Code\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                name=\"dialCode\"\r\n                                value={country.dialCode}\r\n                                onChange={(arr) => {\r\n                                    handleInputChange(arr);\r\n                                    validateCountryDialCode(arr);\r\n                                }}\r\n                            />\r\n                            <FormHelperText\r\n                                style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                                {isCountryDialCodeError && CountryDialCodeErrorMsg}\r\n                            </FormHelperText>\r\n                        </DialogContent>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                p: '8px'\r\n                            }}\r\n                        >\r\n                            <FormHelperText\r\n                                style={{\r\n                                    color: 'red',\r\n                                    height: '22px',\r\n                                    margin: 'none',\r\n                                    padding: '8px'\r\n                                }}\r\n                            >\r\n                            </FormHelperText>\r\n                            <div>\r\n                                <Button onClick={handleClickCloseCountryDialog} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => { savecountry(e) }} variant=\"outlined\" style={{ marginRight: '10px' }}>Save</Button>\r\n                            </div>\r\n                        </Box>\r\n                    </BootstrapDialog>\r\n                </div>\r\n                <div>\r\n                    <Dialog\r\n                        open={isCheckState}\r\n                        onClose={handleCloseSwitchState}\r\n                        fullWidth\r\n                        maxWidth=\"xs\"\r\n                    >\r\n                        <DialogTitle\r\n                            sx={{\r\n                                m: 0,\r\n                                p: 2,\r\n                                fontSize: '20px',\r\n                                fontWeight: 'bolder'\r\n                            }}\r\n                        >\r\n                            {state.isActive ? 'Inactive' : 'Active'}\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText\r\n                                style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.00938em'\r\n                                }}\r\n                            >\r\n                                {state.isActive\r\n                                    ? 'Are you sure you want to Active?'\r\n                                    : 'Are you sure you want to Inactive?'}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleCloseSwitchState} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                            <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={handleSwitchStateCheck} variant=\"outlined\" style={{ marginRight: '10px' }}>Yes</Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n                <div>\r\n                    <BootstrapDialog\r\n                        open={isOpenState}\r\n                        onClose={handleClickCloseStateDialog}\r\n                        PaperProps={{ sx: { height: '40%' } }}\r\n                        fullWidth\r\n                        maxWidth=\"xs\"\r\n                    >\r\n                        <BootstrapDialogTitle\r\n                            id=\"customized-dialog-title\"\r\n                            onClose={handleClickCloseStateDialog}\r\n                        >\r\n                            {state.id ? 'Edit State' : 'Add State'}\r\n                        </BootstrapDialogTitle>\r\n                        <DialogContent dividers>\r\n                            <FormControl\r\n                                sx={{ width: { lg: '100%' } }}\r\n                            >\r\n                                <InputLabel id=\"demo-multiple-name-label\">\r\n                                    Country *\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-multiple-name-label\"\r\n                                    id=\"demo-multiple-name\"\r\n                                    multiple={false}\r\n                                    name=\"countryId\"\r\n                                    value={state.countryId}\r\n                                    onChange={(e) => {\r\n                                        handleInputStateChange(e);\r\n                                        validateStateCountryId(e);\r\n                                    }}\r\n                                    label=\"Country\"\r\n                                    MenuProps={MenuProps}\r\n                                    required={true}\r\n                                >\r\n                                    {allCountries.map((arr: any) => (\r\n                                        <MenuItem key={arr.id} value={arr.id}>\r\n                                            {arr.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                {isCountryIdError && countryIdErrorMsg}\r\n                            </FormHelperText>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"State Name\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                name=\"name\"\r\n                                value={state.name}\r\n                                onChange={(arr) => {\r\n                                    handleInputStateChange(arr);\r\n                                    validateStateName(arr);\r\n                                }}\r\n                                required={true}\r\n                            />\r\n                            <FormHelperText\r\n                                style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                                {isStateNameError && stateNameErrorMsg}\r\n                            </FormHelperText>\r\n                        </DialogContent>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                p: '8px'\r\n                            }}\r\n                        >\r\n                            <FormHelperText\r\n                                style={{\r\n                                    color: 'red',\r\n                                    height: '22px',\r\n                                    margin: 'none',\r\n                                    padding: '8px'\r\n                                }}\r\n                            >\r\n                            </FormHelperText>\r\n                            <div>\r\n                                <Button onClick={handleClickCloseStateDialog} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => { saveState(e) }} variant=\"outlined\" style={{ marginRight: '10px' }}>Save</Button>\r\n                            </div>\r\n                        </Box>\r\n                    </BootstrapDialog>\r\n                </div>\r\n                <div>\r\n                    <Dialog\r\n                        open={isCheckDistrict}\r\n                        onClose={handleCloseSwitchDistrict}\r\n                        fullWidth\r\n                        maxWidth=\"xs\"\r\n                    >\r\n                        <DialogTitle\r\n                            sx={{\r\n                                m: 0,\r\n                                p: 2,\r\n                                fontSize: '20px',\r\n                                fontWeight: 'bolder'\r\n                            }}\r\n                        >\r\n                            {state.isActive ? 'Inactive' : 'Active'}\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText\r\n                                style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.00938em'\r\n                                }}\r\n                            >\r\n                                {state.isActive\r\n                                    ? 'Are you sure you want to Active?'\r\n                                    : 'Are you sure you want to Inactive?'}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleCloseSwitchDistrict} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                            <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={handleSwitchDistrictCheck} variant=\"outlined\" style={{ marginRight: '10px' }}>Yes</Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n                <div>\r\n                    <BootstrapDialog\r\n                        open={isOpenDistrict}\r\n                        onClose={handleClickCloseDistrictDialog}\r\n                        PaperProps={{ sx: { height: '40%' } }}\r\n                        fullWidth\r\n                        maxWidth=\"xs\"\r\n                    >\r\n                        <BootstrapDialogTitle\r\n                            id=\"customized-dialog-title\"\r\n                            onClose={handleClickCloseDistrictDialog}\r\n                        >\r\n                            {district.id ? 'Edit District' : 'Add District'}\r\n                        </BootstrapDialogTitle>\r\n                        <DialogContent dividers>\r\n                            <FormControl\r\n                                sx={{ width: { lg: '100%' } }}\r\n                            >\r\n                                <InputLabel id=\"demo-multiple-name-label\">\r\n                                    Country *\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-multiple-name-label\"\r\n                                    id=\"demo-multiple-name\"\r\n                                    multiple={false}\r\n                                    name=\"countryId\"\r\n                                    value={district.countryId}\r\n                                    onChange={(e) => {\r\n                                        handleInputDistrictChange(e);\r\n                                        validateDistrictCountryId(e);\r\n                                    }}\r\n                                    label=\"Country\"\r\n                                    MenuProps={MenuProps}\r\n                                    required={true}\r\n                                >\r\n                                    {allCountries.map((arr: any) => (\r\n                                        <MenuItem key={arr.id} value={arr.id}>\r\n                                            {arr.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                {isCountryIdError && countryIdErrorMsg}\r\n                            </FormHelperText>\r\n                            <FormControl\r\n                                sx={{ width: { lg: '100%' } }}\r\n                            >\r\n                                <InputLabel id=\"demo-multiple-name-label\">\r\n                                    State *\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-multiple-name-label\"\r\n                                    id=\"demo-multiple-name\"\r\n                                    multiple={false}\r\n                                    name=\"stateId\"\r\n                                    value={district.stateId}\r\n                                    onChange={(e) => {\r\n                                        handleInputDistrictChange(e);\r\n                                        validateDistrictStateId(e);\r\n                                    }}\r\n                                    label=\"State\"\r\n                                    MenuProps={MenuProps}\r\n                                    required={true}\r\n                                >\r\n                                    {allStates.map((arr: any) => (\r\n                                        <MenuItem key={arr.id} value={arr.id}>\r\n                                            {arr.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                {isStateIdError && stateIdErrorMsg}\r\n                            </FormHelperText>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"District Name\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                name=\"name\"\r\n                                value={district.name}\r\n                                onChange={(arr) => {\r\n                                    handleInputDistrictChange(arr);\r\n                                    validateDistrictName(arr);\r\n                                }}\r\n                                required={true}\r\n                            />\r\n                            <FormHelperText\r\n                                style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                                {isDistrictNameError && districtNameErrorMsg}\r\n                            </FormHelperText>\r\n                        </DialogContent>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                p: '8px'\r\n                            }}\r\n                        >\r\n                            <FormHelperText\r\n                                style={{\r\n                                    color: 'red',\r\n                                    height: '22px',\r\n                                    margin: 'none',\r\n                                    padding: '8px'\r\n                                }}\r\n                            >\r\n                            </FormHelperText>\r\n                            <div>\r\n                                <Button onClick={handleClickCloseDistrictDialog} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => { saveDistrict(e) }} variant=\"outlined\" style={{ marginRight: '10px' }}>Save</Button>\r\n                            </div>\r\n                        </Box>\r\n                    </BootstrapDialog>\r\n                </div>\r\n                <div>\r\n                    <Dialog\r\n                        open={isCheckCity}\r\n                        onClose={handleCloseSwitchCity}\r\n                        fullWidth\r\n                        maxWidth=\"xs\"\r\n                    >\r\n                        <DialogTitle\r\n                            sx={{\r\n                                m: 0,\r\n                                p: 2,\r\n                                fontSize: '20px',\r\n                                fontWeight: 'bolder'\r\n                            }}\r\n                        >\r\n                            {city.isActive ? 'Inactive' : 'Active'}\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText\r\n                                style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.00938em'\r\n                                }}\r\n                            >\r\n                                {state.isActive\r\n                                    ? 'Are you sure you want to Active?'\r\n                                    : 'Are you sure you want to Inactive?'}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleCloseSwitchCity} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                            <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={handleSwitchCityCheck} variant=\"outlined\" style={{ marginRight: '10px' }}>Yes</Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n                <div>\r\n                    <BootstrapDialog\r\n                        open={isOpenCity}\r\n                        onClose={handleClickCloseCityDialog}\r\n                        PaperProps={{ sx: { height: '40%' } }}\r\n                        fullWidth\r\n                        maxWidth=\"xs\"\r\n                    >\r\n                        <BootstrapDialogTitle\r\n                            id=\"customized-dialog-title\"\r\n                            onClose={handleClickCloseCityDialog}\r\n                        >\r\n                            {city.id ? 'Edit City' : 'Add City'}\r\n                        </BootstrapDialogTitle>\r\n                        <DialogContent dividers>\r\n                            <FormControl\r\n                                sx={{ width: { lg: '100%' } }}\r\n                            >\r\n                                <InputLabel id=\"demo-multiple-name-label\">\r\n                                    Country *\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-multiple-name-label\"\r\n                                    id=\"demo-multiple-name\"\r\n                                    multiple={false}\r\n                                    name=\"countryId\"\r\n                                    value={city.countryId}\r\n                                    onChange={(e) => {\r\n                                        handleInputCityChange(e);\r\n                                        validateCityCountryId(e);\r\n                                    }}\r\n                                    label=\"Country\"\r\n                                    MenuProps={MenuProps}\r\n                                    required={true}\r\n                                >\r\n                                    {allCountries.map((arr: any) => (\r\n                                        <MenuItem key={arr.id} value={arr.id}>\r\n                                            {arr.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                {isCountryIdError && countryIdErrorMsg}\r\n                            </FormHelperText>\r\n                            <FormControl\r\n                                sx={{ width: { lg: '100%' } }}\r\n                            >\r\n                                <InputLabel id=\"demo-multiple-name-label\">\r\n                                    State *\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-multiple-name-label\"\r\n                                    id=\"demo-multiple-name\"\r\n                                    multiple={false}\r\n                                    name=\"stateId\"\r\n                                    value={city.stateId}\r\n                                    onChange={(e) => {\r\n                                        handleInputCityChange(e);\r\n                                        validateCityStateId(e);\r\n                                    }}\r\n                                    label=\"State\"\r\n                                    MenuProps={MenuProps}\r\n                                    required={true}\r\n                                >\r\n                                    {allStates.map((arr: any) => (\r\n                                        <MenuItem key={arr.id} value={arr.id}>\r\n                                            {arr.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                {isStateIdError && stateIdErrorMsg}\r\n                            </FormHelperText>\r\n                            <FormControl\r\n                                sx={{ width: { lg: '100%' } }}\r\n                            >\r\n                                <InputLabel id=\"demo-multiple-name-label\">\r\n                                    District *\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-multiple-name-label\"\r\n                                    id=\"demo-multiple-name\"\r\n                                    multiple={false}\r\n                                    name=\"districtId\"\r\n                                    value={city.districtId}\r\n                                    onChange={(e) => {\r\n                                        handleInputCityChange(e);\r\n                                        validateDistrictId(e);\r\n                                    }}\r\n                                    label=\"District\"\r\n                                    MenuProps={MenuProps}\r\n                                    required={true}\r\n                                >\r\n                                    {allDistricts.map((arr: any) => (\r\n                                        <MenuItem key={arr.id} value={arr.id}>\r\n                                            {arr.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                {isDistrictIdError && districtIdErrorMsg}\r\n                            </FormHelperText>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"City Name\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                name=\"name\"\r\n                                value={city.name}\r\n                                onChange={(arr) => {\r\n                                    handleInputCityChange(arr);\r\n                                    validateCityName(arr);\r\n                                }}\r\n                                required={true}\r\n                            />\r\n                            <FormHelperText\r\n                                style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                                {isCityNameError && cityNameErrorMsg}\r\n                            </FormHelperText>\r\n\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"City Pincode/Postalcode\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                name=\"pincode\"\r\n                                value={city.pincode}\r\n                                onChange={(arr) => {\r\n                                    handleInputCityChange(arr);\r\n                                    validateCityPincode(arr);\r\n                                }}\r\n                                required={true}\r\n                            />\r\n                            <FormHelperText\r\n                                style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                                {isPincodeError && pincodeErrorMsg}\r\n                            </FormHelperText>\r\n                            <Typography sx={{ fontSize: '12px', fontWeight: 'bold', color: '#ff0000', paddingTop: '12px' }}>\r\n                                Note: If postalcode/pincode is not available then please add 00000.\r\n                            </Typography>\r\n\r\n                        </DialogContent>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                p: '8px'\r\n                            }}\r\n                        >\r\n                            <FormHelperText\r\n                                style={{\r\n                                    color: 'red',\r\n                                    height: '22px',\r\n                                    margin: 'none',\r\n                                    padding: '8px'\r\n                                }}\r\n                            >\r\n                            </FormHelperText>\r\n                            <div>\r\n                                <Typography>\r\n                                    <Button onClick={handleClickCloseCityDialog} variant=\"outlined\" style={{ marginRight: '10px' }}>Cancel</Button>\r\n                                    <Button disabled={credentail?.email === \"demo@admin.com\"} onClick={(e) => { saveCity(e) }} variant=\"outlined\" style={{ marginRight: '10px' }}>Save</Button>\r\n                                </Typography>\r\n\r\n                            </div>\r\n                        </Box>\r\n                    </BootstrapDialog>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Region;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z\"\n}), 'CloudDownload');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"\n}), 'CloudUpload');\nexports.default = _default;","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;"],"names":["PageTitle","styled","Box","_ref","theme","spacing","_ref2","children","_jsx","className","Container","maxWidth","props","title","Country","constructor","id","name","isoCode","isoCode3","dialCode","isDefult","isActive","isDelete","createdDate","modifiedDate","States","countryId","code","countryName","Districts","stateId","stateName","Cities","districtId","pincode","districtName","BootstrapDialog","Dialog","padding","minHeight","BootstrapDialogTitle","onClose","other","_jsxs","DialogTitle","sx","m","p","fontSize","fontWeight","IconButton","onClick","position","right","top","color","palette","grey","CloseIcon","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","initialCountryState","initialState","initialDistrictState","initialCityState","Region","navigate","useNavigate","useTheme","isLoadingCountry","setIsLoadingCountry","useState","page","setPage","limit","setLimit","row","setRow","countries","setCountries","allCountries","setAllCountries","selectCountry","setSelectCountry","country","setCountry","isOpenCountry","setIsOpenCountry","isNameError","setIsNameError","nameErrorMsg","setNameErrorMsg","isIsoCodeError","setIsoCodeError","isoCodeErrorMsg","setIsoCodeErrorMsg","isIsoCode3Error","setIsoCode3Error","isoCode3ErrorMsg","setIsoCode3ErrorMsg","isCountryDialCodeError","setCountryDialCodeError","CountryDialCodeErrorMsg","setCountryDialCodeErrorMsg","isCheckCountry","setIsCheckCountry","isLoadingState","setIsLoadingState","pageState","setPageState","limitState","setLimitState","rowState","setRowState","states","setStates","allStates","setAllStates","selectState","setSelectState","state","setState","isOpenState","setIsOpenState","isStateNameError","setIsStateNameError","stateNameErrorMsg","setStateNameErrorMsg","isCountryIdError","setIsCountryIdError","countryIdErrorMsg","setCountryIdErrorMsg","isCheckState","setIsCheckState","isLoadingDistrict","setIsLoadingDistrict","pageDistrict","setPageDistrict","limitDistrict","setLimitDistrict","rowDistrict","setRowDistrict","districts","setDistricts","allDistricts","setAllDistricts","selectDistrict","setSelectDistrict","district","setDistrict","isOpenDistrict","setIsOpenDistrict","isDistrictNameError","setIsDistrictNameError","districtNameErrorMsg","setDistrictNameErrorMsg","isStateIdError","setIsStateIdError","stateIdErrorMsg","setStateIdErrorMsg","isCheckDistrict","setIsCheckDistrict","isLoadingCity","setIsLoadingCity","pageCity","setPageCity","limitCity","setLimitCity","rowCity","setRowCity","cities","setCities","selectCity","setSelectCity","city","setCity","isOpenCity","setIsOpenCity","isCityNameError","setIsCityNameError","cityNameErrorMsg","setCityNameErrorMsg","isPincodeError","setIsPincodeError","pincodeErrorMsg","setPincodeErrorMsg","isDistrictIdError","setIsDistrictIdError","districtIdErrorMsg","setDistrictIdErrorMsg","isCheckCity","setIsCheckCity","credentail","setCredentail","downloadSample","setDownloadSample","regionData","setRegionData","inputFile","useRef","fileReader","FileReader","isReadPermission","setIsReadPermission","isWritePermission","setIsWritePermission","isEditPermission","setIsEditPermission","isDeletePermission","setIsDeletePermission","useEffect","cred","JSON","parse","localStorage","getItem","roleId","ind","pagePermissions","findIndex","c","isAddPermission","loadData","async","getCountry","getState","getDistrict","getCity","startIndex","fetchRecord","token","refreshToken","obj","res","APIservice","httpPost","recordList","length","i","totalRecords","res1","status","clear","toast","error","message","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","POSITION","TOP_RIGHT","handleClickCloseCountryDialog","clearCountryError","handleInputChange","arr","value","target","savecountry","e","preventDefault","validateCountry","flag","handleCloseSwitchCountry","handleClickCloseStateDialog","clearStateError","handleInputStateChange","saveState","handleCloseSwitchState","handleClickCloseDistrictDialog","clearDistrictError","handleInputDistrictChange","saveDistrict","validateDistrict","handleCloseSwitchDistrict","handleClickCloseCityDialog","clearCityError","handleInputCityChange","saveCity","validateCity","handleCloseSwitchCity","handleClickDownloadSample","cityId","cityName","handleClickDownloadRegion","csvData","ConvertToCSV","blob","Blob","type","dwldLink","document","createElement","url","URL","createObjectURL","navigator","userAgent","indexOf","setAttribute","fileName","Date","getDate","getMonth","getFullYear","getTime","visibility","body","appendChild","click","removeChild","data","fields","array","str","index","slice","line","console","log","handleClickUploadRegion","current","ToastContainer","newestOnTop","rtl","pauseOnFocusLoss","Helmet","PageTitleWrapper","Grid","container","justifyContent","alignItems","item","Stack","Breadcrumbs","Link","to","display","HomeIcon","Typography","variant","_Fragment","Button","mt","xs","md","size","CSVLink","filename","background","colors","primary","lighter","textDecoration","CloudDownloadIcon","ref","accept","onChange","file","files","onload","lines","result","toString","split","headers","currentLine","j","trim","push","readAsText","CloudUploadIcon","Card","lg","sm","borderRight","RegionLoader","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","align","AddIcon","TableBody","map","labelId","isItemSelected","hover","role","tabIndex","cursor","selected","_ind","handleLoadState","noWrap","textTransform","Checkbox","checked","inputProps","Tooltip","arrow","Switch","handleSwitchCountry","handleClickOpenEditCountryDialog","EditTwoToneIcon","TablePagination","component","count","onPageChange","handlePageChange","event","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","colSpan","handleLoadDistrict","marginLeft","marginTop","handleSwitchState","handleClickOpenEditStateDialog","handleStatePageChange","handleLoadCity","handleSwitchDistrict","handleClickOpenEditDistrictDialog","handleDistrictPageChange","handleSwitchCity","obj2","res2","handleClickOpenEditCityDialog","handleCityPageChange","open","fullWidth","DialogContent","DialogContentText","letterSpacing","DialogActions","marginRight","disabled","email","preventDfault","height","dividers","TextField","autoFocus","margin","label","validateName","required","FormHelperText","validateIsoCode","validateIso3Code","validateCountryDialCode","FormControl","InputLabel","Select","multiple","validateStateCountryId","MenuItem","validateStateName","validateDistrictCountryId","validateDistrictStateId","validateDistrictName","validateCityCountryId","validateCityStateId","validateDistrictId","validateCityName","validateCityPincode","paddingTop","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","createSvgIcon","getCheckboxUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CheckboxRoot","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","styles","ownerState","root","indeterminate","capitalize","_extends","vars","text","secondary","disableRipple","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","checkboxClasses","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","React","inProps","_icon$props$fontSize","_indeterminateIcon$pr","useDefaultProps","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","clsx"],"sourceRoot":""}